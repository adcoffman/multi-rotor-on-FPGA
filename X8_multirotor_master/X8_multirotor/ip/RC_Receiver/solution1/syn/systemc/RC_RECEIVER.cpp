// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "RC_RECEIVER.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic RC_RECEIVER::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic RC_RECEIVER::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state1 = "1";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state2 = "10";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state3 = "100";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state4 = "1000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state5 = "10000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state6 = "100000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> RC_RECEIVER::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<8> RC_RECEIVER::ap_const_lv8_0 = "00000000";
const int RC_RECEIVER::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1 = "1";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2 = "10";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_3 = "11";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_4 = "100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_5 = "101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_6 = "110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_7 = "111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_8 = "1000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_9 = "1001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_A = "1010";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_B = "1011";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_C = "1100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_D = "1101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_E = "1110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_F = "1111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_10 = "10000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_11 = "10001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_12 = "10010";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_13 = "10011";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_14 = "10100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_15 = "10101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_16 = "10110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_17 = "10111";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_8 = "1000";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_1 = "1";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_2 = "10";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_3 = "11";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_4 = "100";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_5 = "101";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_6 = "110";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_7 = "111";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_A = "1010";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_B = "1011";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_C = "1100";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_D = "1101";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_E = "1110";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_F = "1111";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_10 = "10000";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_11 = "10001";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_12 = "10010";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_13 = "10011";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_14 = "10100";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_15 = "10101";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_16 = "10110";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_17 = "10111";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_18 = "11000";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_9 = "1001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_18 = "11000";
const sc_lv<1> RC_RECEIVER::ap_const_lv1_1 = "1";
const sc_lv<1> RC_RECEIVER::ap_const_lv1_0 = "0";
const sc_lv<8> RC_RECEIVER::ap_const_lv8_F = "1111";
const sc_lv<8> RC_RECEIVER::ap_const_lv8_1 = "1";
const bool RC_RECEIVER::ap_const_boolean_1 = true;

RC_RECEIVER::RC_RECEIVER(sc_module_name name) : sc_module(name), mVcdFile(0) {
    RC_RECEIVER_CTRL_s_axi_U = new RC_RECEIVER_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("RC_RECEIVER_CTRL_s_axi_U");
    RC_RECEIVER_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    RC_RECEIVER_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    RC_RECEIVER_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    RC_RECEIVER_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    RC_RECEIVER_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    RC_RECEIVER_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    RC_RECEIVER_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    RC_RECEIVER_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    RC_RECEIVER_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    RC_RECEIVER_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    RC_RECEIVER_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    RC_RECEIVER_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    RC_RECEIVER_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    RC_RECEIVER_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    RC_RECEIVER_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    RC_RECEIVER_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    RC_RECEIVER_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    RC_RECEIVER_CTRL_s_axi_U->ACLK(ap_clk);
    RC_RECEIVER_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    RC_RECEIVER_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    RC_RECEIVER_CTRL_s_axi_U->ap_start(ap_start);
    RC_RECEIVER_CTRL_s_axi_U->interrupt(interrupt);
    RC_RECEIVER_CTRL_s_axi_U->ap_ready(ap_ready);
    RC_RECEIVER_CTRL_s_axi_U->ap_done(ap_done);
    RC_RECEIVER_CTRL_s_axi_U->ap_idle(ap_idle);
    RC_RECEIVER_DATA_s_axi_U = new RC_RECEIVER_DATA_s_axi<C_S_AXI_DATA_ADDR_WIDTH,C_S_AXI_DATA_DATA_WIDTH>("RC_RECEIVER_DATA_s_axi_U");
    RC_RECEIVER_DATA_s_axi_U->AWVALID(s_axi_DATA_AWVALID);
    RC_RECEIVER_DATA_s_axi_U->AWREADY(s_axi_DATA_AWREADY);
    RC_RECEIVER_DATA_s_axi_U->AWADDR(s_axi_DATA_AWADDR);
    RC_RECEIVER_DATA_s_axi_U->WVALID(s_axi_DATA_WVALID);
    RC_RECEIVER_DATA_s_axi_U->WREADY(s_axi_DATA_WREADY);
    RC_RECEIVER_DATA_s_axi_U->WDATA(s_axi_DATA_WDATA);
    RC_RECEIVER_DATA_s_axi_U->WSTRB(s_axi_DATA_WSTRB);
    RC_RECEIVER_DATA_s_axi_U->ARVALID(s_axi_DATA_ARVALID);
    RC_RECEIVER_DATA_s_axi_U->ARREADY(s_axi_DATA_ARREADY);
    RC_RECEIVER_DATA_s_axi_U->ARADDR(s_axi_DATA_ARADDR);
    RC_RECEIVER_DATA_s_axi_U->RVALID(s_axi_DATA_RVALID);
    RC_RECEIVER_DATA_s_axi_U->RREADY(s_axi_DATA_RREADY);
    RC_RECEIVER_DATA_s_axi_U->RDATA(s_axi_DATA_RDATA);
    RC_RECEIVER_DATA_s_axi_U->RRESP(s_axi_DATA_RRESP);
    RC_RECEIVER_DATA_s_axi_U->BVALID(s_axi_DATA_BVALID);
    RC_RECEIVER_DATA_s_axi_U->BREADY(s_axi_DATA_BREADY);
    RC_RECEIVER_DATA_s_axi_U->BRESP(s_axi_DATA_BRESP);
    RC_RECEIVER_DATA_s_axi_U->ACLK(ap_clk);
    RC_RECEIVER_DATA_s_axi_U->ARESET(ap_rst_n_inv);
    RC_RECEIVER_DATA_s_axi_U->ACLK_EN(ap_var_for_const0);
    RC_RECEIVER_DATA_s_axi_U->SBUS_data_address0(SBUS_data_address0);
    RC_RECEIVER_DATA_s_axi_U->SBUS_data_ce0(SBUS_data_ce0);
    RC_RECEIVER_DATA_s_axi_U->SBUS_data_q0(SBUS_data_q0);
    RC_RECEIVER_TEST_s_axi_U = new RC_RECEIVER_TEST_s_axi<C_S_AXI_TEST_ADDR_WIDTH,C_S_AXI_TEST_DATA_WIDTH>("RC_RECEIVER_TEST_s_axi_U");
    RC_RECEIVER_TEST_s_axi_U->AWVALID(s_axi_TEST_AWVALID);
    RC_RECEIVER_TEST_s_axi_U->AWREADY(s_axi_TEST_AWREADY);
    RC_RECEIVER_TEST_s_axi_U->AWADDR(s_axi_TEST_AWADDR);
    RC_RECEIVER_TEST_s_axi_U->WVALID(s_axi_TEST_WVALID);
    RC_RECEIVER_TEST_s_axi_U->WREADY(s_axi_TEST_WREADY);
    RC_RECEIVER_TEST_s_axi_U->WDATA(s_axi_TEST_WDATA);
    RC_RECEIVER_TEST_s_axi_U->WSTRB(s_axi_TEST_WSTRB);
    RC_RECEIVER_TEST_s_axi_U->ARVALID(s_axi_TEST_ARVALID);
    RC_RECEIVER_TEST_s_axi_U->ARREADY(s_axi_TEST_ARREADY);
    RC_RECEIVER_TEST_s_axi_U->ARADDR(s_axi_TEST_ARADDR);
    RC_RECEIVER_TEST_s_axi_U->RVALID(s_axi_TEST_RVALID);
    RC_RECEIVER_TEST_s_axi_U->RREADY(s_axi_TEST_RREADY);
    RC_RECEIVER_TEST_s_axi_U->RDATA(s_axi_TEST_RDATA);
    RC_RECEIVER_TEST_s_axi_U->RRESP(s_axi_TEST_RRESP);
    RC_RECEIVER_TEST_s_axi_U->BVALID(s_axi_TEST_BVALID);
    RC_RECEIVER_TEST_s_axi_U->BREADY(s_axi_TEST_BREADY);
    RC_RECEIVER_TEST_s_axi_U->BRESP(s_axi_TEST_BRESP);
    RC_RECEIVER_TEST_s_axi_U->ACLK(ap_clk);
    RC_RECEIVER_TEST_s_axi_U->ARESET(ap_rst_n_inv);
    RC_RECEIVER_TEST_s_axi_U->ACLK_EN(ap_var_for_const0);
    RC_RECEIVER_TEST_s_axi_U->norm_out_address0(norm_out_address0);
    RC_RECEIVER_TEST_s_axi_U->norm_out_ce0(norm_out_ce0);
    RC_RECEIVER_TEST_s_axi_U->norm_out_we0(norm_out_we0);
    RC_RECEIVER_TEST_s_axi_U->norm_out_d0(norm_out_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_SBUS_data_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_SBUS_data_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_norm_out_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_norm_out_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_norm_out_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( tmp_3_fu_547_p1 );
    sensitive << ( tmp_3_1_fu_552_p1 );
    sensitive << ( tmp_3_2_fu_557_p1 );
    sensitive << ( tmp_3_3_fu_562_p1 );
    sensitive << ( tmp_3_4_fu_567_p1 );
    sensitive << ( tmp_3_5_fu_572_p1 );
    sensitive << ( tmp_3_6_fu_577_p1 );
    sensitive << ( tmp_3_7_fu_582_p1 );
    sensitive << ( tmp_3_s_fu_587_p1 );
    sensitive << ( tmp_3_8_fu_592_p1 );
    sensitive << ( tmp_3_9_fu_597_p1 );
    sensitive << ( tmp_3_10_fu_602_p1 );
    sensitive << ( tmp_3_11_fu_607_p1 );
    sensitive << ( tmp_3_12_fu_612_p1 );
    sensitive << ( tmp_3_13_fu_617_p1 );
    sensitive << ( tmp_3_14_fu_622_p1 );
    sensitive << ( tmp_3_15_fu_627_p1 );
    sensitive << ( tmp_3_16_fu_632_p1 );
    sensitive << ( tmp_3_17_fu_637_p1 );
    sensitive << ( tmp_3_18_fu_642_p1 );
    sensitive << ( tmp_3_19_fu_647_p1 );
    sensitive << ( tmp_3_20_fu_652_p1 );
    sensitive << ( tmp_3_21_fu_657_p1 );
    sensitive << ( tmp_fu_668_p1 );

    SC_METHOD(thread_norm_out_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_or_cond_fu_677_p2);
    sensitive << ( tmp_5_reg_847 );
    sensitive << ( tmp_1_fu_672_p2 );

    SC_METHOD(thread_tmp_1_fu_672_p2);
    sensitive << ( SBUS_data_load_reg_726 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_tmp_2_fu_698_p3);
    sensitive << ( SBUS_data_load_21_reg_837 );

    SC_METHOD(thread_tmp_3_10_fu_602_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_11_fu_607_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_12_fu_612_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_13_fu_617_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_14_fu_622_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_15_fu_627_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_16_fu_632_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_17_fu_637_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_18_fu_642_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_19_fu_647_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_1_fu_552_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_20_fu_652_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_21_fu_657_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_2_fu_557_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_3_fu_562_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_4_fu_567_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_5_fu_572_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_6_fu_577_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_7_fu_582_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_8_fu_592_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_9_fu_597_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_3_fu_547_p0);
    sensitive << ( SBUS_data_q0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_3_fu_547_p1);
    sensitive << ( tmp_3_fu_547_p0 );

    SC_METHOD(thread_tmp_3_s_fu_587_p1);
    sensitive << ( SBUS_data_q0 );

    SC_METHOD(thread_tmp_4_fu_709_p2);
    sensitive << ( lost );

    SC_METHOD(thread_tmp_5_fu_662_p2);
    sensitive << ( SBUS_data_q0 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_tmp_6_fu_686_p2);
    sensitive << ( errors );

    SC_METHOD(thread_tmp_fu_668_p1);
    sensitive << ( SBUS_data_load_reg_726 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000001";
    lost = "00000000000000000000000000000000";
    errors = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "RC_RECEIVER_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, s_axi_DATA_AWVALID, "(port)s_axi_DATA_AWVALID");
    sc_trace(mVcdFile, s_axi_DATA_AWREADY, "(port)s_axi_DATA_AWREADY");
    sc_trace(mVcdFile, s_axi_DATA_AWADDR, "(port)s_axi_DATA_AWADDR");
    sc_trace(mVcdFile, s_axi_DATA_WVALID, "(port)s_axi_DATA_WVALID");
    sc_trace(mVcdFile, s_axi_DATA_WREADY, "(port)s_axi_DATA_WREADY");
    sc_trace(mVcdFile, s_axi_DATA_WDATA, "(port)s_axi_DATA_WDATA");
    sc_trace(mVcdFile, s_axi_DATA_WSTRB, "(port)s_axi_DATA_WSTRB");
    sc_trace(mVcdFile, s_axi_DATA_ARVALID, "(port)s_axi_DATA_ARVALID");
    sc_trace(mVcdFile, s_axi_DATA_ARREADY, "(port)s_axi_DATA_ARREADY");
    sc_trace(mVcdFile, s_axi_DATA_ARADDR, "(port)s_axi_DATA_ARADDR");
    sc_trace(mVcdFile, s_axi_DATA_RVALID, "(port)s_axi_DATA_RVALID");
    sc_trace(mVcdFile, s_axi_DATA_RREADY, "(port)s_axi_DATA_RREADY");
    sc_trace(mVcdFile, s_axi_DATA_RDATA, "(port)s_axi_DATA_RDATA");
    sc_trace(mVcdFile, s_axi_DATA_RRESP, "(port)s_axi_DATA_RRESP");
    sc_trace(mVcdFile, s_axi_DATA_BVALID, "(port)s_axi_DATA_BVALID");
    sc_trace(mVcdFile, s_axi_DATA_BREADY, "(port)s_axi_DATA_BREADY");
    sc_trace(mVcdFile, s_axi_DATA_BRESP, "(port)s_axi_DATA_BRESP");
    sc_trace(mVcdFile, s_axi_TEST_AWVALID, "(port)s_axi_TEST_AWVALID");
    sc_trace(mVcdFile, s_axi_TEST_AWREADY, "(port)s_axi_TEST_AWREADY");
    sc_trace(mVcdFile, s_axi_TEST_AWADDR, "(port)s_axi_TEST_AWADDR");
    sc_trace(mVcdFile, s_axi_TEST_WVALID, "(port)s_axi_TEST_WVALID");
    sc_trace(mVcdFile, s_axi_TEST_WREADY, "(port)s_axi_TEST_WREADY");
    sc_trace(mVcdFile, s_axi_TEST_WDATA, "(port)s_axi_TEST_WDATA");
    sc_trace(mVcdFile, s_axi_TEST_WSTRB, "(port)s_axi_TEST_WSTRB");
    sc_trace(mVcdFile, s_axi_TEST_ARVALID, "(port)s_axi_TEST_ARVALID");
    sc_trace(mVcdFile, s_axi_TEST_ARREADY, "(port)s_axi_TEST_ARREADY");
    sc_trace(mVcdFile, s_axi_TEST_ARADDR, "(port)s_axi_TEST_ARADDR");
    sc_trace(mVcdFile, s_axi_TEST_RVALID, "(port)s_axi_TEST_RVALID");
    sc_trace(mVcdFile, s_axi_TEST_RREADY, "(port)s_axi_TEST_RREADY");
    sc_trace(mVcdFile, s_axi_TEST_RDATA, "(port)s_axi_TEST_RDATA");
    sc_trace(mVcdFile, s_axi_TEST_RRESP, "(port)s_axi_TEST_RRESP");
    sc_trace(mVcdFile, s_axi_TEST_BVALID, "(port)s_axi_TEST_BVALID");
    sc_trace(mVcdFile, s_axi_TEST_BREADY, "(port)s_axi_TEST_BREADY");
    sc_trace(mVcdFile, s_axi_TEST_BRESP, "(port)s_axi_TEST_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, SBUS_data_address0, "SBUS_data_address0");
    sc_trace(mVcdFile, SBUS_data_ce0, "SBUS_data_ce0");
    sc_trace(mVcdFile, SBUS_data_q0, "SBUS_data_q0");
    sc_trace(mVcdFile, norm_out_address0, "norm_out_address0");
    sc_trace(mVcdFile, norm_out_ce0, "norm_out_ce0");
    sc_trace(mVcdFile, norm_out_we0, "norm_out_we0");
    sc_trace(mVcdFile, norm_out_d0, "norm_out_d0");
    sc_trace(mVcdFile, lost, "lost");
    sc_trace(mVcdFile, errors, "errors");
    sc_trace(mVcdFile, SBUS_data_load_reg_726, "SBUS_data_load_reg_726");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, SBUS_data_load_21_reg_837, "SBUS_data_load_21_reg_837");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_5_fu_662_p2, "tmp_5_fu_662_p2");
    sc_trace(mVcdFile, tmp_5_reg_847, "tmp_5_reg_847");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, tmp_4_fu_709_p2, "tmp_4_fu_709_p2");
    sc_trace(mVcdFile, or_cond_fu_677_p2, "or_cond_fu_677_p2");
    sc_trace(mVcdFile, tmp_2_fu_698_p3, "tmp_2_fu_698_p3");
    sc_trace(mVcdFile, tmp_6_fu_686_p2, "tmp_6_fu_686_p2");
    sc_trace(mVcdFile, tmp_3_fu_547_p1, "tmp_3_fu_547_p1");
    sc_trace(mVcdFile, tmp_3_1_fu_552_p1, "tmp_3_1_fu_552_p1");
    sc_trace(mVcdFile, tmp_3_2_fu_557_p1, "tmp_3_2_fu_557_p1");
    sc_trace(mVcdFile, tmp_3_3_fu_562_p1, "tmp_3_3_fu_562_p1");
    sc_trace(mVcdFile, tmp_3_4_fu_567_p1, "tmp_3_4_fu_567_p1");
    sc_trace(mVcdFile, tmp_3_5_fu_572_p1, "tmp_3_5_fu_572_p1");
    sc_trace(mVcdFile, tmp_3_6_fu_577_p1, "tmp_3_6_fu_577_p1");
    sc_trace(mVcdFile, tmp_3_7_fu_582_p1, "tmp_3_7_fu_582_p1");
    sc_trace(mVcdFile, tmp_3_s_fu_587_p1, "tmp_3_s_fu_587_p1");
    sc_trace(mVcdFile, tmp_3_8_fu_592_p1, "tmp_3_8_fu_592_p1");
    sc_trace(mVcdFile, tmp_3_9_fu_597_p1, "tmp_3_9_fu_597_p1");
    sc_trace(mVcdFile, tmp_3_10_fu_602_p1, "tmp_3_10_fu_602_p1");
    sc_trace(mVcdFile, tmp_3_11_fu_607_p1, "tmp_3_11_fu_607_p1");
    sc_trace(mVcdFile, tmp_3_12_fu_612_p1, "tmp_3_12_fu_612_p1");
    sc_trace(mVcdFile, tmp_3_13_fu_617_p1, "tmp_3_13_fu_617_p1");
    sc_trace(mVcdFile, tmp_3_14_fu_622_p1, "tmp_3_14_fu_622_p1");
    sc_trace(mVcdFile, tmp_3_15_fu_627_p1, "tmp_3_15_fu_627_p1");
    sc_trace(mVcdFile, tmp_3_16_fu_632_p1, "tmp_3_16_fu_632_p1");
    sc_trace(mVcdFile, tmp_3_17_fu_637_p1, "tmp_3_17_fu_637_p1");
    sc_trace(mVcdFile, tmp_3_18_fu_642_p1, "tmp_3_18_fu_642_p1");
    sc_trace(mVcdFile, tmp_3_19_fu_647_p1, "tmp_3_19_fu_647_p1");
    sc_trace(mVcdFile, tmp_3_20_fu_652_p1, "tmp_3_20_fu_652_p1");
    sc_trace(mVcdFile, tmp_3_21_fu_657_p1, "tmp_3_21_fu_657_p1");
    sc_trace(mVcdFile, tmp_fu_668_p1, "tmp_fu_668_p1");
    sc_trace(mVcdFile, tmp_3_fu_547_p0, "tmp_3_fu_547_p0");
    sc_trace(mVcdFile, tmp_1_fu_672_p2, "tmp_1_fu_672_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("RC_RECEIVER.hdltvin.dat");
    mHdltvoutHandle.open("RC_RECEIVER.hdltvout.dat");
}

RC_RECEIVER::~RC_RECEIVER() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete RC_RECEIVER_CTRL_s_axi_U;
    delete RC_RECEIVER_DATA_s_axi_U;
    delete RC_RECEIVER_TEST_s_axi_U;
}

void RC_RECEIVER::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void RC_RECEIVER::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        SBUS_data_load_21_reg_837 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        SBUS_data_load_reg_726 = SBUS_data_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(or_cond_fu_677_p2.read(), ap_const_lv1_0))) {
        errors = tmp_6_fu_686_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(or_cond_fu_677_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_698_p3.read()))) {
        lost = tmp_4_fu_709_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        tmp_5_reg_847 = tmp_5_fu_662_p2.read();
    }
}

void RC_RECEIVER::thread_SBUS_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        SBUS_data_address0 = "XXXXX";
    }
}

void RC_RECEIVER::thread_SBUS_data_ce0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        SBUS_data_ce0 = ap_const_logic_1;
    } else {
        SBUS_data_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void RC_RECEIVER::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void RC_RECEIVER::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void RC_RECEIVER::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void RC_RECEIVER::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void RC_RECEIVER::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void RC_RECEIVER::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void RC_RECEIVER::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void RC_RECEIVER::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void RC_RECEIVER::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void RC_RECEIVER::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void RC_RECEIVER::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void RC_RECEIVER::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void RC_RECEIVER::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void RC_RECEIVER::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void RC_RECEIVER::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void RC_RECEIVER::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void RC_RECEIVER::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void RC_RECEIVER::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void RC_RECEIVER::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void RC_RECEIVER::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void RC_RECEIVER::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void RC_RECEIVER::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void RC_RECEIVER::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void RC_RECEIVER::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void RC_RECEIVER::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void RC_RECEIVER::thread_norm_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_8);
    } else {
        norm_out_address0 =  (sc_lv<12>) ("XXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_norm_out_ce0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        norm_out_ce0 = ap_const_logic_1;
    } else {
        norm_out_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_norm_out_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        norm_out_d0 = tmp_fu_668_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        norm_out_d0 = tmp_3_21_fu_657_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        norm_out_d0 = tmp_3_20_fu_652_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        norm_out_d0 = tmp_3_19_fu_647_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        norm_out_d0 = tmp_3_18_fu_642_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        norm_out_d0 = tmp_3_17_fu_637_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        norm_out_d0 = tmp_3_16_fu_632_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        norm_out_d0 = tmp_3_15_fu_627_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        norm_out_d0 = tmp_3_14_fu_622_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        norm_out_d0 = tmp_3_13_fu_617_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        norm_out_d0 = tmp_3_12_fu_612_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        norm_out_d0 = tmp_3_11_fu_607_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        norm_out_d0 = tmp_3_10_fu_602_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        norm_out_d0 = tmp_3_9_fu_597_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        norm_out_d0 = tmp_3_8_fu_592_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        norm_out_d0 = tmp_3_s_fu_587_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        norm_out_d0 = tmp_3_7_fu_582_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        norm_out_d0 = tmp_3_6_fu_577_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        norm_out_d0 = tmp_3_5_fu_572_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        norm_out_d0 = tmp_3_4_fu_567_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        norm_out_d0 = tmp_3_3_fu_562_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        norm_out_d0 = tmp_3_2_fu_557_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        norm_out_d0 = tmp_3_1_fu_552_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        norm_out_d0 = tmp_3_fu_547_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        norm_out_d0 = ap_const_lv32_F;
    } else {
        norm_out_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_norm_out_we0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        norm_out_we0 = ap_const_logic_1;
    } else {
        norm_out_we0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_or_cond_fu_677_p2() {
    or_cond_fu_677_p2 = (tmp_1_fu_672_p2.read() & tmp_5_reg_847.read());
}

void RC_RECEIVER::thread_tmp_1_fu_672_p2() {
    tmp_1_fu_672_p2 = (!SBUS_data_load_reg_726.read().is_01() || !ap_const_lv8_F.is_01())? sc_lv<1>(): sc_lv<1>(SBUS_data_load_reg_726.read() == ap_const_lv8_F);
}

void RC_RECEIVER::thread_tmp_2_fu_698_p3() {
    tmp_2_fu_698_p3 = SBUS_data_load_21_reg_837.read().range(2, 2);
}

void RC_RECEIVER::thread_tmp_3_10_fu_602_p1() {
    tmp_3_10_fu_602_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_11_fu_607_p1() {
    tmp_3_11_fu_607_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_12_fu_612_p1() {
    tmp_3_12_fu_612_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_13_fu_617_p1() {
    tmp_3_13_fu_617_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_14_fu_622_p1() {
    tmp_3_14_fu_622_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_15_fu_627_p1() {
    tmp_3_15_fu_627_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_16_fu_632_p1() {
    tmp_3_16_fu_632_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_17_fu_637_p1() {
    tmp_3_17_fu_637_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_18_fu_642_p1() {
    tmp_3_18_fu_642_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_19_fu_647_p1() {
    tmp_3_19_fu_647_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_1_fu_552_p1() {
    tmp_3_1_fu_552_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_20_fu_652_p1() {
    tmp_3_20_fu_652_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_21_fu_657_p1() {
    tmp_3_21_fu_657_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_2_fu_557_p1() {
    tmp_3_2_fu_557_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_3_fu_562_p1() {
    tmp_3_3_fu_562_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_4_fu_567_p1() {
    tmp_3_4_fu_567_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_5_fu_572_p1() {
    tmp_3_5_fu_572_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_6_fu_577_p1() {
    tmp_3_6_fu_577_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_7_fu_582_p1() {
    tmp_3_7_fu_582_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_8_fu_592_p1() {
    tmp_3_8_fu_592_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_9_fu_597_p1() {
    tmp_3_9_fu_597_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_3_fu_547_p0() {
    tmp_3_fu_547_p0 = SBUS_data_q0.read();
}

void RC_RECEIVER::thread_tmp_3_fu_547_p1() {
    tmp_3_fu_547_p1 = esl_zext<32,8>(tmp_3_fu_547_p0.read());
}

void RC_RECEIVER::thread_tmp_3_s_fu_587_p1() {
    tmp_3_s_fu_587_p1 = esl_zext<32,8>(SBUS_data_q0.read());
}

void RC_RECEIVER::thread_tmp_4_fu_709_p2() {
    tmp_4_fu_709_p2 = (!lost.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(lost.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void RC_RECEIVER::thread_tmp_5_fu_662_p2() {
    tmp_5_fu_662_p2 = (!SBUS_data_q0.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(SBUS_data_q0.read() == ap_const_lv8_0);
}

void RC_RECEIVER::thread_tmp_6_fu_686_p2() {
    tmp_6_fu_686_p2 = (!errors.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(errors.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void RC_RECEIVER::thread_tmp_fu_668_p1() {
    tmp_fu_668_p1 = esl_sext<32,8>(SBUS_data_load_reg_726.read());
}

void RC_RECEIVER::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void RC_RECEIVER::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_AWVALID\" :  \"" << s_axi_DATA_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_AWREADY\" :  \"" << s_axi_DATA_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_AWADDR\" :  \"" << s_axi_DATA_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_WVALID\" :  \"" << s_axi_DATA_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_WREADY\" :  \"" << s_axi_DATA_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_WDATA\" :  \"" << s_axi_DATA_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_WSTRB\" :  \"" << s_axi_DATA_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_ARVALID\" :  \"" << s_axi_DATA_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_ARREADY\" :  \"" << s_axi_DATA_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_ARADDR\" :  \"" << s_axi_DATA_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_RVALID\" :  \"" << s_axi_DATA_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_RREADY\" :  \"" << s_axi_DATA_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_RDATA\" :  \"" << s_axi_DATA_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_RRESP\" :  \"" << s_axi_DATA_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_BVALID\" :  \"" << s_axi_DATA_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_DATA_BREADY\" :  \"" << s_axi_DATA_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_DATA_BRESP\" :  \"" << s_axi_DATA_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_AWVALID\" :  \"" << s_axi_TEST_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_AWREADY\" :  \"" << s_axi_TEST_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_AWADDR\" :  \"" << s_axi_TEST_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_WVALID\" :  \"" << s_axi_TEST_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_WREADY\" :  \"" << s_axi_TEST_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_WDATA\" :  \"" << s_axi_TEST_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_WSTRB\" :  \"" << s_axi_TEST_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_ARVALID\" :  \"" << s_axi_TEST_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_ARREADY\" :  \"" << s_axi_TEST_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_ARADDR\" :  \"" << s_axi_TEST_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_RVALID\" :  \"" << s_axi_TEST_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_RREADY\" :  \"" << s_axi_TEST_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_RDATA\" :  \"" << s_axi_TEST_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_RRESP\" :  \"" << s_axi_TEST_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_BVALID\" :  \"" << s_axi_TEST_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_BREADY\" :  \"" << s_axi_TEST_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_BRESP\" :  \"" << s_axi_TEST_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

