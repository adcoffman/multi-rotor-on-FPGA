// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _RC_RECEIVER_HH_
#define _RC_RECEIVER_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "RC_RECEIVER_CTRL_s_axi.h"
#include "RC_RECEIVER_DATA_s_axi.h"
#include "RC_RECEIVER_TEST_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32,
         unsigned int C_S_AXI_DATA_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_DATA_DATA_WIDTH = 32,
         unsigned int C_S_AXI_TEST_ADDR_WIDTH = 15,
         unsigned int C_S_AXI_TEST_DATA_WIDTH = 32>
struct RC_RECEIVER : public sc_module {
    // Port declarations 54
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_CTRL_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_WVALID;
    sc_out< sc_logic > s_axi_CTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_CTRL_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_RVALID;
    sc_in< sc_logic > s_axi_CTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_in< sc_logic > s_axi_DATA_AWVALID;
    sc_out< sc_logic > s_axi_DATA_AWREADY;
    sc_in< sc_uint<C_S_AXI_DATA_ADDR_WIDTH> > s_axi_DATA_AWADDR;
    sc_in< sc_logic > s_axi_DATA_WVALID;
    sc_out< sc_logic > s_axi_DATA_WREADY;
    sc_in< sc_uint<C_S_AXI_DATA_DATA_WIDTH> > s_axi_DATA_WDATA;
    sc_in< sc_uint<C_S_AXI_DATA_DATA_WIDTH/8> > s_axi_DATA_WSTRB;
    sc_in< sc_logic > s_axi_DATA_ARVALID;
    sc_out< sc_logic > s_axi_DATA_ARREADY;
    sc_in< sc_uint<C_S_AXI_DATA_ADDR_WIDTH> > s_axi_DATA_ARADDR;
    sc_out< sc_logic > s_axi_DATA_RVALID;
    sc_in< sc_logic > s_axi_DATA_RREADY;
    sc_out< sc_uint<C_S_AXI_DATA_DATA_WIDTH> > s_axi_DATA_RDATA;
    sc_out< sc_lv<2> > s_axi_DATA_RRESP;
    sc_out< sc_logic > s_axi_DATA_BVALID;
    sc_in< sc_logic > s_axi_DATA_BREADY;
    sc_out< sc_lv<2> > s_axi_DATA_BRESP;
    sc_in< sc_logic > s_axi_TEST_AWVALID;
    sc_out< sc_logic > s_axi_TEST_AWREADY;
    sc_in< sc_uint<C_S_AXI_TEST_ADDR_WIDTH> > s_axi_TEST_AWADDR;
    sc_in< sc_logic > s_axi_TEST_WVALID;
    sc_out< sc_logic > s_axi_TEST_WREADY;
    sc_in< sc_uint<C_S_AXI_TEST_DATA_WIDTH> > s_axi_TEST_WDATA;
    sc_in< sc_uint<C_S_AXI_TEST_DATA_WIDTH/8> > s_axi_TEST_WSTRB;
    sc_in< sc_logic > s_axi_TEST_ARVALID;
    sc_out< sc_logic > s_axi_TEST_ARREADY;
    sc_in< sc_uint<C_S_AXI_TEST_ADDR_WIDTH> > s_axi_TEST_ARADDR;
    sc_out< sc_logic > s_axi_TEST_RVALID;
    sc_in< sc_logic > s_axi_TEST_RREADY;
    sc_out< sc_uint<C_S_AXI_TEST_DATA_WIDTH> > s_axi_TEST_RDATA;
    sc_out< sc_lv<2> > s_axi_TEST_RRESP;
    sc_out< sc_logic > s_axi_TEST_BVALID;
    sc_in< sc_logic > s_axi_TEST_BREADY;
    sc_out< sc_lv<2> > s_axi_TEST_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    RC_RECEIVER(sc_module_name name);
    SC_HAS_PROCESS(RC_RECEIVER);

    ~RC_RECEIVER();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    RC_RECEIVER_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* RC_RECEIVER_CTRL_s_axi_U;
    RC_RECEIVER_DATA_s_axi<C_S_AXI_DATA_ADDR_WIDTH,C_S_AXI_DATA_DATA_WIDTH>* RC_RECEIVER_DATA_s_axi_U;
    RC_RECEIVER_TEST_s_axi<C_S_AXI_TEST_ADDR_WIDTH,C_S_AXI_TEST_DATA_WIDTH>* RC_RECEIVER_TEST_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<25> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<5> > SBUS_data_address0;
    sc_signal< sc_logic > SBUS_data_ce0;
    sc_signal< sc_lv<8> > SBUS_data_q0;
    sc_signal< sc_lv<12> > norm_out_address0;
    sc_signal< sc_logic > norm_out_ce0;
    sc_signal< sc_logic > norm_out_we0;
    sc_signal< sc_lv<32> > norm_out_d0;
    sc_signal< sc_lv<32> > lost;
    sc_signal< sc_lv<8> > errors;
    sc_signal< sc_lv<8> > SBUS_data_load_reg_726;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<8> > SBUS_data_load_21_reg_837;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<1> > tmp_5_fu_662_p2;
    sc_signal< sc_lv<1> > tmp_5_reg_847;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_lv<32> > tmp_4_fu_709_p2;
    sc_signal< sc_lv<1> > or_cond_fu_677_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_698_p3;
    sc_signal< sc_lv<8> > tmp_6_fu_686_p2;
    sc_signal< sc_lv<32> > tmp_3_fu_547_p1;
    sc_signal< sc_lv<32> > tmp_3_1_fu_552_p1;
    sc_signal< sc_lv<32> > tmp_3_2_fu_557_p1;
    sc_signal< sc_lv<32> > tmp_3_3_fu_562_p1;
    sc_signal< sc_lv<32> > tmp_3_4_fu_567_p1;
    sc_signal< sc_lv<32> > tmp_3_5_fu_572_p1;
    sc_signal< sc_lv<32> > tmp_3_6_fu_577_p1;
    sc_signal< sc_lv<32> > tmp_3_7_fu_582_p1;
    sc_signal< sc_lv<32> > tmp_3_s_fu_587_p1;
    sc_signal< sc_lv<32> > tmp_3_8_fu_592_p1;
    sc_signal< sc_lv<32> > tmp_3_9_fu_597_p1;
    sc_signal< sc_lv<32> > tmp_3_10_fu_602_p1;
    sc_signal< sc_lv<32> > tmp_3_11_fu_607_p1;
    sc_signal< sc_lv<32> > tmp_3_12_fu_612_p1;
    sc_signal< sc_lv<32> > tmp_3_13_fu_617_p1;
    sc_signal< sc_lv<32> > tmp_3_14_fu_622_p1;
    sc_signal< sc_lv<32> > tmp_3_15_fu_627_p1;
    sc_signal< sc_lv<32> > tmp_3_16_fu_632_p1;
    sc_signal< sc_lv<32> > tmp_3_17_fu_637_p1;
    sc_signal< sc_lv<32> > tmp_3_18_fu_642_p1;
    sc_signal< sc_lv<32> > tmp_3_19_fu_647_p1;
    sc_signal< sc_lv<32> > tmp_3_20_fu_652_p1;
    sc_signal< sc_lv<32> > tmp_3_21_fu_657_p1;
    sc_signal< sc_lv<32> > tmp_fu_668_p1;
    sc_signal< sc_lv<8> > tmp_3_fu_547_p0;
    sc_signal< sc_lv<1> > tmp_1_fu_672_p2;
    sc_signal< sc_lv<25> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<25> ap_ST_fsm_state1;
    static const sc_lv<25> ap_ST_fsm_state2;
    static const sc_lv<25> ap_ST_fsm_state3;
    static const sc_lv<25> ap_ST_fsm_state4;
    static const sc_lv<25> ap_ST_fsm_state5;
    static const sc_lv<25> ap_ST_fsm_state6;
    static const sc_lv<25> ap_ST_fsm_state7;
    static const sc_lv<25> ap_ST_fsm_state8;
    static const sc_lv<25> ap_ST_fsm_state9;
    static const sc_lv<25> ap_ST_fsm_state10;
    static const sc_lv<25> ap_ST_fsm_state11;
    static const sc_lv<25> ap_ST_fsm_state12;
    static const sc_lv<25> ap_ST_fsm_state13;
    static const sc_lv<25> ap_ST_fsm_state14;
    static const sc_lv<25> ap_ST_fsm_state15;
    static const sc_lv<25> ap_ST_fsm_state16;
    static const sc_lv<25> ap_ST_fsm_state17;
    static const sc_lv<25> ap_ST_fsm_state18;
    static const sc_lv<25> ap_ST_fsm_state19;
    static const sc_lv<25> ap_ST_fsm_state20;
    static const sc_lv<25> ap_ST_fsm_state21;
    static const sc_lv<25> ap_ST_fsm_state22;
    static const sc_lv<25> ap_ST_fsm_state23;
    static const sc_lv<25> ap_ST_fsm_state24;
    static const sc_lv<25> ap_ST_fsm_state25;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_B;
    static const sc_lv<64> ap_const_lv64_C;
    static const sc_lv<64> ap_const_lv64_D;
    static const sc_lv<64> ap_const_lv64_E;
    static const sc_lv<64> ap_const_lv64_F;
    static const sc_lv<64> ap_const_lv64_10;
    static const sc_lv<64> ap_const_lv64_11;
    static const sc_lv<64> ap_const_lv64_12;
    static const sc_lv<64> ap_const_lv64_13;
    static const sc_lv<64> ap_const_lv64_14;
    static const sc_lv<64> ap_const_lv64_15;
    static const sc_lv<64> ap_const_lv64_16;
    static const sc_lv<64> ap_const_lv64_17;
    static const sc_lv<64> ap_const_lv64_18;
    static const sc_lv<64> ap_const_lv64_9;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_F;
    static const sc_lv<8> ap_const_lv8_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_SBUS_data_address0();
    void thread_SBUS_data_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_norm_out_address0();
    void thread_norm_out_ce0();
    void thread_norm_out_d0();
    void thread_norm_out_we0();
    void thread_or_cond_fu_677_p2();
    void thread_tmp_1_fu_672_p2();
    void thread_tmp_2_fu_698_p3();
    void thread_tmp_3_10_fu_602_p1();
    void thread_tmp_3_11_fu_607_p1();
    void thread_tmp_3_12_fu_612_p1();
    void thread_tmp_3_13_fu_617_p1();
    void thread_tmp_3_14_fu_622_p1();
    void thread_tmp_3_15_fu_627_p1();
    void thread_tmp_3_16_fu_632_p1();
    void thread_tmp_3_17_fu_637_p1();
    void thread_tmp_3_18_fu_642_p1();
    void thread_tmp_3_19_fu_647_p1();
    void thread_tmp_3_1_fu_552_p1();
    void thread_tmp_3_20_fu_652_p1();
    void thread_tmp_3_21_fu_657_p1();
    void thread_tmp_3_2_fu_557_p1();
    void thread_tmp_3_3_fu_562_p1();
    void thread_tmp_3_4_fu_567_p1();
    void thread_tmp_3_5_fu_572_p1();
    void thread_tmp_3_6_fu_577_p1();
    void thread_tmp_3_7_fu_582_p1();
    void thread_tmp_3_8_fu_592_p1();
    void thread_tmp_3_9_fu_597_p1();
    void thread_tmp_3_fu_547_p0();
    void thread_tmp_3_fu_547_p1();
    void thread_tmp_3_s_fu_587_p1();
    void thread_tmp_4_fu_709_p2();
    void thread_tmp_5_fu_662_p2();
    void thread_tmp_6_fu_686_p2();
    void thread_tmp_fu_668_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
