-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXI_UART_DRIVER is
generic (
    C_M_AXI_UART_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_UART_ID_WIDTH : INTEGER := 1;
    C_M_AXI_UART_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_UART_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_UART_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_UART_USER_VALUE : INTEGER := 0;
    C_M_AXI_UART_PROT_VALUE : INTEGER := 0;
    C_M_AXI_UART_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_UART_AWVALID : OUT STD_LOGIC;
    m_axi_UART_AWREADY : IN STD_LOGIC;
    m_axi_UART_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_WIDTH-1 downto 0);
    m_axi_UART_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_UART_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_AWUSER_WIDTH-1 downto 0);
    m_axi_UART_WVALID : OUT STD_LOGIC;
    m_axi_UART_WREADY : IN STD_LOGIC;
    m_axi_UART_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_DATA_WIDTH-1 downto 0);
    m_axi_UART_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_DATA_WIDTH/8-1 downto 0);
    m_axi_UART_WLAST : OUT STD_LOGIC;
    m_axi_UART_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_WUSER_WIDTH-1 downto 0);
    m_axi_UART_ARVALID : OUT STD_LOGIC;
    m_axi_UART_ARREADY : IN STD_LOGIC;
    m_axi_UART_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_WIDTH-1 downto 0);
    m_axi_UART_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_UART_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ARUSER_WIDTH-1 downto 0);
    m_axi_UART_RVALID : IN STD_LOGIC;
    m_axi_UART_RREADY : OUT STD_LOGIC;
    m_axi_UART_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_UART_DATA_WIDTH-1 downto 0);
    m_axi_UART_RLAST : IN STD_LOGIC;
    m_axi_UART_RID : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UART_RUSER_WIDTH-1 downto 0);
    m_axi_UART_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_BVALID : IN STD_LOGIC;
    m_axi_UART_BREADY : OUT STD_LOGIC;
    m_axi_UART_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_BID : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UART_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_TEST_AWVALID : IN STD_LOGIC;
    s_axi_TEST_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_WVALID : IN STD_LOGIC;
    s_axi_TEST_WREADY : OUT STD_LOGIC;
    s_axi_TEST_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_ARVALID : IN STD_LOGIC;
    s_axi_TEST_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_RVALID : OUT STD_LOGIC;
    s_axi_TEST_RREADY : IN STD_LOGIC;
    s_axi_TEST_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_BVALID : OUT STD_LOGIC;
    s_axi_TEST_BREADY : IN STD_LOGIC;
    s_axi_TEST_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of AXI_UART_DRIVER is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AXI_UART_DRIVER,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=500025,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=781,HLS_SYN_LUT=1321,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (54 downto 0) := "0000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (54 downto 0) := "0000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (54 downto 0) := "0000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (54 downto 0) := "0000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (54 downto 0) := "0000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (54 downto 0) := "0000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (54 downto 0) := "0001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (54 downto 0) := "0100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (54 downto 0) := "1000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_407 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000111";
    constant ap_const_lv64_400 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_const_lv64_403 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000011";
    constant ap_const_lv64_401 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000001";
    constant ap_const_lv64_402 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000010";
    constant ap_const_lv64_405 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv8_45 : STD_LOGIC_VECTOR (7 downto 0) := "01000101";
    constant ap_const_lv19_7A120 : STD_LOGIC_VECTOR (18 downto 0) := "1111010000100100000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal SBUS_data_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal SBUS_data_ce0 : STD_LOGIC;
    signal SBUS_data_we0 : STD_LOGIC;
    signal SBUS_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal firstSample : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal calibrationSuccess : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal UART_blk_n_AW : STD_LOGIC;
    signal firstSample_load_load_fu_438_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal UART_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal UART_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal UART_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal firstSample_load_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal calibrationSuccess_l_load_fu_484_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_2_fu_495_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal calibrationSuccess_l_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_AWVALID : STD_LOGIC;
    signal UART_AWREADY : STD_LOGIC;
    signal UART_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_WVALID : STD_LOGIC;
    signal UART_WREADY : STD_LOGIC;
    signal UART_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_ARVALID : STD_LOGIC;
    signal UART_ARREADY : STD_LOGIC;
    signal UART_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_RVALID : STD_LOGIC;
    signal UART_RREADY : STD_LOGIC;
    signal UART_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_RLAST : STD_LOGIC;
    signal UART_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal UART_BVALID : STD_LOGIC;
    signal UART_BREADY : STD_LOGIC;
    signal UART_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal UART_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_UART_AWREADY : STD_LOGIC;
    signal ap_block_state1_io : BOOLEAN;
    signal ap_sig_ioackin_UART_WREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_predicate_op140_writeresp_state28 : BOOLEAN;
    signal ap_block_state28 : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal UART_addr_1_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal UART_addr_3_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal temp_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_reg_554 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state22_io : BOOLEAN;
    signal ap_sig_ioackin_UART_ARREADY : STD_LOGIC;
    signal ap_block_state42_io : BOOLEAN;
    signal UART_addr_5_read_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_V_fu_505_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal p_014_0_i_reg_392 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_predicate_op196_writeresp_state54 : BOOLEAN;
    signal ap_block_state54 : BOOLEAN;
    signal tmp_4_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_reg_ioackin_UART_AWREADY : STD_LOGIC := '0';
    signal ap_block_state7_io : BOOLEAN;
    signal ap_reg_ioackin_UART_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_UART_WREADY : STD_LOGIC := '0';
    signal ap_block_state5_io : BOOLEAN;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_condition_764 : BOOLEAN;

    component AXI_UART_DRIVER_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component AXI_UART_DRIVER_TEST_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        SBUS_data_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        SBUS_data_ce0 : IN STD_LOGIC;
        SBUS_data_we0 : IN STD_LOGIC;
        SBUS_data_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AXI_UART_DRIVER_UART_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    AXI_UART_DRIVER_CTRL_s_axi_U : component AXI_UART_DRIVER_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AXI_UART_DRIVER_TEST_s_axi_U : component AXI_UART_DRIVER_TEST_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_AWVALID,
        AWREADY => s_axi_TEST_AWREADY,
        AWADDR => s_axi_TEST_AWADDR,
        WVALID => s_axi_TEST_WVALID,
        WREADY => s_axi_TEST_WREADY,
        WDATA => s_axi_TEST_WDATA,
        WSTRB => s_axi_TEST_WSTRB,
        ARVALID => s_axi_TEST_ARVALID,
        ARREADY => s_axi_TEST_ARREADY,
        ARADDR => s_axi_TEST_ARADDR,
        RVALID => s_axi_TEST_RVALID,
        RREADY => s_axi_TEST_RREADY,
        RDATA => s_axi_TEST_RDATA,
        RRESP => s_axi_TEST_RRESP,
        BVALID => s_axi_TEST_BVALID,
        BREADY => s_axi_TEST_BREADY,
        BRESP => s_axi_TEST_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        SBUS_data_address0 => SBUS_data_address0,
        SBUS_data_ce0 => SBUS_data_ce0,
        SBUS_data_we0 => SBUS_data_we0,
        SBUS_data_d0 => SBUS_data_d0);

    AXI_UART_DRIVER_UART_m_axi_U : component AXI_UART_DRIVER_UART_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_UART_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_UART_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_UART_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_UART_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_UART_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_UART_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_UART_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_UART_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_UART_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_UART_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_UART_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_UART_CACHE_VALUE)
    port map (
        AWVALID => m_axi_UART_AWVALID,
        AWREADY => m_axi_UART_AWREADY,
        AWADDR => m_axi_UART_AWADDR,
        AWID => m_axi_UART_AWID,
        AWLEN => m_axi_UART_AWLEN,
        AWSIZE => m_axi_UART_AWSIZE,
        AWBURST => m_axi_UART_AWBURST,
        AWLOCK => m_axi_UART_AWLOCK,
        AWCACHE => m_axi_UART_AWCACHE,
        AWPROT => m_axi_UART_AWPROT,
        AWQOS => m_axi_UART_AWQOS,
        AWREGION => m_axi_UART_AWREGION,
        AWUSER => m_axi_UART_AWUSER,
        WVALID => m_axi_UART_WVALID,
        WREADY => m_axi_UART_WREADY,
        WDATA => m_axi_UART_WDATA,
        WSTRB => m_axi_UART_WSTRB,
        WLAST => m_axi_UART_WLAST,
        WID => m_axi_UART_WID,
        WUSER => m_axi_UART_WUSER,
        ARVALID => m_axi_UART_ARVALID,
        ARREADY => m_axi_UART_ARREADY,
        ARADDR => m_axi_UART_ARADDR,
        ARID => m_axi_UART_ARID,
        ARLEN => m_axi_UART_ARLEN,
        ARSIZE => m_axi_UART_ARSIZE,
        ARBURST => m_axi_UART_ARBURST,
        ARLOCK => m_axi_UART_ARLOCK,
        ARCACHE => m_axi_UART_ARCACHE,
        ARPROT => m_axi_UART_ARPROT,
        ARQOS => m_axi_UART_ARQOS,
        ARREGION => m_axi_UART_ARREGION,
        ARUSER => m_axi_UART_ARUSER,
        RVALID => m_axi_UART_RVALID,
        RREADY => m_axi_UART_RREADY,
        RDATA => m_axi_UART_RDATA,
        RLAST => m_axi_UART_RLAST,
        RID => m_axi_UART_RID,
        RUSER => m_axi_UART_RUSER,
        RRESP => m_axi_UART_RRESP,
        BVALID => m_axi_UART_BVALID,
        BREADY => m_axi_UART_BREADY,
        BRESP => m_axi_UART_BRESP,
        BID => m_axi_UART_BID,
        BUSER => m_axi_UART_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => UART_ARVALID,
        I_ARREADY => UART_ARREADY,
        I_ARADDR => UART_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => UART_RVALID,
        I_RREADY => UART_RREADY,
        I_RDATA => UART_RDATA,
        I_RID => UART_RID,
        I_RUSER => UART_RUSER,
        I_RRESP => UART_RRESP,
        I_RLAST => UART_RLAST,
        I_AWVALID => UART_AWVALID,
        I_AWREADY => UART_AWREADY,
        I_AWADDR => UART_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => UART_WVALID,
        I_WREADY => UART_WREADY,
        I_WDATA => UART_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => UART_BVALID,
        I_BREADY => UART_BREADY,
        I_BRESP => UART_BRESP,
        I_BID => UART_BID,
        I_BUSER => UART_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_UART_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_UART_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((ap_const_boolean_1 = ap_block_state42_io) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_2_fu_495_p1 = ap_const_lv1_1)) or ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                    ap_reg_ioackin_UART_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_2_fu_495_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                    ap_reg_ioackin_UART_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_UART_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_UART_AWREADY <= ap_const_logic_0;
            else
                if (((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1)) or ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_const_boolean_1 = ap_block_state28_io) or ((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (calibrationSuccess = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state22_io) and (ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state7_io) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_UART_AWREADY <= ap_const_logic_0;
                elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = UART_AWREADY) and (firstSample = ap_const_lv1_1)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state28) and (calibrationSuccess = ap_const_lv1_1)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_UART_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_UART_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_UART_WREADY <= ap_const_logic_0;
            else
                if (((not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_sig_ioackin_UART_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_sig_ioackin_UART_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((ap_const_boolean_1 = ap_block_state7_io) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_UART_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_UART_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    firstSample_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                firstSample <= ap_const_lv1_1;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state28_io) or ((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (firstSample_load_reg_530 = ap_const_lv1_1))) then 
                    firstSample <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    p_014_0_i_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) and (tmp_4_fu_499_p2 = ap_const_lv1_0))) then 
                p_014_0_i_reg_392 <= ctr_V_fu_505_p2;
            elsif ((not(((ap_predicate_op196_writeresp_state54 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                p_014_0_i_reg_392 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                UART_addr_5_read_reg_577 <= UART_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state22_io) and (ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_1))) then
                calibrationSuccess <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state28_io) or ((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                calibrationSuccess_l_reg_563 <= calibrationSuccess;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                firstSample_load_reg_530 <= firstSample;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                temp_reg_554 <= temp_fu_463_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state42_io) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                tmp_2_reg_573 <= tmp_2_fu_495_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state22_io) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                tmp_reg_559 <= tmp_fu_467_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, firstSample, calibrationSuccess, firstSample_load_load_fu_438_p1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state22, tmp_fu_467_p2, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12, calibrationSuccess_l_load_fu_484_p1, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state42, tmp_2_fu_495_p1, ap_CS_fsm_state49, ap_CS_fsm_state35, ap_CS_fsm_state48, ap_CS_fsm_state54, UART_RVALID, UART_BVALID, ap_sig_ioackin_UART_AWREADY, ap_block_state1_io, ap_sig_ioackin_UART_WREADY, ap_block_state3_io, ap_predicate_op140_writeresp_state28, ap_block_state28_io, ap_block_state2_io, ap_block_state4_io, ap_block_state6_io, ap_block_state22_io, ap_sig_ioackin_UART_ARREADY, ap_block_state42_io, ap_CS_fsm_state55, ap_predicate_op196_writeresp_state54, tmp_4_fu_499_p2, ap_block_state7_io, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample_load_load_fu_438_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((ap_const_boolean_1 = ap_block_state7_io) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_boolean_0 = ap_block_state22_io) and (ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((ap_const_boolean_0 = ap_block_state22_io) and (ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_sig_ioackin_UART_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if ((not(((ap_const_boolean_1 = ap_block_state28_io) or ((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (calibrationSuccess_l_load_fu_484_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                elsif ((not(((ap_const_boolean_1 = ap_block_state28_io) or ((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (calibrationSuccess = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_sig_ioackin_UART_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if ((not(((ap_const_boolean_1 = ap_block_state42_io) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_2_fu_495_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                elsif ((not(((ap_const_boolean_1 = ap_block_state42_io) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_2_fu_495_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_sig_ioackin_UART_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if ((not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if ((not(((ap_predicate_op196_writeresp_state54 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (tmp_4_fu_499_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SBUS_data_address0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            SBUS_data_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            SBUS_data_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SBUS_data_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            SBUS_data_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SBUS_data_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            SBUS_data_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            SBUS_data_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            SBUS_data_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        else 
            SBUS_data_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    SBUS_data_ce0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state35, UART_RVALID, ap_sig_ioackin_UART_ARREADY, ap_block_state42_io, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((ap_const_boolean_1 = ap_block_state42_io) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            SBUS_data_ce0 <= ap_const_logic_1;
        else 
            SBUS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SBUS_data_d0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state35, UART_addr_5_read_reg_577, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            SBUS_data_d0 <= UART_addr_5_read_reg_577;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            SBUS_data_d0 <= ap_const_lv32_88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            SBUS_data_d0 <= ap_const_lv32_77;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SBUS_data_d0 <= ap_const_lv32_66;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            SBUS_data_d0 <= ap_const_lv32_55;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SBUS_data_d0 <= ap_const_lv32_44;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            SBUS_data_d0 <= ap_const_lv32_33;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            SBUS_data_d0 <= ap_const_lv32_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            SBUS_data_d0 <= ap_const_lv32_11;
        else 
            SBUS_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SBUS_data_we0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state35, UART_RVALID, ap_sig_ioackin_UART_ARREADY, ap_block_state42_io, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((ap_const_boolean_1 = ap_block_state42_io) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            SBUS_data_we0 <= ap_const_logic_1;
        else 
            SBUS_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UART_ARADDR_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state35, ap_reg_ioackin_UART_ARREADY, ap_condition_764)
    begin
        if ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                UART_ARADDR <= ap_const_lv64_405(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_764)) then 
                UART_ARADDR <= ap_const_lv64_400(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                UART_ARADDR <= ap_const_lv64_407(32 - 1 downto 0);
            else 
                UART_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            UART_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UART_ARVALID_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state42, tmp_2_fu_495_p1, ap_CS_fsm_state35, UART_RVALID, ap_reg_ioackin_UART_ARREADY)
    begin
        if ((((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_2_fu_495_p1 = ap_const_lv1_1)) or ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            UART_ARVALID <= ap_const_logic_1;
        else 
            UART_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    UART_AWADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, firstSample, calibrationSuccess, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state22, tmp_fu_467_p2, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state48, UART_BVALID, reg_419, ap_predicate_op140_writeresp_state28, UART_addr_1_reg_534, UART_addr_3_reg_541, ap_reg_ioackin_UART_AWREADY)
    begin
        if (((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            UART_AWADDR <= ap_const_lv64_402(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            UART_AWADDR <= UART_addr_3_reg_541;
        elsif (((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            UART_AWADDR <= ap_const_lv64_401(32 - 1 downto 0);
        elsif ((((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID))) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28) and (calibrationSuccess = ap_const_lv1_1)))) then 
            UART_AWADDR <= ap_const_lv64_400(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            UART_AWADDR <= UART_addr_1_reg_534;
        elsif (((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            UART_AWADDR <= ap_const_lv64_403(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_1))) then 
            UART_AWADDR <= reg_419;
        elsif ((((ap_start = ap_const_logic_1) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            UART_AWADDR <= ap_const_lv64_407(32 - 1 downto 0);
        else 
            UART_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UART_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, firstSample, calibrationSuccess, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state22, tmp_fu_467_p2, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state48, UART_BVALID, ap_predicate_op140_writeresp_state28, ap_reg_ioackin_UART_AWREADY)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID))) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28) and (calibrationSuccess = ap_const_lv1_1)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            UART_AWVALID <= ap_const_logic_1;
        else 
            UART_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    UART_BREADY_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state54, UART_BVALID, ap_sig_ioackin_UART_WREADY, ap_predicate_op140_writeresp_state28, ap_block_state28_io, ap_predicate_op196_writeresp_state54, ap_block_state7_io)
    begin
        if (((not(((ap_predicate_op196_writeresp_state54 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID))) and (ap_predicate_op196_writeresp_state54 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_boolean_1 = ap_block_state28_io) or ((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID)))) and (ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state7_io) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            UART_BREADY <= ap_const_logic_1;
        else 
            UART_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    UART_RREADY_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state49, UART_RVALID, ap_sig_ioackin_UART_WREADY, ap_block_state42_io)
    begin
        if (((not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state49)) or (not(((ap_const_boolean_1 = ap_block_state42_io) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            UART_RREADY <= ap_const_logic_1;
        else 
            UART_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    UART_WDATA_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state49, UART_RVALID, UART_BVALID, ap_reg_ioackin_UART_WREADY)
    begin
        if ((((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            UART_WDATA <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            UART_WDATA <= ap_const_lv32_1F;
        elsif ((((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            UART_WDATA <= ap_const_lv32_0;
        elsif (((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            UART_WDATA <= ap_const_lv32_3F;
        elsif (((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            UART_WDATA <= ap_const_lv32_80;
        elsif ((((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            UART_WDATA <= ap_const_lv32_45;
        else 
            UART_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UART_WVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state49, UART_RVALID, UART_BVALID, ap_reg_ioackin_UART_WREADY)
    begin
        if ((((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            UART_WVALID <= ap_const_logic_1;
        else 
            UART_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    UART_addr_1_reg_534 <= ap_const_lv64_403(32 - 1 downto 0);
    UART_addr_3_reg_541 <= ap_const_lv64_401(32 - 1 downto 0);

    UART_blk_n_AR_assign_proc : process(m_axi_UART_ARREADY, ap_CS_fsm_state14, ap_CS_fsm_state42, tmp_2_fu_495_p1, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_2_fu_495_p1 = ap_const_lv1_1)))) then 
            UART_blk_n_AR <= m_axi_UART_ARREADY;
        else 
            UART_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_UART_AWREADY, firstSample, calibrationSuccess, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state22, tmp_fu_467_p2, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (calibrationSuccess = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_fu_467_p2 = ap_const_lv1_1)))) then 
            UART_blk_n_AW <= m_axi_UART_AWREADY;
        else 
            UART_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_B_assign_proc : process(m_axi_UART_BVALID, ap_CS_fsm_state7, ap_CS_fsm_state28, firstSample_load_reg_530, tmp_reg_559, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state54, calibrationSuccess_l_reg_563, tmp_2_reg_573)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (tmp_2_reg_573 = ap_const_lv1_1) and (calibrationSuccess_l_reg_563 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (tmp_reg_559 = ap_const_lv1_1) and (firstSample_load_reg_530 = ap_const_lv1_1)))) then 
            UART_blk_n_B <= m_axi_UART_BVALID;
        else 
            UART_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_R_assign_proc : process(m_axi_UART_RVALID, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            UART_blk_n_R <= m_axi_UART_RVALID;
        else 
            UART_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_W_assign_proc : process(m_axi_UART_WREADY, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            UART_blk_n_W <= m_axi_UART_WREADY;
        else 
            UART_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_io_assign_proc : process(firstSample, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state1_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) and (firstSample = ap_const_lv1_1));
    end process;


    ap_block_state22_io_assign_proc : process(tmp_fu_467_p2, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state22_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) and (tmp_fu_467_p2 = ap_const_lv1_1));
    end process;


    ap_block_state28_assign_proc : process(UART_BVALID, ap_predicate_op140_writeresp_state28)
    begin
                ap_block_state28 <= ((ap_predicate_op140_writeresp_state28 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID));
    end process;


    ap_block_state28_io_assign_proc : process(calibrationSuccess, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state28_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) and (calibrationSuccess = ap_const_lv1_1));
    end process;


    ap_block_state2_io_assign_proc : process(ap_sig_ioackin_UART_AWREADY, ap_sig_ioackin_UART_WREADY)
    begin
                ap_block_state2_io <= ((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_UART_AWREADY, ap_sig_ioackin_UART_WREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state42_io_assign_proc : process(tmp_2_fu_495_p1, ap_sig_ioackin_UART_ARREADY)
    begin
                ap_block_state42_io <= ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_0) and (tmp_2_fu_495_p1 = ap_const_lv1_1));
    end process;


    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_UART_AWREADY, ap_sig_ioackin_UART_WREADY)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state54_assign_proc : process(UART_BVALID, ap_predicate_op196_writeresp_state54)
    begin
                ap_block_state54 <= ((ap_predicate_op196_writeresp_state54 = ap_const_boolean_1) and (ap_const_logic_0 = UART_BVALID));
    end process;


    ap_block_state5_io_assign_proc : process(ap_sig_ioackin_UART_AWREADY, ap_sig_ioackin_UART_WREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(ap_sig_ioackin_UART_AWREADY, ap_sig_ioackin_UART_WREADY)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(ap_sig_ioackin_UART_AWREADY, ap_sig_ioackin_UART_WREADY)
    begin
                ap_block_state7_io <= ((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_condition_764_assign_proc : process(ap_CS_fsm_state42, tmp_2_fu_495_p1, UART_RVALID)
    begin
                ap_condition_764 <= ((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_2_fu_495_p1 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state55, tmp_4_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (tmp_4_fu_499_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op140_writeresp_state28_assign_proc : process(firstSample_load_reg_530, tmp_reg_559)
    begin
                ap_predicate_op140_writeresp_state28 <= ((tmp_reg_559 = ap_const_lv1_1) and (firstSample_load_reg_530 = ap_const_lv1_1));
    end process;


    ap_predicate_op196_writeresp_state54_assign_proc : process(calibrationSuccess_l_reg_563, tmp_2_reg_573)
    begin
                ap_predicate_op196_writeresp_state54 <= ((tmp_2_reg_573 = ap_const_lv1_1) and (calibrationSuccess_l_reg_563 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55, tmp_4_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (tmp_4_fu_499_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_UART_ARREADY_assign_proc : process(UART_ARREADY, ap_reg_ioackin_UART_ARREADY)
    begin
        if ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_UART_ARREADY <= UART_ARREADY;
        else 
            ap_sig_ioackin_UART_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_UART_AWREADY_assign_proc : process(UART_AWREADY, ap_reg_ioackin_UART_AWREADY)
    begin
        if ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_UART_AWREADY <= UART_AWREADY;
        else 
            ap_sig_ioackin_UART_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_UART_WREADY_assign_proc : process(UART_WREADY, ap_reg_ioackin_UART_WREADY)
    begin
        if ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_UART_WREADY <= UART_WREADY;
        else 
            ap_sig_ioackin_UART_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    calibrationSuccess_l_load_fu_484_p1 <= calibrationSuccess;
    ctr_V_fu_505_p2 <= std_logic_vector(unsigned(p_014_0_i_reg_392) + unsigned(ap_const_lv19_1));
    firstSample_load_load_fu_438_p1 <= firstSample;
    reg_419 <= ap_const_lv64_407(32 - 1 downto 0);
    temp_fu_463_p1 <= UART_RDATA(8 - 1 downto 0);
    tmp_2_fu_495_p1 <= UART_RDATA(1 - 1 downto 0);
    tmp_4_fu_499_p2 <= "1" when (p_014_0_i_reg_392 = ap_const_lv19_7A120) else "0";
    tmp_fu_467_p2 <= "1" when (temp_reg_554 = ap_const_lv8_45) else "0";
end behav;
