// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXI_UART_DRIVER.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXI_UART_DRIVER::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXI_UART_DRIVER::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state1 = "1";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state2 = "10";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state3 = "100";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state4 = "1000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state5 = "10000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state6 = "100000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state7 = "1000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state8 = "10000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state9 = "100000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state10 = "1000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state11 = "10000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state12 = "100000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<55> AXI_UART_DRIVER::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AXI_UART_DRIVER::ap_const_boolean_1 = true;
const sc_lv<1> AXI_UART_DRIVER::ap_const_lv1_1 = "1";
const sc_lv<1> AXI_UART_DRIVER::ap_const_lv1_0 = "0";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_1 = "1";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_6 = "110";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_D = "1101";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_14 = "10100";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_15 = "10101";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_16 = "10110";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_1B = "11011";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_2 = "10";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_7 = "111";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_4 = "100";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_5 = "101";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_A = "1010";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_3 = "11";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_8 = "1000";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_9 = "1001";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_C = "1100";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_B = "1011";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_1C = "11100";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_21 = "100001";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_29 = "101001";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_30 = "110000";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_22 = "100010";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_2F = "101111";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_35 = "110101";
const int AXI_UART_DRIVER::C_S_AXI_DATA_WIDTH = "100000";
const int AXI_UART_DRIVER::C_M_AXI_UART_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int AXI_UART_DRIVER::C_M_AXI_UART_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int AXI_UART_DRIVER::C_M_AXI_UART_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int AXI_UART_DRIVER::C_M_AXI_UART_CACHE_VALUE = "11";
const int AXI_UART_DRIVER::C_M_AXI_DATA_WIDTH = "100000";
const bool AXI_UART_DRIVER::ap_const_boolean_0 = false;
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_36 = "110110";
const sc_lv<19> AXI_UART_DRIVER::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_1 = "1";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_23 = "100011";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_2 = "10";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_24 = "100100";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_3 = "11";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_25 = "100101";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_4 = "100";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_26 = "100110";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_5 = "101";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_27 = "100111";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_6 = "110";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_28 = "101000";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_7 = "111";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_407 = "10000000111";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_400 = "10000000000";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_403 = "10000000011";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_401 = "10000000001";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_402 = "10000000010";
const sc_lv<64> AXI_UART_DRIVER::ap_const_lv64_405 = "10000000101";
const sc_lv<3> AXI_UART_DRIVER::ap_const_lv3_0 = "000";
const sc_lv<2> AXI_UART_DRIVER::ap_const_lv2_0 = "00";
const sc_lv<4> AXI_UART_DRIVER::ap_const_lv4_0 = "0000";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_45 = "1000101";
const sc_lv<4> AXI_UART_DRIVER::ap_const_lv4_F = "1111";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_80 = "10000000";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_3F = "111111";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_1F = "11111";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_11 = "10001";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_33 = "110011";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_44 = "1000100";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_55 = "1010101";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_66 = "1100110";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_77 = "1110111";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_88 = "10001000";
const sc_lv<32> AXI_UART_DRIVER::ap_const_lv32_31 = "110001";
const sc_lv<8> AXI_UART_DRIVER::ap_const_lv8_45 = "1000101";
const sc_lv<19> AXI_UART_DRIVER::ap_const_lv19_7A120 = "1111010000100100000";
const sc_lv<19> AXI_UART_DRIVER::ap_const_lv19_1 = "1";

AXI_UART_DRIVER::AXI_UART_DRIVER(sc_module_name name) : sc_module(name), mVcdFile(0) {
    AXI_UART_DRIVER_CTRL_s_axi_U = new AXI_UART_DRIVER_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("AXI_UART_DRIVER_CTRL_s_axi_U");
    AXI_UART_DRIVER_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    AXI_UART_DRIVER_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    AXI_UART_DRIVER_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    AXI_UART_DRIVER_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    AXI_UART_DRIVER_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    AXI_UART_DRIVER_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    AXI_UART_DRIVER_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    AXI_UART_DRIVER_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    AXI_UART_DRIVER_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    AXI_UART_DRIVER_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    AXI_UART_DRIVER_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    AXI_UART_DRIVER_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    AXI_UART_DRIVER_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    AXI_UART_DRIVER_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    AXI_UART_DRIVER_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    AXI_UART_DRIVER_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    AXI_UART_DRIVER_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    AXI_UART_DRIVER_CTRL_s_axi_U->ACLK(ap_clk);
    AXI_UART_DRIVER_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    AXI_UART_DRIVER_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    AXI_UART_DRIVER_CTRL_s_axi_U->ap_start(ap_start);
    AXI_UART_DRIVER_CTRL_s_axi_U->interrupt(interrupt);
    AXI_UART_DRIVER_CTRL_s_axi_U->ap_ready(ap_ready);
    AXI_UART_DRIVER_CTRL_s_axi_U->ap_done(ap_done);
    AXI_UART_DRIVER_CTRL_s_axi_U->ap_idle(ap_idle);
    AXI_UART_DRIVER_TEST_s_axi_U = new AXI_UART_DRIVER_TEST_s_axi<C_S_AXI_TEST_ADDR_WIDTH,C_S_AXI_TEST_DATA_WIDTH>("AXI_UART_DRIVER_TEST_s_axi_U");
    AXI_UART_DRIVER_TEST_s_axi_U->AWVALID(s_axi_TEST_AWVALID);
    AXI_UART_DRIVER_TEST_s_axi_U->AWREADY(s_axi_TEST_AWREADY);
    AXI_UART_DRIVER_TEST_s_axi_U->AWADDR(s_axi_TEST_AWADDR);
    AXI_UART_DRIVER_TEST_s_axi_U->WVALID(s_axi_TEST_WVALID);
    AXI_UART_DRIVER_TEST_s_axi_U->WREADY(s_axi_TEST_WREADY);
    AXI_UART_DRIVER_TEST_s_axi_U->WDATA(s_axi_TEST_WDATA);
    AXI_UART_DRIVER_TEST_s_axi_U->WSTRB(s_axi_TEST_WSTRB);
    AXI_UART_DRIVER_TEST_s_axi_U->ARVALID(s_axi_TEST_ARVALID);
    AXI_UART_DRIVER_TEST_s_axi_U->ARREADY(s_axi_TEST_ARREADY);
    AXI_UART_DRIVER_TEST_s_axi_U->ARADDR(s_axi_TEST_ARADDR);
    AXI_UART_DRIVER_TEST_s_axi_U->RVALID(s_axi_TEST_RVALID);
    AXI_UART_DRIVER_TEST_s_axi_U->RREADY(s_axi_TEST_RREADY);
    AXI_UART_DRIVER_TEST_s_axi_U->RDATA(s_axi_TEST_RDATA);
    AXI_UART_DRIVER_TEST_s_axi_U->RRESP(s_axi_TEST_RRESP);
    AXI_UART_DRIVER_TEST_s_axi_U->BVALID(s_axi_TEST_BVALID);
    AXI_UART_DRIVER_TEST_s_axi_U->BREADY(s_axi_TEST_BREADY);
    AXI_UART_DRIVER_TEST_s_axi_U->BRESP(s_axi_TEST_BRESP);
    AXI_UART_DRIVER_TEST_s_axi_U->ACLK(ap_clk);
    AXI_UART_DRIVER_TEST_s_axi_U->ARESET(ap_rst_n_inv);
    AXI_UART_DRIVER_TEST_s_axi_U->ACLK_EN(ap_var_for_const0);
    AXI_UART_DRIVER_TEST_s_axi_U->SBUS_data_address0(SBUS_data_address0);
    AXI_UART_DRIVER_TEST_s_axi_U->SBUS_data_ce0(SBUS_data_ce0);
    AXI_UART_DRIVER_TEST_s_axi_U->SBUS_data_we0(SBUS_data_we0);
    AXI_UART_DRIVER_TEST_s_axi_U->SBUS_data_d0(SBUS_data_d0);
    AXI_UART_DRIVER_UART_m_axi_U = new AXI_UART_DRIVER_UART_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_UART_ID_WIDTH,C_M_AXI_UART_ADDR_WIDTH,C_M_AXI_UART_DATA_WIDTH,C_M_AXI_UART_AWUSER_WIDTH,C_M_AXI_UART_ARUSER_WIDTH,C_M_AXI_UART_WUSER_WIDTH,C_M_AXI_UART_RUSER_WIDTH,C_M_AXI_UART_BUSER_WIDTH,C_M_AXI_UART_TARGET_ADDR,C_M_AXI_UART_USER_VALUE,C_M_AXI_UART_PROT_VALUE,C_M_AXI_UART_CACHE_VALUE>("AXI_UART_DRIVER_UART_m_axi_U");
    AXI_UART_DRIVER_UART_m_axi_U->AWVALID(m_axi_UART_AWVALID);
    AXI_UART_DRIVER_UART_m_axi_U->AWREADY(m_axi_UART_AWREADY);
    AXI_UART_DRIVER_UART_m_axi_U->AWADDR(m_axi_UART_AWADDR);
    AXI_UART_DRIVER_UART_m_axi_U->AWID(m_axi_UART_AWID);
    AXI_UART_DRIVER_UART_m_axi_U->AWLEN(m_axi_UART_AWLEN);
    AXI_UART_DRIVER_UART_m_axi_U->AWSIZE(m_axi_UART_AWSIZE);
    AXI_UART_DRIVER_UART_m_axi_U->AWBURST(m_axi_UART_AWBURST);
    AXI_UART_DRIVER_UART_m_axi_U->AWLOCK(m_axi_UART_AWLOCK);
    AXI_UART_DRIVER_UART_m_axi_U->AWCACHE(m_axi_UART_AWCACHE);
    AXI_UART_DRIVER_UART_m_axi_U->AWPROT(m_axi_UART_AWPROT);
    AXI_UART_DRIVER_UART_m_axi_U->AWQOS(m_axi_UART_AWQOS);
    AXI_UART_DRIVER_UART_m_axi_U->AWREGION(m_axi_UART_AWREGION);
    AXI_UART_DRIVER_UART_m_axi_U->AWUSER(m_axi_UART_AWUSER);
    AXI_UART_DRIVER_UART_m_axi_U->WVALID(m_axi_UART_WVALID);
    AXI_UART_DRIVER_UART_m_axi_U->WREADY(m_axi_UART_WREADY);
    AXI_UART_DRIVER_UART_m_axi_U->WDATA(m_axi_UART_WDATA);
    AXI_UART_DRIVER_UART_m_axi_U->WSTRB(m_axi_UART_WSTRB);
    AXI_UART_DRIVER_UART_m_axi_U->WLAST(m_axi_UART_WLAST);
    AXI_UART_DRIVER_UART_m_axi_U->WID(m_axi_UART_WID);
    AXI_UART_DRIVER_UART_m_axi_U->WUSER(m_axi_UART_WUSER);
    AXI_UART_DRIVER_UART_m_axi_U->ARVALID(m_axi_UART_ARVALID);
    AXI_UART_DRIVER_UART_m_axi_U->ARREADY(m_axi_UART_ARREADY);
    AXI_UART_DRIVER_UART_m_axi_U->ARADDR(m_axi_UART_ARADDR);
    AXI_UART_DRIVER_UART_m_axi_U->ARID(m_axi_UART_ARID);
    AXI_UART_DRIVER_UART_m_axi_U->ARLEN(m_axi_UART_ARLEN);
    AXI_UART_DRIVER_UART_m_axi_U->ARSIZE(m_axi_UART_ARSIZE);
    AXI_UART_DRIVER_UART_m_axi_U->ARBURST(m_axi_UART_ARBURST);
    AXI_UART_DRIVER_UART_m_axi_U->ARLOCK(m_axi_UART_ARLOCK);
    AXI_UART_DRIVER_UART_m_axi_U->ARCACHE(m_axi_UART_ARCACHE);
    AXI_UART_DRIVER_UART_m_axi_U->ARPROT(m_axi_UART_ARPROT);
    AXI_UART_DRIVER_UART_m_axi_U->ARQOS(m_axi_UART_ARQOS);
    AXI_UART_DRIVER_UART_m_axi_U->ARREGION(m_axi_UART_ARREGION);
    AXI_UART_DRIVER_UART_m_axi_U->ARUSER(m_axi_UART_ARUSER);
    AXI_UART_DRIVER_UART_m_axi_U->RVALID(m_axi_UART_RVALID);
    AXI_UART_DRIVER_UART_m_axi_U->RREADY(m_axi_UART_RREADY);
    AXI_UART_DRIVER_UART_m_axi_U->RDATA(m_axi_UART_RDATA);
    AXI_UART_DRIVER_UART_m_axi_U->RLAST(m_axi_UART_RLAST);
    AXI_UART_DRIVER_UART_m_axi_U->RID(m_axi_UART_RID);
    AXI_UART_DRIVER_UART_m_axi_U->RUSER(m_axi_UART_RUSER);
    AXI_UART_DRIVER_UART_m_axi_U->RRESP(m_axi_UART_RRESP);
    AXI_UART_DRIVER_UART_m_axi_U->BVALID(m_axi_UART_BVALID);
    AXI_UART_DRIVER_UART_m_axi_U->BREADY(m_axi_UART_BREADY);
    AXI_UART_DRIVER_UART_m_axi_U->BRESP(m_axi_UART_BRESP);
    AXI_UART_DRIVER_UART_m_axi_U->BID(m_axi_UART_BID);
    AXI_UART_DRIVER_UART_m_axi_U->BUSER(m_axi_UART_BUSER);
    AXI_UART_DRIVER_UART_m_axi_U->ACLK(ap_clk);
    AXI_UART_DRIVER_UART_m_axi_U->ARESET(ap_rst_n_inv);
    AXI_UART_DRIVER_UART_m_axi_U->ACLK_EN(ap_var_for_const0);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARVALID(UART_ARVALID);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARREADY(UART_ARREADY);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARADDR(UART_ARADDR);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARID(ap_var_for_const1);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARLEN(ap_var_for_const2);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARSIZE(ap_var_for_const3);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARLOCK(ap_var_for_const4);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARCACHE(ap_var_for_const5);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARQOS(ap_var_for_const5);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARPROT(ap_var_for_const3);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARUSER(ap_var_for_const1);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARBURST(ap_var_for_const4);
    AXI_UART_DRIVER_UART_m_axi_U->I_ARREGION(ap_var_for_const5);
    AXI_UART_DRIVER_UART_m_axi_U->I_RVALID(UART_RVALID);
    AXI_UART_DRIVER_UART_m_axi_U->I_RREADY(UART_RREADY);
    AXI_UART_DRIVER_UART_m_axi_U->I_RDATA(UART_RDATA);
    AXI_UART_DRIVER_UART_m_axi_U->I_RID(UART_RID);
    AXI_UART_DRIVER_UART_m_axi_U->I_RUSER(UART_RUSER);
    AXI_UART_DRIVER_UART_m_axi_U->I_RRESP(UART_RRESP);
    AXI_UART_DRIVER_UART_m_axi_U->I_RLAST(UART_RLAST);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWVALID(UART_AWVALID);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWREADY(UART_AWREADY);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWADDR(UART_AWADDR);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWID(ap_var_for_const1);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWLEN(ap_var_for_const2);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWSIZE(ap_var_for_const3);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWLOCK(ap_var_for_const4);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWCACHE(ap_var_for_const5);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWQOS(ap_var_for_const5);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWPROT(ap_var_for_const3);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWUSER(ap_var_for_const1);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWBURST(ap_var_for_const4);
    AXI_UART_DRIVER_UART_m_axi_U->I_AWREGION(ap_var_for_const5);
    AXI_UART_DRIVER_UART_m_axi_U->I_WVALID(UART_WVALID);
    AXI_UART_DRIVER_UART_m_axi_U->I_WREADY(UART_WREADY);
    AXI_UART_DRIVER_UART_m_axi_U->I_WDATA(UART_WDATA);
    AXI_UART_DRIVER_UART_m_axi_U->I_WID(ap_var_for_const1);
    AXI_UART_DRIVER_UART_m_axi_U->I_WUSER(ap_var_for_const1);
    AXI_UART_DRIVER_UART_m_axi_U->I_WLAST(ap_var_for_const6);
    AXI_UART_DRIVER_UART_m_axi_U->I_WSTRB(ap_var_for_const7);
    AXI_UART_DRIVER_UART_m_axi_U->I_BVALID(UART_BVALID);
    AXI_UART_DRIVER_UART_m_axi_U->I_BREADY(UART_BREADY);
    AXI_UART_DRIVER_UART_m_axi_U->I_BRESP(UART_BRESP);
    AXI_UART_DRIVER_UART_m_axi_U->I_BID(UART_BID);
    AXI_UART_DRIVER_UART_m_axi_U->I_BUSER(UART_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_SBUS_data_address0);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_SBUS_data_ce0);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( UART_RVALID );
    sensitive << ( ap_sig_ioackin_UART_ARREADY );
    sensitive << ( ap_block_state42_io );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_SBUS_data_d0);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( UART_addr_5_read_reg_577 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_SBUS_data_we0);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( UART_RVALID );
    sensitive << ( ap_sig_ioackin_UART_ARREADY );
    sensitive << ( ap_block_state42_io );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_UART_ARADDR);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_reg_ioackin_UART_ARREADY );
    sensitive << ( ap_condition_764 );

    SC_METHOD(thread_UART_ARVALID);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_2_fu_495_p1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( UART_RVALID );
    sensitive << ( ap_reg_ioackin_UART_ARREADY );

    SC_METHOD(thread_UART_AWADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( calibrationSuccess );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_fu_467_p2 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( UART_BVALID );
    sensitive << ( reg_419 );
    sensitive << ( ap_predicate_op140_writeresp_state28 );
    sensitive << ( UART_addr_1_reg_534 );
    sensitive << ( UART_addr_3_reg_541 );
    sensitive << ( ap_reg_ioackin_UART_AWREADY );

    SC_METHOD(thread_UART_AWVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( calibrationSuccess );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_fu_467_p2 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( UART_BVALID );
    sensitive << ( ap_predicate_op140_writeresp_state28 );
    sensitive << ( ap_reg_ioackin_UART_AWREADY );

    SC_METHOD(thread_UART_BREADY);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( UART_BVALID );
    sensitive << ( ap_sig_ioackin_UART_WREADY );
    sensitive << ( ap_predicate_op140_writeresp_state28 );
    sensitive << ( ap_block_state28_io );
    sensitive << ( ap_predicate_op196_writeresp_state54 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_UART_RREADY);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( UART_RVALID );
    sensitive << ( ap_sig_ioackin_UART_WREADY );
    sensitive << ( ap_block_state42_io );

    SC_METHOD(thread_UART_WDATA);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( UART_RVALID );
    sensitive << ( UART_BVALID );
    sensitive << ( ap_reg_ioackin_UART_WREADY );

    SC_METHOD(thread_UART_WVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( UART_RVALID );
    sensitive << ( UART_BVALID );
    sensitive << ( ap_reg_ioackin_UART_WREADY );

    SC_METHOD(thread_UART_addr_1_reg_534);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_UART_addr_3_reg_541);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_UART_blk_n_AR);
    sensitive << ( m_axi_UART_ARREADY );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_2_fu_495_p1 );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_UART_blk_n_AW);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_UART_AWREADY );
    sensitive << ( firstSample );
    sensitive << ( calibrationSuccess );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_fu_467_p2 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state48 );

    SC_METHOD(thread_UART_blk_n_B);
    sensitive << ( m_axi_UART_BVALID );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( firstSample_load_reg_530 );
    sensitive << ( tmp_reg_559 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( calibrationSuccess_l_reg_563 );
    sensitive << ( tmp_2_reg_573 );

    SC_METHOD(thread_UART_blk_n_R);
    sensitive << ( m_axi_UART_RVALID );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_UART_blk_n_W);
    sensitive << ( m_axi_UART_WREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( firstSample );
    sensitive << ( ap_sig_ioackin_UART_AWREADY );

    SC_METHOD(thread_ap_block_state22_io);
    sensitive << ( tmp_fu_467_p2 );
    sensitive << ( ap_sig_ioackin_UART_AWREADY );

    SC_METHOD(thread_ap_block_state28);
    sensitive << ( UART_BVALID );
    sensitive << ( ap_predicate_op140_writeresp_state28 );

    SC_METHOD(thread_ap_block_state28_io);
    sensitive << ( calibrationSuccess );
    sensitive << ( ap_sig_ioackin_UART_AWREADY );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_UART_WREADY );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_UART_WREADY );

    SC_METHOD(thread_ap_block_state42_io);
    sensitive << ( tmp_2_fu_495_p1 );
    sensitive << ( ap_sig_ioackin_UART_ARREADY );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_UART_WREADY );

    SC_METHOD(thread_ap_block_state54);
    sensitive << ( UART_BVALID );
    sensitive << ( ap_predicate_op196_writeresp_state54 );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_UART_WREADY );

    SC_METHOD(thread_ap_block_state6_io);
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_UART_WREADY );

    SC_METHOD(thread_ap_block_state7_io);
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_UART_WREADY );

    SC_METHOD(thread_ap_condition_764);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_2_fu_495_p1 );
    sensitive << ( UART_RVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( tmp_4_fu_499_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op140_writeresp_state28);
    sensitive << ( firstSample_load_reg_530 );
    sensitive << ( tmp_reg_559 );

    SC_METHOD(thread_ap_predicate_op196_writeresp_state54);
    sensitive << ( calibrationSuccess_l_reg_563 );
    sensitive << ( tmp_2_reg_573 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( tmp_4_fu_499_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_UART_ARREADY);
    sensitive << ( UART_ARREADY );
    sensitive << ( ap_reg_ioackin_UART_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_UART_AWREADY);
    sensitive << ( UART_AWREADY );
    sensitive << ( ap_reg_ioackin_UART_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_UART_WREADY);
    sensitive << ( UART_WREADY );
    sensitive << ( ap_reg_ioackin_UART_WREADY );

    SC_METHOD(thread_calibrationSuccess_l_load_fu_484_p1);
    sensitive << ( calibrationSuccess );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_ctr_V_fu_505_p2);
    sensitive << ( p_014_0_i_reg_392 );

    SC_METHOD(thread_firstSample_load_load_fu_438_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );

    SC_METHOD(thread_reg_419);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_temp_fu_463_p1);
    sensitive << ( UART_RDATA );

    SC_METHOD(thread_tmp_2_fu_495_p1);
    sensitive << ( UART_RDATA );

    SC_METHOD(thread_tmp_4_fu_499_p2);
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( p_014_0_i_reg_392 );

    SC_METHOD(thread_tmp_fu_467_p2);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( temp_reg_554 );
    sensitive << ( ap_block_state22_io );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( calibrationSuccess );
    sensitive << ( firstSample_load_load_fu_438_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_fu_467_p2 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( calibrationSuccess_l_load_fu_484_p1 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_2_fu_495_p1 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( UART_RVALID );
    sensitive << ( UART_BVALID );
    sensitive << ( ap_sig_ioackin_UART_AWREADY );
    sensitive << ( ap_block_state1_io );
    sensitive << ( ap_sig_ioackin_UART_WREADY );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_predicate_op140_writeresp_state28 );
    sensitive << ( ap_block_state28_io );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state22_io );
    sensitive << ( ap_sig_ioackin_UART_ARREADY );
    sensitive << ( ap_block_state42_io );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_predicate_op196_writeresp_state54 );
    sensitive << ( tmp_4_fu_499_p2 );
    sensitive << ( ap_block_state7_io );
    sensitive << ( ap_block_state5_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000001";
    firstSample = "1";
    calibrationSuccess = "0";
    ap_reg_ioackin_UART_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_UART_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_UART_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXI_UART_DRIVER_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_UART_AWVALID, "(port)m_axi_UART_AWVALID");
    sc_trace(mVcdFile, m_axi_UART_AWREADY, "(port)m_axi_UART_AWREADY");
    sc_trace(mVcdFile, m_axi_UART_AWADDR, "(port)m_axi_UART_AWADDR");
    sc_trace(mVcdFile, m_axi_UART_AWID, "(port)m_axi_UART_AWID");
    sc_trace(mVcdFile, m_axi_UART_AWLEN, "(port)m_axi_UART_AWLEN");
    sc_trace(mVcdFile, m_axi_UART_AWSIZE, "(port)m_axi_UART_AWSIZE");
    sc_trace(mVcdFile, m_axi_UART_AWBURST, "(port)m_axi_UART_AWBURST");
    sc_trace(mVcdFile, m_axi_UART_AWLOCK, "(port)m_axi_UART_AWLOCK");
    sc_trace(mVcdFile, m_axi_UART_AWCACHE, "(port)m_axi_UART_AWCACHE");
    sc_trace(mVcdFile, m_axi_UART_AWPROT, "(port)m_axi_UART_AWPROT");
    sc_trace(mVcdFile, m_axi_UART_AWQOS, "(port)m_axi_UART_AWQOS");
    sc_trace(mVcdFile, m_axi_UART_AWREGION, "(port)m_axi_UART_AWREGION");
    sc_trace(mVcdFile, m_axi_UART_AWUSER, "(port)m_axi_UART_AWUSER");
    sc_trace(mVcdFile, m_axi_UART_WVALID, "(port)m_axi_UART_WVALID");
    sc_trace(mVcdFile, m_axi_UART_WREADY, "(port)m_axi_UART_WREADY");
    sc_trace(mVcdFile, m_axi_UART_WDATA, "(port)m_axi_UART_WDATA");
    sc_trace(mVcdFile, m_axi_UART_WSTRB, "(port)m_axi_UART_WSTRB");
    sc_trace(mVcdFile, m_axi_UART_WLAST, "(port)m_axi_UART_WLAST");
    sc_trace(mVcdFile, m_axi_UART_WID, "(port)m_axi_UART_WID");
    sc_trace(mVcdFile, m_axi_UART_WUSER, "(port)m_axi_UART_WUSER");
    sc_trace(mVcdFile, m_axi_UART_ARVALID, "(port)m_axi_UART_ARVALID");
    sc_trace(mVcdFile, m_axi_UART_ARREADY, "(port)m_axi_UART_ARREADY");
    sc_trace(mVcdFile, m_axi_UART_ARADDR, "(port)m_axi_UART_ARADDR");
    sc_trace(mVcdFile, m_axi_UART_ARID, "(port)m_axi_UART_ARID");
    sc_trace(mVcdFile, m_axi_UART_ARLEN, "(port)m_axi_UART_ARLEN");
    sc_trace(mVcdFile, m_axi_UART_ARSIZE, "(port)m_axi_UART_ARSIZE");
    sc_trace(mVcdFile, m_axi_UART_ARBURST, "(port)m_axi_UART_ARBURST");
    sc_trace(mVcdFile, m_axi_UART_ARLOCK, "(port)m_axi_UART_ARLOCK");
    sc_trace(mVcdFile, m_axi_UART_ARCACHE, "(port)m_axi_UART_ARCACHE");
    sc_trace(mVcdFile, m_axi_UART_ARPROT, "(port)m_axi_UART_ARPROT");
    sc_trace(mVcdFile, m_axi_UART_ARQOS, "(port)m_axi_UART_ARQOS");
    sc_trace(mVcdFile, m_axi_UART_ARREGION, "(port)m_axi_UART_ARREGION");
    sc_trace(mVcdFile, m_axi_UART_ARUSER, "(port)m_axi_UART_ARUSER");
    sc_trace(mVcdFile, m_axi_UART_RVALID, "(port)m_axi_UART_RVALID");
    sc_trace(mVcdFile, m_axi_UART_RREADY, "(port)m_axi_UART_RREADY");
    sc_trace(mVcdFile, m_axi_UART_RDATA, "(port)m_axi_UART_RDATA");
    sc_trace(mVcdFile, m_axi_UART_RLAST, "(port)m_axi_UART_RLAST");
    sc_trace(mVcdFile, m_axi_UART_RID, "(port)m_axi_UART_RID");
    sc_trace(mVcdFile, m_axi_UART_RUSER, "(port)m_axi_UART_RUSER");
    sc_trace(mVcdFile, m_axi_UART_RRESP, "(port)m_axi_UART_RRESP");
    sc_trace(mVcdFile, m_axi_UART_BVALID, "(port)m_axi_UART_BVALID");
    sc_trace(mVcdFile, m_axi_UART_BREADY, "(port)m_axi_UART_BREADY");
    sc_trace(mVcdFile, m_axi_UART_BRESP, "(port)m_axi_UART_BRESP");
    sc_trace(mVcdFile, m_axi_UART_BID, "(port)m_axi_UART_BID");
    sc_trace(mVcdFile, m_axi_UART_BUSER, "(port)m_axi_UART_BUSER");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, s_axi_TEST_AWVALID, "(port)s_axi_TEST_AWVALID");
    sc_trace(mVcdFile, s_axi_TEST_AWREADY, "(port)s_axi_TEST_AWREADY");
    sc_trace(mVcdFile, s_axi_TEST_AWADDR, "(port)s_axi_TEST_AWADDR");
    sc_trace(mVcdFile, s_axi_TEST_WVALID, "(port)s_axi_TEST_WVALID");
    sc_trace(mVcdFile, s_axi_TEST_WREADY, "(port)s_axi_TEST_WREADY");
    sc_trace(mVcdFile, s_axi_TEST_WDATA, "(port)s_axi_TEST_WDATA");
    sc_trace(mVcdFile, s_axi_TEST_WSTRB, "(port)s_axi_TEST_WSTRB");
    sc_trace(mVcdFile, s_axi_TEST_ARVALID, "(port)s_axi_TEST_ARVALID");
    sc_trace(mVcdFile, s_axi_TEST_ARREADY, "(port)s_axi_TEST_ARREADY");
    sc_trace(mVcdFile, s_axi_TEST_ARADDR, "(port)s_axi_TEST_ARADDR");
    sc_trace(mVcdFile, s_axi_TEST_RVALID, "(port)s_axi_TEST_RVALID");
    sc_trace(mVcdFile, s_axi_TEST_RREADY, "(port)s_axi_TEST_RREADY");
    sc_trace(mVcdFile, s_axi_TEST_RDATA, "(port)s_axi_TEST_RDATA");
    sc_trace(mVcdFile, s_axi_TEST_RRESP, "(port)s_axi_TEST_RRESP");
    sc_trace(mVcdFile, s_axi_TEST_BVALID, "(port)s_axi_TEST_BVALID");
    sc_trace(mVcdFile, s_axi_TEST_BREADY, "(port)s_axi_TEST_BREADY");
    sc_trace(mVcdFile, s_axi_TEST_BRESP, "(port)s_axi_TEST_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, SBUS_data_address0, "SBUS_data_address0");
    sc_trace(mVcdFile, SBUS_data_ce0, "SBUS_data_ce0");
    sc_trace(mVcdFile, SBUS_data_we0, "SBUS_data_we0");
    sc_trace(mVcdFile, SBUS_data_d0, "SBUS_data_d0");
    sc_trace(mVcdFile, firstSample, "firstSample");
    sc_trace(mVcdFile, calibrationSuccess, "calibrationSuccess");
    sc_trace(mVcdFile, UART_blk_n_AW, "UART_blk_n_AW");
    sc_trace(mVcdFile, firstSample_load_load_fu_438_p1, "firstSample_load_load_fu_438_p1");
    sc_trace(mVcdFile, UART_blk_n_W, "UART_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, UART_blk_n_B, "UART_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, UART_blk_n_AR, "UART_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, UART_blk_n_R, "UART_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, tmp_fu_467_p2, "tmp_fu_467_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, firstSample_load_reg_530, "firstSample_load_reg_530");
    sc_trace(mVcdFile, tmp_reg_559, "tmp_reg_559");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, calibrationSuccess_l_load_fu_484_p1, "calibrationSuccess_l_load_fu_484_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, tmp_2_fu_495_p1, "tmp_2_fu_495_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, calibrationSuccess_l_reg_563, "calibrationSuccess_l_reg_563");
    sc_trace(mVcdFile, tmp_2_reg_573, "tmp_2_reg_573");
    sc_trace(mVcdFile, UART_AWVALID, "UART_AWVALID");
    sc_trace(mVcdFile, UART_AWREADY, "UART_AWREADY");
    sc_trace(mVcdFile, UART_AWADDR, "UART_AWADDR");
    sc_trace(mVcdFile, UART_WVALID, "UART_WVALID");
    sc_trace(mVcdFile, UART_WREADY, "UART_WREADY");
    sc_trace(mVcdFile, UART_WDATA, "UART_WDATA");
    sc_trace(mVcdFile, UART_ARVALID, "UART_ARVALID");
    sc_trace(mVcdFile, UART_ARREADY, "UART_ARREADY");
    sc_trace(mVcdFile, UART_ARADDR, "UART_ARADDR");
    sc_trace(mVcdFile, UART_RVALID, "UART_RVALID");
    sc_trace(mVcdFile, UART_RREADY, "UART_RREADY");
    sc_trace(mVcdFile, UART_RDATA, "UART_RDATA");
    sc_trace(mVcdFile, UART_RLAST, "UART_RLAST");
    sc_trace(mVcdFile, UART_RID, "UART_RID");
    sc_trace(mVcdFile, UART_RUSER, "UART_RUSER");
    sc_trace(mVcdFile, UART_RRESP, "UART_RRESP");
    sc_trace(mVcdFile, UART_BVALID, "UART_BVALID");
    sc_trace(mVcdFile, UART_BREADY, "UART_BREADY");
    sc_trace(mVcdFile, UART_BRESP, "UART_BRESP");
    sc_trace(mVcdFile, UART_BID, "UART_BID");
    sc_trace(mVcdFile, UART_BUSER, "UART_BUSER");
    sc_trace(mVcdFile, reg_419, "reg_419");
    sc_trace(mVcdFile, ap_sig_ioackin_UART_AWREADY, "ap_sig_ioackin_UART_AWREADY");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, ap_sig_ioackin_UART_WREADY, "ap_sig_ioackin_UART_WREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_predicate_op140_writeresp_state28, "ap_predicate_op140_writeresp_state28");
    sc_trace(mVcdFile, ap_block_state28, "ap_block_state28");
    sc_trace(mVcdFile, ap_block_state28_io, "ap_block_state28_io");
    sc_trace(mVcdFile, UART_addr_1_reg_534, "UART_addr_1_reg_534");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, UART_addr_3_reg_541, "UART_addr_3_reg_541");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_state6_io, "ap_block_state6_io");
    sc_trace(mVcdFile, temp_fu_463_p1, "temp_fu_463_p1");
    sc_trace(mVcdFile, temp_reg_554, "temp_reg_554");
    sc_trace(mVcdFile, ap_block_state22_io, "ap_block_state22_io");
    sc_trace(mVcdFile, ap_sig_ioackin_UART_ARREADY, "ap_sig_ioackin_UART_ARREADY");
    sc_trace(mVcdFile, ap_block_state42_io, "ap_block_state42_io");
    sc_trace(mVcdFile, UART_addr_5_read_reg_577, "UART_addr_5_read_reg_577");
    sc_trace(mVcdFile, ctr_V_fu_505_p2, "ctr_V_fu_505_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state55, "ap_CS_fsm_state55");
    sc_trace(mVcdFile, p_014_0_i_reg_392, "p_014_0_i_reg_392");
    sc_trace(mVcdFile, ap_predicate_op196_writeresp_state54, "ap_predicate_op196_writeresp_state54");
    sc_trace(mVcdFile, ap_block_state54, "ap_block_state54");
    sc_trace(mVcdFile, tmp_4_fu_499_p2, "tmp_4_fu_499_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_reg_ioackin_UART_AWREADY, "ap_reg_ioackin_UART_AWREADY");
    sc_trace(mVcdFile, ap_block_state7_io, "ap_block_state7_io");
    sc_trace(mVcdFile, ap_reg_ioackin_UART_ARREADY, "ap_reg_ioackin_UART_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_UART_WREADY, "ap_reg_ioackin_UART_WREADY");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_764, "ap_condition_764");
#endif

    }
    mHdltvinHandle.open("AXI_UART_DRIVER.hdltvin.dat");
    mHdltvoutHandle.open("AXI_UART_DRIVER.hdltvout.dat");
}

AXI_UART_DRIVER::~AXI_UART_DRIVER() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete AXI_UART_DRIVER_CTRL_s_axi_U;
    delete AXI_UART_DRIVER_TEST_s_axi_U;
    delete AXI_UART_DRIVER_UART_m_axi_U;
}

void AXI_UART_DRIVER::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void AXI_UART_DRIVER::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void AXI_UART_DRIVER::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void AXI_UART_DRIVER::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void AXI_UART_DRIVER::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void AXI_UART_DRIVER::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void AXI_UART_DRIVER::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void AXI_UART_DRIVER::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void AXI_UART_DRIVER::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_UART_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_sig_ioackin_UART_ARREADY.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) || 
             (esl_seteq<1,1,1>(ap_sig_ioackin_UART_ARREADY.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state42_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
              esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_1)))) {
            ap_reg_ioackin_UART_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
                     esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_ARREADY.read())))) {
            ap_reg_ioackin_UART_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_UART_AWREADY = ap_const_logic_0;
    } else {
        if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_sig_ioackin_UART_AWREADY.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state28_io.read()) || (esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
              esl_seteq<1,1,1>(calibrationSuccess.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state6_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state22_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
              esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())))) {
            ap_reg_ioackin_UART_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
                     esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                     esl_seteq<1,1,1>(calibrationSuccess.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read()) && 
                     !(esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_AWREADY.read())))) {
            ap_reg_ioackin_UART_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_UART_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state6_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
             (!(esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
             (!(esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
             (esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) || 
             (esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())))) {
            ap_reg_ioackin_UART_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, UART_WREADY.read())))) {
            ap_reg_ioackin_UART_WREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        firstSample = ap_const_lv1_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, firstSample_load_reg_530.read()) && 
             !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state28_io.read()) || (esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))))) {
            firstSample = ap_const_lv1_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_499_p2.read(), ap_const_lv1_0))) {
        p_014_0_i_reg_392 = ctr_V_fu_505_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_predicate_op196_writeresp_state54.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        p_014_0_i_reg_392 = ap_const_lv19_0;
    }
    if ((!(esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        UART_addr_5_read_reg_577 = UART_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state22_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1))) {
        calibrationSuccess = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state28_io.read()) || (esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))))) {
        calibrationSuccess_l_reg_563 = calibrationSuccess.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        firstSample_load_reg_530 = firstSample.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        temp_reg_554 = temp_fu_463_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state42_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())))) {
        tmp_2_reg_573 = tmp_2_fu_495_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state22_io.read()))) {
        tmp_reg_559 = tmp_fu_467_p2.read();
    }
}

void AXI_UART_DRIVER::thread_SBUS_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        SBUS_data_address0 =  (sc_lv<12>) (ap_const_lv64_0);
    } else {
        SBUS_data_address0 = "XXXXXXXXXXXX";
    }
}

void AXI_UART_DRIVER::thread_SBUS_data_ce0() {
    if (((esl_seteq<1,1,1>(ap_sig_ioackin_UART_ARREADY.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state42_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        SBUS_data_ce0 = ap_const_logic_1;
    } else {
        SBUS_data_ce0 = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_SBUS_data_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        SBUS_data_d0 = UART_addr_5_read_reg_577.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        SBUS_data_d0 = ap_const_lv32_88;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        SBUS_data_d0 = ap_const_lv32_77;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        SBUS_data_d0 = ap_const_lv32_66;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        SBUS_data_d0 = ap_const_lv32_55;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        SBUS_data_d0 = ap_const_lv32_44;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        SBUS_data_d0 = ap_const_lv32_33;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        SBUS_data_d0 = ap_const_lv32_22;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        SBUS_data_d0 = ap_const_lv32_11;
    } else {
        SBUS_data_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void AXI_UART_DRIVER::thread_SBUS_data_we0() {
    if (((esl_seteq<1,1,1>(ap_sig_ioackin_UART_ARREADY.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state42_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        SBUS_data_we0 = ap_const_logic_1;
    } else {
        SBUS_data_we0 = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_UART_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
            UART_ARADDR =  (sc_lv<32>) (ap_const_lv64_405);
        } else if (esl_seteq<1,1,1>(ap_condition_764.read(), ap_const_boolean_1)) {
            UART_ARADDR =  (sc_lv<32>) (ap_const_lv64_400);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            UART_ARADDR =  (sc_lv<32>) (ap_const_lv64_407);
        } else {
            UART_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        UART_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void AXI_UART_DRIVER::thread_UART_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_ARREADY.read())))) {
        UART_ARVALID = ap_const_logic_1;
    } else {
        UART_ARVALID = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_UART_AWADDR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()))) {
        UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_402);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()))) {
        UART_AWADDR = UART_addr_3_reg_541.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()))) {
        UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_401);
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                 esl_seteq<1,1,1>(calibrationSuccess.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()) && 
                 !(esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))))) {
        UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_400);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()))) {
        UART_AWADDR = UART_addr_1_reg_534.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()))) {
        UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_403);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
                esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()))) {
        UART_AWADDR = reg_419.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())))) {
        UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_407);
    } else {
        UART_AWADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void AXI_UART_DRIVER::thread_UART_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(calibrationSuccess.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read()) && 
          !(esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())))) {
        UART_AWVALID = ap_const_logic_1;
    } else {
        UART_AWVALID = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_UART_BREADY() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state28_io.read()) || (esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())))) || 
         (!(esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) && 
          esl_seteq<1,1,1>(ap_predicate_op196_writeresp_state54.read(), ap_const_boolean_1) && 
          !(esl_seteq<1,1,1>(ap_predicate_op196_writeresp_state54.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))))) {
        UART_BREADY = ap_const_logic_1;
    } else {
        UART_BREADY = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_UART_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state42_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read()))) || 
         (!(esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())))) {
        UART_RREADY = ap_const_logic_1;
    } else {
        UART_RREADY = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_UART_WDATA() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())))) {
        UART_WDATA = ap_const_lv32_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read()))) {
        UART_WDATA = ap_const_lv32_1F;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())))) {
        UART_WDATA = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read()))) {
        UART_WDATA = ap_const_lv32_3F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read()))) {
        UART_WDATA = ap_const_lv32_80;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())))) {
        UART_WDATA = ap_const_lv32_45;
    } else {
        UART_WDATA =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void AXI_UART_DRIVER::thread_UART_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())))) {
        UART_WVALID = ap_const_logic_1;
    } else {
        UART_WVALID = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_UART_addr_1_reg_534() {
    UART_addr_1_reg_534 =  (sc_lv<32>) (ap_const_lv64_403);
}

void AXI_UART_DRIVER::thread_UART_addr_3_reg_541() {
    UART_addr_3_reg_541 =  (sc_lv<32>) (ap_const_lv64_401);
}

void AXI_UART_DRIVER::thread_UART_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        UART_blk_n_AR = m_axi_UART_ARREADY.read();
    } else {
        UART_blk_n_AR = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_UART_blk_n_AW() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(calibrationSuccess.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        UART_blk_n_AW = m_axi_UART_AWREADY.read();
    } else {
        UART_blk_n_AW = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_UART_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, firstSample_load_reg_530.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_559.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, calibrationSuccess_l_reg_563.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_573.read())))) {
        UART_blk_n_B = m_axi_UART_BVALID.read();
    } else {
        UART_blk_n_B = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_UART_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        UART_blk_n_R = m_axi_UART_RVALID.read();
    } else {
        UART_blk_n_R = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_UART_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        UART_blk_n_W = m_axi_UART_WREADY.read();
    } else {
        UART_blk_n_W = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state55() {
    ap_CS_fsm_state55 = ap_CS_fsm.read()[54];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AXI_UART_DRIVER::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AXI_UART_DRIVER::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()));
}

void AXI_UART_DRIVER::thread_ap_block_state22_io() {
    ap_block_state22_io = (esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()));
}

void AXI_UART_DRIVER::thread_ap_block_state28() {
    ap_block_state28 = (esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()));
}

void AXI_UART_DRIVER::thread_ap_block_state28_io() {
    ap_block_state28_io = (esl_seteq<1,1,1>(calibrationSuccess.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()));
}

void AXI_UART_DRIVER::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0));
}

void AXI_UART_DRIVER::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0));
}

void AXI_UART_DRIVER::thread_ap_block_state42_io() {
    ap_block_state42_io = (esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_ARREADY.read()));
}

void AXI_UART_DRIVER::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0));
}

void AXI_UART_DRIVER::thread_ap_block_state54() {
    ap_block_state54 = (esl_seteq<1,1,1>(ap_predicate_op196_writeresp_state54.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()));
}

void AXI_UART_DRIVER::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0));
}

void AXI_UART_DRIVER::thread_ap_block_state6_io() {
    ap_block_state6_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0));
}

void AXI_UART_DRIVER::thread_ap_block_state7_io() {
    ap_block_state7_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0));
}

void AXI_UART_DRIVER::thread_ap_condition_764() {
    ap_condition_764 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()));
}

void AXI_UART_DRIVER::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_499_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_ap_predicate_op140_writeresp_state28() {
    ap_predicate_op140_writeresp_state28 = (esl_seteq<1,1,1>(ap_const_lv1_1, firstSample_load_reg_530.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_559.read()));
}

void AXI_UART_DRIVER::thread_ap_predicate_op196_writeresp_state54() {
    ap_predicate_op196_writeresp_state54 = (esl_seteq<1,1,1>(ap_const_lv1_1, calibrationSuccess_l_reg_563.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_573.read()));
}

void AXI_UART_DRIVER::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_499_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AXI_UART_DRIVER::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void AXI_UART_DRIVER::thread_ap_sig_ioackin_UART_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_ARREADY.read())) {
        ap_sig_ioackin_UART_ARREADY = UART_ARREADY.read();
    } else {
        ap_sig_ioackin_UART_ARREADY = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_ap_sig_ioackin_UART_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_AWREADY.read())) {
        ap_sig_ioackin_UART_AWREADY = UART_AWREADY.read();
    } else {
        ap_sig_ioackin_UART_AWREADY = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_ap_sig_ioackin_UART_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_UART_WREADY.read())) {
        ap_sig_ioackin_UART_WREADY = UART_WREADY.read();
    } else {
        ap_sig_ioackin_UART_WREADY = ap_const_logic_1;
    }
}

void AXI_UART_DRIVER::thread_calibrationSuccess_l_load_fu_484_p1() {
    calibrationSuccess_l_load_fu_484_p1 = calibrationSuccess.read();
}

void AXI_UART_DRIVER::thread_ctr_V_fu_505_p2() {
    ctr_V_fu_505_p2 = (!p_014_0_i_reg_392.read().is_01() || !ap_const_lv19_1.is_01())? sc_lv<19>(): (sc_biguint<19>(p_014_0_i_reg_392.read()) + sc_biguint<19>(ap_const_lv19_1));
}

void AXI_UART_DRIVER::thread_firstSample_load_load_fu_438_p1() {
    firstSample_load_load_fu_438_p1 = firstSample.read();
}

void AXI_UART_DRIVER::thread_reg_419() {
    reg_419 =  (sc_lv<32>) (ap_const_lv64_407);
}

void AXI_UART_DRIVER::thread_temp_fu_463_p1() {
    temp_fu_463_p1 = UART_RDATA.read().range(8-1, 0);
}

void AXI_UART_DRIVER::thread_tmp_2_fu_495_p1() {
    tmp_2_fu_495_p1 = UART_RDATA.read().range(1-1, 0);
}

void AXI_UART_DRIVER::thread_tmp_4_fu_499_p2() {
    tmp_4_fu_499_p2 = (!p_014_0_i_reg_392.read().is_01() || !ap_const_lv19_7A120.is_01())? sc_lv<1>(): sc_lv<1>(p_014_0_i_reg_392.read() == ap_const_lv19_7A120);
}

void AXI_UART_DRIVER::thread_tmp_fu_467_p2() {
    tmp_fu_467_p2 = (!temp_reg_554.read().is_01() || !ap_const_lv8_45.is_01())? sc_lv<1>(): sc_lv<1>(temp_reg_554.read() == ap_const_lv8_45);
}

void AXI_UART_DRIVER::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(firstSample_load_load_fu_438_p1.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state6_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_UART_ARREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_RVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state22_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state22_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(tmp_fu_467_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state28_io.read()) || (esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(calibrationSuccess_l_load_fu_484_p1.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state54;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state28_io.read()) || (esl_seteq<1,1,1>(ap_predicate_op140_writeresp_state28.read(), ap_const_boolean_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read()))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(calibrationSuccess.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else {
                ap_NS_fsm = ap_ST_fsm_state28;
            }
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
                ap_NS_fsm = ap_ST_fsm_state35;
            } else {
                ap_NS_fsm = ap_ST_fsm_state34;
            }
            break;
        case 17179869184 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_UART_ARREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else {
                ap_NS_fsm = ap_ST_fsm_state35;
            }
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state42_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state54;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state42_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(tmp_2_fu_495_p1.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state43;
            } else {
                ap_NS_fsm = ap_ST_fsm_state42;
            }
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_UART_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
                ap_NS_fsm = ap_ST_fsm_state49;
            } else {
                ap_NS_fsm = ap_ST_fsm_state48;
            }
            break;
        case 281474976710656 : 
            if ((!(esl_seteq<1,1,1>(ap_sig_ioackin_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, UART_RVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
                ap_NS_fsm = ap_ST_fsm_state50;
            } else {
                ap_NS_fsm = ap_ST_fsm_state49;
            }
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            if ((!(esl_seteq<1,1,1>(ap_predicate_op196_writeresp_state54.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, UART_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
                ap_NS_fsm = ap_ST_fsm_state55;
            } else {
                ap_NS_fsm = ap_ST_fsm_state54;
            }
            break;
        case 18014398509481984 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && esl_seteq<1,1,1>(tmp_4_fu_499_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state55;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<55>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void AXI_UART_DRIVER::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_UART_AWVALID\" :  \"" << m_axi_UART_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_AWREADY\" :  \"" << m_axi_UART_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWADDR\" :  \"" << m_axi_UART_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWID\" :  \"" << m_axi_UART_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWLEN\" :  \"" << m_axi_UART_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWSIZE\" :  \"" << m_axi_UART_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWBURST\" :  \"" << m_axi_UART_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWLOCK\" :  \"" << m_axi_UART_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWCACHE\" :  \"" << m_axi_UART_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWPROT\" :  \"" << m_axi_UART_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWQOS\" :  \"" << m_axi_UART_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWREGION\" :  \"" << m_axi_UART_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_AWUSER\" :  \"" << m_axi_UART_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_WVALID\" :  \"" << m_axi_UART_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_WREADY\" :  \"" << m_axi_UART_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_WDATA\" :  \"" << m_axi_UART_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_WSTRB\" :  \"" << m_axi_UART_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_WLAST\" :  \"" << m_axi_UART_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_WID\" :  \"" << m_axi_UART_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_WUSER\" :  \"" << m_axi_UART_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARVALID\" :  \"" << m_axi_UART_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_ARREADY\" :  \"" << m_axi_UART_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARADDR\" :  \"" << m_axi_UART_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARID\" :  \"" << m_axi_UART_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARLEN\" :  \"" << m_axi_UART_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARSIZE\" :  \"" << m_axi_UART_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARBURST\" :  \"" << m_axi_UART_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARLOCK\" :  \"" << m_axi_UART_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARCACHE\" :  \"" << m_axi_UART_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARPROT\" :  \"" << m_axi_UART_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARQOS\" :  \"" << m_axi_UART_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARREGION\" :  \"" << m_axi_UART_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_ARUSER\" :  \"" << m_axi_UART_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_RVALID\" :  \"" << m_axi_UART_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_RREADY\" :  \"" << m_axi_UART_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_RDATA\" :  \"" << m_axi_UART_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_RLAST\" :  \"" << m_axi_UART_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_RID\" :  \"" << m_axi_UART_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_RUSER\" :  \"" << m_axi_UART_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_RRESP\" :  \"" << m_axi_UART_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_BVALID\" :  \"" << m_axi_UART_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_UART_BREADY\" :  \"" << m_axi_UART_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_BRESP\" :  \"" << m_axi_UART_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_BID\" :  \"" << m_axi_UART_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_UART_BUSER\" :  \"" << m_axi_UART_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_AWVALID\" :  \"" << s_axi_TEST_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_AWREADY\" :  \"" << s_axi_TEST_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_AWADDR\" :  \"" << s_axi_TEST_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_WVALID\" :  \"" << s_axi_TEST_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_WREADY\" :  \"" << s_axi_TEST_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_WDATA\" :  \"" << s_axi_TEST_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_WSTRB\" :  \"" << s_axi_TEST_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_ARVALID\" :  \"" << s_axi_TEST_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_ARREADY\" :  \"" << s_axi_TEST_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_ARADDR\" :  \"" << s_axi_TEST_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_RVALID\" :  \"" << s_axi_TEST_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_RREADY\" :  \"" << s_axi_TEST_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_RDATA\" :  \"" << s_axi_TEST_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_RRESP\" :  \"" << s_axi_TEST_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_BVALID\" :  \"" << s_axi_TEST_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_BREADY\" :  \"" << s_axi_TEST_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_BRESP\" :  \"" << s_axi_TEST_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

