#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_UART_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_UART_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_UART_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_UART_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_UART_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_UART_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_UART_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_UART_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_UART_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_UART_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_UART_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_UART_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_UART_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_UART_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_UART_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_UART_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_UART_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_UART_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_UART_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_UART_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_UART_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_UART_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_UART_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_UART_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_UART_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_UART_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_UART_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_UART_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_UART_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_UART_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_UART_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_UART_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_UART_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_UART_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_UART_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_UART_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_UART_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_UART_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_UART_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_UART_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_UART_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_UART_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_UART_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_UART_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_UART_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("s_axi_CTRL_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_AWADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_ARADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_AWADDR", 15, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_ARADDR", 15, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_TEST_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_TEST_BRESP", 2, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "AXI_UART_DRIVER";
