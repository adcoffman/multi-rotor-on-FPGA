

================================================================
== Vivado HLS Report for 'AXI_UART_DRIVER'
================================================================
* Date:           Sun May 26 19:00:28 2019

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        SBUS_AXI_UART_Driver
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.750|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |    ?|    ?|  9 ~ 21  |          -|          -|     ?|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|DSP              |        -|      -|       -|      -|
|Expression       |        -|      -|       0|    116|
|FIFO             |        -|      -|       -|      -|
|Instance         |        4|      -|    1132|   1440|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|    676|
|Register         |        -|      -|     149|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        4|      0|    1281|   2232|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        1|      0|       1|      4|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    +-------------------------------+-----------------------------+---------+-------+-----+-----+
    |            Instance           |            Module           | BRAM_18K| DSP48E|  FF | LUT |
    +-------------------------------+-----------------------------+---------+-------+-----+-----+
    |AXI_UART_DRIVER_CTRL_s_axi_U   |AXI_UART_DRIVER_CTRL_s_axi   |        0|      0|   36|   40|
    |AXI_UART_DRIVER_OUT_r_m_axi_U  |AXI_UART_DRIVER_OUT_r_m_axi  |        2|      0|  548|  700|
    |AXI_UART_DRIVER_UART_m_axi_U   |AXI_UART_DRIVER_UART_m_axi   |        2|      0|  548|  700|
    +-------------------------------+-----------------------------+---------+-------+-----+-----+
    |Total                          |                             |        4|      0| 1132| 1440|
    +-------------------------------+-----------------------------+---------+-------+-----+-----+

    * DSP48: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    +--------------------------------------+----------+-------+---+----+------------+------------+
    |             Variable Name            | Operation| DSP48E| FF| LUT| Bitwidth P0| Bitwidth P1|
    +--------------------------------------+----------+-------+---+----+------------+------------+
    |NUM_BYTES_READ_1_fu_463_p2            |     +    |      0|  0|  15|           1|           5|
    |tmp_2_fu_483_p2                       |     +    |      0|  0|  19|          14|           1|
    |ap_block_state1_io                    |    and   |      0|  0|   2|           1|           1|
    |ap_block_state22_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state28                      |    and   |      0|  0|   2|           1|           1|
    |ap_block_state36_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state50_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state57_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state70                      |    and   |      0|  0|   2|           1|           1|
    |ap_block_state70_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state77                      |    and   |      0|  0|   2|           1|           1|
    |ap_condition_212                      |    and   |      0|  0|   2|           1|           1|
    |ap_condition_920                      |    and   |      0|  0|   2|           1|           1|
    |ap_condition_927                      |    and   |      0|  0|   2|           1|           1|
    |ap_condition_966                      |    and   |      0|  0|   2|           1|           1|
    |ap_predicate_op159_writeresp_state28  |    and   |      0|  0|   2|           1|           1|
    |ap_predicate_op231_writeresp_state70  |    and   |      0|  0|   2|           1|           1|
    |ap_predicate_op252_writeresp_state77  |    and   |      0|  0|   2|           1|           1|
    |tmp_5_fu_423_p2                       |   icmp   |      0|  0|  11|           8|           4|
    |tmp_6_fu_433_p2                       |   icmp   |      0|  0|  11|           5|           4|
    |tmp_7_fu_477_p2                       |   icmp   |      0|  0|  13|          14|          14|
    |tmp_fu_387_p2                         |   icmp   |      0|  0|  11|           8|           7|
    |ap_block_state2_io                    |    or    |      0|  0|   2|           1|           1|
    |ap_predicate_op243_writereq_state70   |    or    |      0|  0|   2|           1|           1|
    +--------------------------------------+----------+-------+---+----+------------+------------+
    |Total                                 |          |      0|  0| 116|          68|          53|
    +--------------------------------------+----------+-------+---+----+------------+------------+

    * Multiplexer: 
    +----------------------------------------------+-----+-----------+-----+-----------+
    |                     Name                     | LUT | Input Size| Bits| Total Bits|
    +----------------------------------------------+-----+-----------+-----+-----------+
    |NUM_BYTES_READ_3_reg_319                      |    9|          2|    5|         10|
    |NUM_BYTES_READ_fu_104                         |    9|          2|    5|         10|
    |OUT_r_AWADDR                                  |   21|          4|   32|        128|
    |OUT_r_AWLEN                                   |   15|          3|   32|         96|
    |OUT_r_WDATA                                   |   27|          5|    8|         40|
    |OUT_r_blk_n_AW                                |    9|          2|    1|          2|
    |OUT_r_blk_n_B                                 |    9|          2|    1|          2|
    |OUT_r_blk_n_W                                 |    9|          2|    1|          2|
    |UART_ARADDR                                   |   33|          6|   32|        192|
    |UART_AWADDR                                   |   44|          9|   32|        288|
    |UART_WDATA                                    |   38|          7|   32|        224|
    |UART_blk_n_AR                                 |    9|          2|    1|          2|
    |UART_blk_n_AW                                 |    9|          2|    1|          2|
    |UART_blk_n_B                                  |    9|          2|    1|          2|
    |UART_blk_n_R                                  |    9|          2|    1|          2|
    |UART_blk_n_W                                  |    9|          2|    1|          2|
    |ap_NS_fsm                                     |  345|         78|    1|         78|
    |ap_phi_mux_NUM_BYTES_READ_3_ph_phi_fu_312_p4  |    9|          2|    5|         10|
    |ap_sig_ioackin_OUT_r_AWREADY                  |    9|          2|    1|          2|
    |ap_sig_ioackin_OUT_r_WREADY                   |    9|          2|    1|          2|
    |ap_sig_ioackin_UART_ARREADY                   |    9|          2|    1|          2|
    |ap_sig_ioackin_UART_AWREADY                   |    9|          2|    1|          2|
    |ap_sig_ioackin_UART_WREADY                    |    9|          2|    1|          2|
    |cycle_count                                   |    9|          2|   14|         28|
    +----------------------------------------------+-----+-----------+-----+-----------+
    |Total                                         |  676|        146|  211|       1130|
    +----------------------------------------------+-----+-----------+-----+-----------+

    * Register: 
    +------------------------------+----+----+-----+-----------+
    |             Name             | FF | LUT| Bits| Const Bits|
    +------------------------------+----+----+-----+-----------+
    |NUM_BYTES_READ_3_ph_reg_309   |   5|   0|    5|          0|
    |NUM_BYTES_READ_3_reg_319      |   5|   0|    5|          0|
    |NUM_BYTES_READ_fu_104         |   5|   0|    5|          0|
    |NUM_BYTES_READ_load_reg_579   |   5|   0|    5|          0|
    |ap_CS_fsm                     |  77|   0|   77|          0|
    |ap_reg_ioackin_OUT_r_AWREADY  |   1|   0|    1|          0|
    |ap_reg_ioackin_OUT_r_WREADY   |   1|   0|    1|          0|
    |ap_reg_ioackin_UART_ARREADY   |   1|   0|    1|          0|
    |ap_reg_ioackin_UART_AWREADY   |   1|   0|    1|          0|
    |ap_reg_ioackin_UART_WREADY    |   1|   0|    1|          0|
    |calibrationSuccess            |   1|   0|    1|          0|
    |calibrationSuccess_l_reg_548  |   1|   0|    1|          0|
    |cycle_count                   |  14|   0|   14|          0|
    |firstSample                   |   1|   0|    1|          0|
    |firstSample_load_reg_507      |   1|   0|    1|          0|
    |temp_reg_539                  |   8|   0|    8|          0|
    |tmp_10_reg_590                |   1|   0|    1|          0|
    |tmp_11_reg_594                |   8|   0|    8|          0|
    |tmp_5_reg_568                 |   1|   0|    1|          0|
    |tmp_6_reg_586                 |   1|   0|    1|          0|
    |tmp_8_reg_558                 |   1|   0|    1|          0|
    |tmp_9_reg_562                 |   8|   0|    8|          0|
    |tmp_reg_544                   |   1|   0|    1|          0|
    +------------------------------+----+----+-----+-----------+
    |Total                         | 149|   0|  149|          0|
    +------------------------------+----+----+-----+-----------+



================================================================
== Interface
================================================================
* Summary: 
+----------------------+-----+-----+------------+-----------------+--------------+
|       RTL Ports      | Dir | Bits|  Protocol  |  Source Object  |    C Type    |
+----------------------+-----+-----+------------+-----------------+--------------+
|s_axi_CTRL_AWVALID    |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_AWREADY    | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_AWADDR     |  in |    4|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WVALID     |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WREADY     | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WDATA      |  in |   32|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WSTRB      |  in |    4|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_ARVALID    |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_ARREADY    | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_ARADDR     |  in |    4|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RVALID     | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RREADY     |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RDATA      | out |   32|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RRESP      | out |    2|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_BVALID     | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_BREADY     |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_BRESP      | out |    2|    s_axi   |       CTRL      |  return void |
|ap_clk                |  in |    1| ap_ctrl_hs | AXI_UART_DRIVER | return value |
|ap_rst_n              |  in |    1| ap_ctrl_hs | AXI_UART_DRIVER | return value |
|interrupt             | out |    1| ap_ctrl_hs | AXI_UART_DRIVER | return value |
|m_axi_UART_AWVALID    | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWREADY    |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWADDR     | out |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWID       | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWLEN      | out |    8|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWSIZE     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWBURST    | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWLOCK     | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWCACHE    | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWPROT     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWQOS      | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWREGION   | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWUSER     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WVALID     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WREADY     |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WDATA      | out |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WSTRB      | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WLAST      | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WID        | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WUSER      | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARVALID    | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARREADY    |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARADDR     | out |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARID       | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARLEN      | out |    8|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARSIZE     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARBURST    | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARLOCK     | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARCACHE    | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARPROT     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARQOS      | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARREGION   | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARUSER     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RVALID     |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RREADY     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RDATA      |  in |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RLAST      |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RID        |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RUSER      |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RRESP      |  in |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BVALID     |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BREADY     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BRESP      |  in |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BID        |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BUSER      |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_OUT_r_AWVALID   | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWREADY   |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWADDR    | out |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWID      | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWLEN     | out |    8|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWSIZE    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWBURST   | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWLOCK    | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWCACHE   | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWPROT    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWQOS     | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWREGION  | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWUSER    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WVALID    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WREADY    |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WDATA     | out |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WSTRB     | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WLAST     | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WID       | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WUSER     | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARVALID   | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARREADY   |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARADDR    | out |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARID      | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARLEN     | out |    8|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARSIZE    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARBURST   | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARLOCK    | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARCACHE   | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARPROT    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARQOS     | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARREGION  | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARUSER    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RVALID    |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RREADY    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RDATA     |  in |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RLAST     |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RID       |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RUSER     |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RRESP     |  in |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BVALID    |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BREADY    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BRESP     |  in |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BID       |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BUSER     |  in |    1|    m_axi   |      OUT_r      |    pointer   |
+----------------------+-----+-----+------------+-----------------+--------------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 2
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 77
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / (firstSample_load)
	28  / (!firstSample_load)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / (tmp)
	28  / (!tmp)
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / (calibrationSuccess_l)
	77  / (!calibrationSuccess_l)
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / (tmp_8)
	77  / (!tmp_8)
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	70  / (!tmp_5)
	50  / (tmp_5)
50 --> 
	51  / (tmp_6)
	70  / (!tmp_6)
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / (tmp_10)
	70  / (!tmp_10)
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	50  / (tmp_5 & tmp_6 & !tmp_7)
	71  / (!tmp_5) | (!tmp_6) | (tmp_7)
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 8.75>
ST_1 : Operation 78 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %UART), !map !48"   --->   Operation 78 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 79 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %OUT_r), !map !54"   --->   Operation 79 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 80 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([16 x i8]* @AXI_UART_DRIVER_str) nounwind"   --->   Operation 80 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 81 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [5 x i8]* @p_str2, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:33]   --->   Operation 81 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 82 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %UART, [6 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 4096, [5 x i8]* @p_str4, [4 x i8]* @p_str5, [1 x i8]* @p_str, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str, [1 x i8]* @p_str)"   --->   Operation 82 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 83 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %OUT_r, [6 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 4096, [4 x i8]* @p_str6, [4 x i8]* @p_str5, [1 x i8]* @p_str, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str, [1 x i8]* @p_str)"   --->   Operation 83 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 84 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i1* @firstSample, i32 1, [1 x i8]* @p_str) nounwind" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:53]   --->   Operation 84 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 85 [1/1] (0.00ns)   --->   "%firstSample_load = load i1* @firstSample, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:56]   --->   Operation 85 'load' 'firstSample_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 86 [1/1] (0.00ns)   --->   "br i1 %firstSample_load, label %1, label %._crit_edge" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:56]   --->   Operation 86 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 87 [1/1] (0.00ns)   --->   "%UART_addr = getelementptr i32* %UART, i64 1031"   --->   Operation 87 'getelementptr' 'UART_addr' <Predicate = (firstSample_load)> <Delay = 0.00>
ST_1 : Operation 88 [1/1] (8.75ns)   --->   "%UART_addr_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 88 'writereq' 'UART_addr_req' <Predicate = (firstSample_load)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 2 <SV = 1> <Delay = 8.75>
ST_2 : Operation 89 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr, i32 69, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 89 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%UART_addr_1 = getelementptr i32* %UART, i64 1027"   --->   Operation 90 'getelementptr' 'UART_addr_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 91 [1/1] (8.75ns)   --->   "%UART_addr_1_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_1, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:64]   --->   Operation 91 'writereq' 'UART_addr_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 8.75>
ST_3 : Operation 92 [5/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 92 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 93 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_1, i32 128, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:64]   --->   Operation 93 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 94 [1/1] (0.00ns)   --->   "%UART_addr_2 = getelementptr i32* %UART, i64 1024"   --->   Operation 94 'getelementptr' 'UART_addr_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 95 [1/1] (8.75ns)   --->   "%UART_addr_2_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_2, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 95 'writereq' 'UART_addr_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 8.75>
ST_4 : Operation 96 [4/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 96 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 97 [5/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:64]   --->   Operation 97 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 98 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_2, i32 62, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 98 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 99 [1/1] (0.00ns)   --->   "%UART_addr_3 = getelementptr i32* %UART, i64 1025"   --->   Operation 99 'getelementptr' 'UART_addr_3' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 100 [1/1] (8.75ns)   --->   "%UART_addr_3_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_3, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:75]   --->   Operation 100 'writereq' 'UART_addr_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 8.75>
ST_5 : Operation 101 [3/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 101 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 102 [4/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:64]   --->   Operation 102 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 103 [5/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 103 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 104 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_3, i32 0, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:75]   --->   Operation 104 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 105 [1/1] (8.75ns)   --->   "%UART_addr_1_req6 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_1, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 105 'writereq' 'UART_addr_1_req6' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 8.75>
ST_6 : Operation 106 [2/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 106 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 107 [3/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:64]   --->   Operation 107 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 108 [4/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 108 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 109 [5/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:75]   --->   Operation 109 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 110 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_1, i32 31, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 110 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 111 [1/1] (0.00ns)   --->   "%UART_addr_4 = getelementptr i32* %UART, i64 1026"   --->   Operation 111 'getelementptr' 'UART_addr_4' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 112 [1/1] (8.75ns)   --->   "%UART_addr_4_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_4, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:81]   --->   Operation 112 'writereq' 'UART_addr_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 8.75>
ST_7 : Operation 113 [1/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 113 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 114 [2/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:64]   --->   Operation 114 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 115 [3/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 115 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 116 [4/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:75]   --->   Operation 116 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 117 [5/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 117 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 118 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_4, i32 1, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:81]   --->   Operation 118 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 119 [1/1] (8.75ns)   --->   "%UART_addr_3_req8 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_3, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:87]   --->   Operation 119 'writereq' 'UART_addr_3_req8' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 8.75>
ST_8 : Operation 120 [1/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:64]   --->   Operation 120 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 121 [2/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 121 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 122 [3/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:75]   --->   Operation 122 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 123 [4/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 123 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 124 [5/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:81]   --->   Operation 124 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 125 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_3, i32 1, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:87]   --->   Operation 125 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 8.75>
ST_9 : Operation 126 [1/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 126 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 127 [2/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:75]   --->   Operation 127 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 128 [3/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 128 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 129 [4/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:81]   --->   Operation 129 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 130 [5/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:87]   --->   Operation 130 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 8.75>
ST_10 : Operation 131 [1/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:75]   --->   Operation 131 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 132 [2/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 132 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 133 [3/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:81]   --->   Operation 133 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 134 [4/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:87]   --->   Operation 134 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 10> <Delay = 8.75>
ST_11 : Operation 135 [1/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 135 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 136 [2/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:81]   --->   Operation 136 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 137 [3/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:87]   --->   Operation 137 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 11> <Delay = 8.75>
ST_12 : Operation 138 [1/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:81]   --->   Operation 138 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 139 [2/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:87]   --->   Operation 139 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 12> <Delay = 8.75>
ST_13 : Operation 140 [1/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:87]   --->   Operation 140 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 13> <Delay = 8.75>
ST_14 : Operation 141 [7/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 141 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 15 <SV = 14> <Delay = 8.75>
ST_15 : Operation 142 [6/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 142 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 16 <SV = 15> <Delay = 8.75>
ST_16 : Operation 143 [5/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 143 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 17 <SV = 16> <Delay = 8.75>
ST_17 : Operation 144 [4/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 144 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 18 <SV = 17> <Delay = 8.75>
ST_18 : Operation 145 [3/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 145 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 19 <SV = 18> <Delay = 8.75>
ST_19 : Operation 146 [2/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 146 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 20 <SV = 19> <Delay = 8.75>
ST_20 : Operation 147 [1/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 147 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 21 <SV = 20> <Delay = 8.75>
ST_21 : Operation 148 [1/1] (8.75ns)   --->   "%UART_addr_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 148 'read' 'UART_addr_read' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 149 [1/1] (0.00ns)   --->   "%temp = trunc i32 %UART_addr_read to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:91]   --->   Operation 149 'trunc' 'temp' <Predicate = true> <Delay = 0.00>

State 22 <SV = 21> <Delay = 8.75>
ST_22 : Operation 150 [1/1] (1.55ns)   --->   "%tmp = icmp eq i8 %temp, 69" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:92]   --->   Operation 150 'icmp' 'tmp' <Predicate = true> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 151 [1/1] (0.00ns)   --->   "br i1 %tmp, label %2, label %._crit_edge2" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:92]   --->   Operation 151 'br' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 152 [1/1] (0.00ns)   --->   "store i1 true, i1* @calibrationSuccess, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:94]   --->   Operation 152 'store' <Predicate = (tmp)> <Delay = 0.00>
ST_22 : Operation 153 [1/1] (8.75ns)   --->   "%UART_addr_req4 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:95]   --->   Operation 153 'writereq' 'UART_addr_req4' <Predicate = (tmp)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 23 <SV = 22> <Delay = 8.75>
ST_23 : Operation 154 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr, i32 0, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:95]   --->   Operation 154 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 24 <SV = 23> <Delay = 8.75>
ST_24 : Operation 155 [5/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:95]   --->   Operation 155 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 25 <SV = 24> <Delay = 8.75>
ST_25 : Operation 156 [4/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:95]   --->   Operation 156 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 26 <SV = 25> <Delay = 8.75>
ST_26 : Operation 157 [3/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:95]   --->   Operation 157 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 27 <SV = 26> <Delay = 8.75>
ST_27 : Operation 158 [2/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:95]   --->   Operation 158 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 28 <SV = 27> <Delay = 8.75>
ST_28 : Operation 159 [1/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:95]   --->   Operation 159 'writeresp' 'UART_addr_resp5' <Predicate = (firstSample_load & tmp)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 160 [1/1] (0.00ns)   --->   "br label %._crit_edge2" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:96]   --->   Operation 160 'br' <Predicate = (firstSample_load & tmp)> <Delay = 0.00>
ST_28 : Operation 161 [1/1] (0.00ns)   --->   "store i1 false, i1* @firstSample, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:99]   --->   Operation 161 'store' <Predicate = (firstSample_load)> <Delay = 0.00>
ST_28 : Operation 162 [1/1] (0.00ns)   --->   "br label %._crit_edge" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:100]   --->   Operation 162 'br' <Predicate = (firstSample_load)> <Delay = 0.00>
ST_28 : Operation 163 [1/1] (0.00ns)   --->   "%calibrationSuccess_l = load i1* @calibrationSuccess, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:104]   --->   Operation 163 'load' 'calibrationSuccess_l' <Predicate = true> <Delay = 0.00>
ST_28 : Operation 164 [1/1] (0.00ns)   --->   "br i1 %calibrationSuccess_l, label %3, label %._crit_edge3" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:104]   --->   Operation 164 'br' <Predicate = true> <Delay = 0.00>

State 29 <SV = 28> <Delay = 8.75>
ST_29 : Operation 165 [1/1] (0.00ns)   --->   "%UART_addr_5 = getelementptr i32* %UART, i64 1029"   --->   Operation 165 'getelementptr' 'UART_addr_5' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 166 [7/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 166 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 30 <SV = 29> <Delay = 8.75>
ST_30 : Operation 167 [6/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 167 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 31 <SV = 30> <Delay = 8.75>
ST_31 : Operation 168 [5/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 168 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 32 <SV = 31> <Delay = 8.75>
ST_32 : Operation 169 [4/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 169 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 33 <SV = 32> <Delay = 8.75>
ST_33 : Operation 170 [3/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 170 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 34 <SV = 33> <Delay = 8.75>
ST_34 : Operation 171 [2/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 171 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 35 <SV = 34> <Delay = 8.75>
ST_35 : Operation 172 [1/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 172 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 36 <SV = 35> <Delay = 8.75>
ST_36 : Operation 173 [1/1] (8.75ns)   --->   "%UART_addr_5_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_5)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 173 'read' 'UART_addr_5_read' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_36 : Operation 174 [1/1] (0.00ns)   --->   "%tmp_8 = trunc i32 %UART_addr_5_read to i1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:170]   --->   Operation 174 'trunc' 'tmp_8' <Predicate = true> <Delay = 0.00>
ST_36 : Operation 175 [1/1] (0.00ns)   --->   "br i1 %tmp_8, label %4, label %._crit_edge4" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:171]   --->   Operation 175 'br' <Predicate = true> <Delay = 0.00>
ST_36 : Operation 176 [1/1] (0.00ns)   --->   "%UART_addr_6 = getelementptr i32* %UART, i64 1024"   --->   Operation 176 'getelementptr' 'UART_addr_6' <Predicate = (tmp_8)> <Delay = 0.00>
ST_36 : Operation 177 [7/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 177 'readreq' 'UART_load_2_req' <Predicate = (tmp_8)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 37 <SV = 36> <Delay = 8.75>
ST_37 : Operation 178 [6/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 178 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 38 <SV = 37> <Delay = 8.75>
ST_38 : Operation 179 [5/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 179 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 39 <SV = 38> <Delay = 8.75>
ST_39 : Operation 180 [4/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 180 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 40 <SV = 39> <Delay = 8.75>
ST_40 : Operation 181 [3/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 181 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 41 <SV = 40> <Delay = 8.75>
ST_41 : Operation 182 [2/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 182 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 42 <SV = 41> <Delay = 8.75>
ST_42 : Operation 183 [1/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 183 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 43 <SV = 42> <Delay = 8.75>
ST_43 : Operation 184 [1/1] (8.75ns)   --->   "%UART_addr_6_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_6)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 184 'read' 'UART_addr_6_read' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_43 : Operation 185 [1/1] (0.00ns)   --->   "%tmp_9 = trunc i32 %UART_addr_6_read to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 185 'trunc' 'tmp_9' <Predicate = true> <Delay = 0.00>
ST_43 : Operation 186 [1/1] (8.75ns)   --->   "%OUT_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %OUT_r, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 186 'writereq' 'OUT_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 44 <SV = 43> <Delay = 8.75>
ST_44 : Operation 187 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_r, i8 %tmp_9, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 187 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_44 : Operation 188 [1/1] (1.55ns)   --->   "%tmp_5 = icmp eq i8 %tmp_9, 15" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:177]   --->   Operation 188 'icmp' 'tmp_5' <Predicate = true> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 45 <SV = 44> <Delay = 8.75>
ST_45 : Operation 189 [5/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 189 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 46 <SV = 45> <Delay = 8.75>
ST_46 : Operation 190 [4/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 190 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 47 <SV = 46> <Delay = 8.75>
ST_47 : Operation 191 [3/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 191 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 48 <SV = 47> <Delay = 8.75>
ST_48 : Operation 192 [2/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 192 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 49 <SV = 48> <Delay = 8.75>
ST_49 : Operation 193 [1/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:173]   --->   Operation 193 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_49 : Operation 194 [1/1] (1.76ns)   --->   "br i1 %tmp_5, label %.preheader.preheader, label %.loopexit" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:177]   --->   Operation 194 'br' <Predicate = true> <Delay = 1.76>
ST_49 : Operation 195 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ = alloca i5"   --->   Operation 195 'alloca' 'NUM_BYTES_READ' <Predicate = (tmp_5)> <Delay = 0.00>
ST_49 : Operation 196 [1/1] (1.76ns)   --->   "store i5 1, i5* %NUM_BYTES_READ"   --->   Operation 196 'store' <Predicate = (tmp_5)> <Delay = 1.76>
ST_49 : Operation 197 [1/1] (0.00ns)   --->   "br label %.preheader" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:180]   --->   Operation 197 'br' <Predicate = (tmp_5)> <Delay = 0.00>

State 50 <SV = 49> <Delay = 8.75>
ST_50 : Operation 198 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ_load = load i5* %NUM_BYTES_READ" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:187]   --->   Operation 198 'load' 'NUM_BYTES_READ_load' <Predicate = true> <Delay = 0.00>
ST_50 : Operation 199 [1/1] (1.36ns)   --->   "%tmp_6 = icmp ult i5 %NUM_BYTES_READ_load, -7" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:180]   --->   Operation 199 'icmp' 'tmp_6' <Predicate = true> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_50 : Operation 200 [1/1] (1.76ns)   --->   "br i1 %tmp_6, label %5, label %.loopexit.loopexit" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:180]   --->   Operation 200 'br' <Predicate = true> <Delay = 1.76>
ST_50 : Operation 201 [7/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 201 'readreq' 'UART_load_3_req' <Predicate = (tmp_6)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 51 <SV = 50> <Delay = 8.75>
ST_51 : Operation 202 [6/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 202 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 52 <SV = 51> <Delay = 8.75>
ST_52 : Operation 203 [5/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 203 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 53 <SV = 52> <Delay = 8.75>
ST_53 : Operation 204 [4/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 204 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 54 <SV = 53> <Delay = 8.75>
ST_54 : Operation 205 [3/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 205 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 55 <SV = 54> <Delay = 8.75>
ST_55 : Operation 206 [2/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 206 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 56 <SV = 55> <Delay = 8.75>
ST_56 : Operation 207 [1/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 207 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 57 <SV = 56> <Delay = 8.75>
ST_57 : Operation 208 [1/1] (8.75ns)   --->   "%UART_addr_5_read_1 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_5)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 208 'read' 'UART_addr_5_read_1' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_57 : Operation 209 [1/1] (0.00ns)   --->   "%tmp_10 = trunc i32 %UART_addr_5_read_1 to i1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:183]   --->   Operation 209 'trunc' 'tmp_10' <Predicate = true> <Delay = 0.00>
ST_57 : Operation 210 [1/1] (0.00ns)   --->   "br i1 %tmp_10, label %6, label %._crit_edge5" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:184]   --->   Operation 210 'br' <Predicate = true> <Delay = 0.00>
ST_57 : Operation 211 [7/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 211 'readreq' 'UART_load_4_req' <Predicate = (tmp_10)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_57 : Operation 212 [1/1] (1.76ns)   --->   "store i14 0, i14* @cycle_count, align 2" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:188]   --->   Operation 212 'store' <Predicate = (tmp_10)> <Delay = 1.76>

State 58 <SV = 57> <Delay = 8.75>
ST_58 : Operation 213 [6/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 213 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 59 <SV = 58> <Delay = 8.75>
ST_59 : Operation 214 [5/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 214 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 60 <SV = 59> <Delay = 8.75>
ST_60 : Operation 215 [4/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 215 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 61 <SV = 60> <Delay = 8.75>
ST_61 : Operation 216 [3/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 216 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 62 <SV = 61> <Delay = 8.75>
ST_62 : Operation 217 [2/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 217 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 63 <SV = 62> <Delay = 8.75>
ST_63 : Operation 218 [1/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 218 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 64 <SV = 63> <Delay = 8.75>
ST_64 : Operation 219 [1/1] (8.75ns)   --->   "%UART_addr_6_read_1 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_6)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 219 'read' 'UART_addr_6_read_1' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_64 : Operation 220 [1/1] (0.00ns)   --->   "%tmp_11 = trunc i32 %UART_addr_6_read_1 to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 220 'trunc' 'tmp_11' <Predicate = true> <Delay = 0.00>
ST_64 : Operation 221 [1/1] (0.00ns)   --->   "%tmp_1 = zext i5 %NUM_BYTES_READ_load to i64" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 221 'zext' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_64 : Operation 222 [1/1] (0.00ns)   --->   "%OUT_addr = getelementptr i8* %OUT_r, i64 %tmp_1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 222 'getelementptr' 'OUT_addr' <Predicate = true> <Delay = 0.00>
ST_64 : Operation 223 [1/1] (8.75ns)   --->   "%OUT_addr_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 223 'writereq' 'OUT_addr_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 65 <SV = 64> <Delay = 8.75>
ST_65 : Operation 224 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_addr, i8 %tmp_11, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 224 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 66 <SV = 65> <Delay = 8.75>
ST_66 : Operation 225 [5/5] (8.75ns)   --->   "%OUT_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 225 'writeresp' 'OUT_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 67 <SV = 66> <Delay = 8.75>
ST_67 : Operation 226 [4/5] (8.75ns)   --->   "%OUT_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 226 'writeresp' 'OUT_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 68 <SV = 67> <Delay = 8.75>
ST_68 : Operation 227 [3/5] (8.75ns)   --->   "%OUT_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 227 'writeresp' 'OUT_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 69 <SV = 68> <Delay = 8.75>
ST_69 : Operation 228 [2/5] (8.75ns)   --->   "%OUT_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 228 'writeresp' 'OUT_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_69 : Operation 229 [1/1] (1.78ns)   --->   "%NUM_BYTES_READ_1 = add i5 1, %NUM_BYTES_READ_load" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:187]   --->   Operation 229 'add' 'NUM_BYTES_READ_1' <Predicate = true> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.81> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_69 : Operation 230 [1/1] (1.76ns)   --->   "store i5 %NUM_BYTES_READ_1, i5* %NUM_BYTES_READ" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:187]   --->   Operation 230 'store' <Predicate = true> <Delay = 1.76>

State 70 <SV = 69> <Delay = 8.75>
ST_70 : Operation 231 [1/5] (8.75ns)   --->   "%OUT_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:186]   --->   Operation 231 'writeresp' 'OUT_addr_resp' <Predicate = (tmp_5 & tmp_6 & tmp_10)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_70 : Operation 232 [1/1] (0.00ns)   --->   "br label %._crit_edge5" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:189]   --->   Operation 232 'br' <Predicate = (tmp_5 & tmp_6 & tmp_10)> <Delay = 0.00>
ST_70 : Operation 233 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ_load_1 = load i5* %NUM_BYTES_READ"   --->   Operation 233 'load' 'NUM_BYTES_READ_load_1' <Predicate = (tmp_5 & tmp_6)> <Delay = 0.00>
ST_70 : Operation 234 [1/1] (0.00ns)   --->   "%cycle_count_load = load i14* @cycle_count, align 2"   --->   Operation 234 'load' 'cycle_count_load' <Predicate = (tmp_5 & tmp_6)> <Delay = 0.00>
ST_70 : Operation 235 [1/1] (2.20ns)   --->   "%tmp_7 = icmp ugt i14 %cycle_count_load, -6384" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:190]   --->   Operation 235 'icmp' 'tmp_7' <Predicate = (tmp_5 & tmp_6)> <Delay = 2.20> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_70 : Operation 236 [1/1] (1.76ns)   --->   "br i1 %tmp_7, label %.loopexit.loopexit, label %7" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:190]   --->   Operation 236 'br' <Predicate = (tmp_5 & tmp_6)> <Delay = 1.76>
ST_70 : Operation 237 [1/1] (1.81ns)   --->   "%tmp_2 = add i14 %cycle_count_load, 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:194]   --->   Operation 237 'add' 'tmp_2' <Predicate = (tmp_5 & tmp_6 & !tmp_7)> <Delay = 1.81> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.81> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_70 : Operation 238 [1/1] (1.76ns)   --->   "store i14 %tmp_2, i14* @cycle_count, align 2" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:194]   --->   Operation 238 'store' <Predicate = (tmp_5 & tmp_6 & !tmp_7)> <Delay = 1.76>
ST_70 : Operation 239 [1/1] (0.00ns)   --->   "br label %.preheader" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:195]   --->   Operation 239 'br' <Predicate = (tmp_5 & tmp_6 & !tmp_7)> <Delay = 0.00>
ST_70 : Operation 240 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ_3_ph = phi i5 [ %NUM_BYTES_READ_load, %.preheader ], [ %NUM_BYTES_READ_load_1, %._crit_edge5 ]" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:187]   --->   Operation 240 'phi' 'NUM_BYTES_READ_3_ph' <Predicate = (tmp_5 & !tmp_6) | (tmp_5 & tmp_7)> <Delay = 0.00>
ST_70 : Operation 241 [1/1] (1.76ns)   --->   "br label %.loopexit"   --->   Operation 241 'br' <Predicate = (tmp_5 & !tmp_6) | (tmp_5 & tmp_7)> <Delay = 1.76>
ST_70 : Operation 242 [1/1] (0.00ns)   --->   "%OUT_addr_1 = getelementptr i8* %OUT_r, i64 26"   --->   Operation 242 'getelementptr' 'OUT_addr_1' <Predicate = (!tmp_5) | (!tmp_6) | (tmp_7)> <Delay = 0.00>
ST_70 : Operation 243 [1/1] (8.75ns)   --->   "%OUT_addr_1_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %OUT_addr_1, i32 2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:203]   --->   Operation 243 'writereq' 'OUT_addr_1_req' <Predicate = (!tmp_5) | (!tmp_6) | (tmp_7)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 71 <SV = 70> <Delay = 8.75>
ST_71 : Operation 244 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_addr_1, i8 69, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:203]   --->   Operation 244 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 72 <SV = 71> <Delay = 8.75>
ST_72 : Operation 245 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ_3 = phi i5 [ 0, %4 ], [ %NUM_BYTES_READ_3_ph, %.loopexit.loopexit ]" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:187]   --->   Operation 245 'phi' 'NUM_BYTES_READ_3' <Predicate = true> <Delay = 0.00>
ST_72 : Operation 246 [1/1] (0.00ns)   --->   "%tmp_3 = zext i5 %NUM_BYTES_READ_3 to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:204]   --->   Operation 246 'zext' 'tmp_3' <Predicate = true> <Delay = 0.00>
ST_72 : Operation 247 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_addr_1, i8 %tmp_3, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:204]   --->   Operation 247 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 73 <SV = 72> <Delay = 8.75>
ST_73 : Operation 248 [5/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:204]   --->   Operation 248 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 74 <SV = 73> <Delay = 8.75>
ST_74 : Operation 249 [4/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:204]   --->   Operation 249 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 75 <SV = 74> <Delay = 8.75>
ST_75 : Operation 250 [3/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:204]   --->   Operation 250 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 76 <SV = 75> <Delay = 8.75>
ST_76 : Operation 251 [2/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:204]   --->   Operation 251 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 77 <SV = 76> <Delay = 8.75>
ST_77 : Operation 252 [1/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:204]   --->   Operation 252 'writeresp' 'OUT_addr_1_resp' <Predicate = (calibrationSuccess_l & tmp_8)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_77 : Operation 253 [1/1] (0.00ns)   --->   "br label %._crit_edge4" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:206]   --->   Operation 253 'br' <Predicate = (calibrationSuccess_l & tmp_8)> <Delay = 0.00>
ST_77 : Operation 254 [1/1] (0.00ns)   --->   "br label %._crit_edge3" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:218]   --->   Operation 254 'br' <Predicate = (calibrationSuccess_l)> <Delay = 0.00>
ST_77 : Operation 255 [1/1] (0.00ns)   --->   "ret void" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:225]   --->   Operation 255 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Binding
============================================================
STG Binding: 
---------------- STG Properties BEGIN ----------------
- Is combinational: 0
- Is one-state seq: 0
- Is datapath-only: 0
- Is pipelined: 0
- Is top level: 1
Port [ Return ] is wired: 1; IO mode=ap_ctrl_hs:ce=0
Port [ UART]:  wired=1; compound=1; hidden=0; nouse=0; global=0; static=0; extern=0; dir=2; type=4; pingpong=0; private_global=0; IO mode=m_axi:ce=0
Port [ OUT_r]:  wired=1; compound=1; hidden=0; nouse=0; global=0; static=0; extern=0; dir=1; type=4; pingpong=0; private_global=0; IO mode=m_axi:ce=0
Port [ firstSample]:  wired=0; compound=0; hidden=1; nouse=0; global=1; static=1; extern=0; dir=2; type=0; pingpong=0; private_global=1; linkage=7; visibility=0; IO mode=ap_ovld:ce=0
Port [ calibrationSuccess]:  wired=0; compound=0; hidden=1; nouse=0; global=1; static=1; extern=0; dir=2; type=0; pingpong=0; private_global=1; linkage=7; visibility=0; IO mode=ap_ovld:ce=0
Port [ cycle_count]:  wired=0; compound=0; hidden=1; nouse=0; global=1; static=1; extern=0; dir=2; type=0; pingpong=0; private_global=1; linkage=7; visibility=0; IO mode=ap_ovld:ce=0
---------------- STG Properties END ------------------

---------------- Datapath Model BEGIN ----------------

<LifeTime>
<method=bitvector/>
StgValue_78           (specbitsmap  ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_79           (specbitsmap  ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_80           (spectopmodule) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_81           (specinterface) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_82           (specinterface) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_83           (specinterface) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_84           (specreset    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
firstSample_load      (load         ) [ 011111111111111111111111111110000000000000000000000000000000000000000000000000]
StgValue_86           (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr             (getelementptr) [ 001111111111111111111111111110000000000000000000000000000000000000000000000000]
UART_addr_req         (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_89           (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1           (getelementptr) [ 000111111111000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_req       (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_93           (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_2           (getelementptr) [ 000011111100000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_2_req       (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_98           (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3           (getelementptr) [ 000001111111110000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_req       (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_104          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_req6      (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_110          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_4           (getelementptr) [ 000000011111100000000000000000000000000000000000000000000000000000000000000000]
UART_addr_4_req       (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_resp        (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_118          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_req8      (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_resp      (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_125          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_2_resp      (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_resp      (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_resp7     (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_4_resp      (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_resp9     (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_load_req         (readreq      ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_read        (read         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
temp                  (trunc        ) [ 000000000000000000000010000000000000000000000000000000000000000000000000000000]
tmp                   (icmp         ) [ 000000000000000000000011111110000000000000000000000000000000000000000000000000]
StgValue_151          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_152          (store        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_req4        (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_154          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_resp5       (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_160          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_161          (store        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_162          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
calibrationSuccess_l  (load         ) [ 000000000000000000000000000011111111111111111111111111111111111111111111111111]
StgValue_164          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_5           (getelementptr) [ 000000000000000000000000000000111111111111111111111111111111111111111110000000]
UART_load_1_req       (readreq      ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_5_read      (read         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_8                 (trunc        ) [ 000000000000000000000000000000000000111111111111111111111111111111111111111111]
StgValue_175          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_6           (getelementptr) [ 000000000000000000000000000000000000011111111111111111111111111111111110000000]
UART_load_2_req       (readreq      ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_6_read      (read         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_9                 (trunc        ) [ 000000000000000000000000000000000000000000001000000000000000000000000000000000]
OUT_req               (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_187          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_5                 (icmp         ) [ 000000000000000000000000000000000000000000000111111111111111111111111110000000]
OUT_resp              (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_194          (br           ) [ 000000000000000000000000000000000000000000000000011111111111111111111111100000]
NUM_BYTES_READ        (alloca       ) [ 000000000000000000000000000000000000000000000000011111111111111111111110000000]
StgValue_196          (store        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_197          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_load   (load         ) [ 000000000000000000000000000000000000000000000000001111111111111111111110000000]
tmp_6                 (icmp         ) [ 000000000000000000000000000000000000000000000000001111111111111111111110000000]
StgValue_200          (br           ) [ 000000000000000000000000000000000000000000000000001111111111111111111110000000]
UART_load_3_req       (readreq      ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_5_read_1    (read         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_10                (trunc        ) [ 000000000000000000000000000000000000000000000000001111111111111111111110000000]
StgValue_210          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_212          (store        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_load_4_req       (readreq      ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_6_read_1    (read         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_11                (trunc        ) [ 000000000000000000000000000000000000000000000000000000000000000001000000000000]
tmp_1                 (zext         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr              (getelementptr) [ 000000000000000000000000000000000000000000000000001111111100000001111110000000]
OUT_addr_req          (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_224          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_1      (add          ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_230          (store        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr_resp         (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_232          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_load_1 (load         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
cycle_count_load      (load         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_7                 (icmp         ) [ 000000000000000000000000000000000000000000000000001111111111111111111110000000]
StgValue_236          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_2                 (add          ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_238          (store        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_239          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_3_ph   (phi          ) [ 000000000000000000000000000000000000000000000000010111111111111111111111100000]
StgValue_241          (br           ) [ 000000000000000000000000000000000000000000000000011111111111111111111111100000]
OUT_addr_1            (getelementptr) [ 000000000000000000000000000000000000000000000000000000000000000000000001111111]
OUT_addr_1_req        (writereq     ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_244          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_3      (phi          ) [ 000000000000000000000000000000000000000000000000000000000000000000000000100000]
tmp_3                 (zext         ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_247          (write        ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr_1_resp       (writeresp    ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_253          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_254          (br           ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_255          (ret          ) [ 000000000000000000000000000000000000000000000000000000000000000000000000000000]
</LifeTime>

<model>

<comp_list>
<comp id="0" class="1000" name="UART">
<pin_list>
<pin id="1" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="UART"/></StgValue>
</bind>
</comp>

<comp id="2" class="1000" name="OUT_r">
<pin_list>
<pin id="3" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="OUT_r"/></StgValue>
</bind>
</comp>

<comp id="4" class="1000" name="firstSample">
<pin_list>
<pin id="5" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="firstSample"/></StgValue>
</bind>
</comp>

<comp id="6" class="1000" name="calibrationSuccess">
<pin_list>
<pin id="7" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="calibrationSuccess"/></StgValue>
</bind>
</comp>

<comp id="8" class="1000" name="cycle_count">
<pin_list>
<pin id="9" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="cycle_count"/></StgValue>
</bind>
</comp>

<comp id="10" class="1001" name="const_10">
<pin_list>
<pin id="11" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecBitsMap"/></StgValue>
</bind>
</comp>

<comp id="12" class="1001" name="const_12">
<pin_list>
<pin id="13" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecTopModule"/></StgValue>
</bind>
</comp>

<comp id="14" class="1001" name="const_14">
<pin_list>
<pin id="15" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="AXI_UART_DRIVER_str"/></StgValue>
</bind>
</comp>

<comp id="16" class="1001" name="const_16">
<pin_list>
<pin id="17" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecInterface"/></StgValue>
</bind>
</comp>

<comp id="18" class="1001" name="const_18">
<pin_list>
<pin id="19" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="20" class="1001" name="const_20">
<pin_list>
<pin id="21" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str1"/></StgValue>
</bind>
</comp>

<comp id="22" class="1001" name="const_22">
<pin_list>
<pin id="23" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str"/></StgValue>
</bind>
</comp>

<comp id="24" class="1001" name="const_24">
<pin_list>
<pin id="25" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str2"/></StgValue>
</bind>
</comp>

<comp id="26" class="1001" name="const_26">
<pin_list>
<pin id="27" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str3"/></StgValue>
</bind>
</comp>

<comp id="28" class="1001" name="const_28">
<pin_list>
<pin id="29" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="30" class="1001" name="const_30">
<pin_list>
<pin id="31" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str4"/></StgValue>
</bind>
</comp>

<comp id="32" class="1001" name="const_32">
<pin_list>
<pin id="33" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str5"/></StgValue>
</bind>
</comp>

<comp id="34" class="1001" name="const_34">
<pin_list>
<pin id="35" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="36" class="1001" name="const_36">
<pin_list>
<pin id="37" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str6"/></StgValue>
</bind>
</comp>

<comp id="38" class="1001" name="const_38">
<pin_list>
<pin id="39" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecReset"/></StgValue>
</bind>
</comp>

<comp id="40" class="1001" name="const_40">
<pin_list>
<pin id="41" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="42" class="1001" name="const_42">
<pin_list>
<pin id="43" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="44" class="1001" name="const_44">
<pin_list>
<pin id="45" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteReq.m_axi.i32P"/></StgValue>
</bind>
</comp>

<comp id="46" class="1001" name="const_46">
<pin_list>
<pin id="47" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Write.m_axi.volatile.i32P"/></StgValue>
</bind>
</comp>

<comp id="48" class="1001" name="const_48">
<pin_list>
<pin id="49" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="50" class="1001" name="const_50">
<pin_list>
<pin id="51" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="52" class="1001" name="const_52">
<pin_list>
<pin id="53" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="54" class="1001" name="const_54">
<pin_list>
<pin id="55" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteResp.m_axi.i32P"/></StgValue>
</bind>
</comp>

<comp id="56" class="1001" name="const_56">
<pin_list>
<pin id="57" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="58" class="1001" name="const_58">
<pin_list>
<pin id="59" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="60" class="1001" name="const_60">
<pin_list>
<pin id="61" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="62" class="1001" name="const_62">
<pin_list>
<pin id="63" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="64" class="1001" name="const_64">
<pin_list>
<pin id="65" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="66" class="1001" name="const_66">
<pin_list>
<pin id="67" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="68" class="1001" name="const_68">
<pin_list>
<pin id="69" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_ReadReq.m_axi.i32P"/></StgValue>
</bind>
</comp>

<comp id="70" class="1001" name="const_70">
<pin_list>
<pin id="71" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Read.m_axi.volatile.i32P"/></StgValue>
</bind>
</comp>

<comp id="72" class="1001" name="const_72">
<pin_list>
<pin id="73" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="74" class="1001" name="const_74">
<pin_list>
<pin id="75" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="76" class="1001" name="const_76">
<pin_list>
<pin id="77" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="78" class="1001" name="const_78">
<pin_list>
<pin id="79" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="80" class="1001" name="const_80">
<pin_list>
<pin id="81" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteReq.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="82" class="1001" name="const_82">
<pin_list>
<pin id="83" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Write.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="84" class="1001" name="const_84">
<pin_list>
<pin id="85" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="86" class="1001" name="const_86">
<pin_list>
<pin id="87" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteResp.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="88" class="1001" name="const_88">
<pin_list>
<pin id="89" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="90" class="1001" name="const_90">
<pin_list>
<pin id="91" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="92" class="1001" name="const_92">
<pin_list>
<pin id="93" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="94" class="1001" name="const_94">
<pin_list>
<pin id="95" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="96" class="1001" name="const_96">
<pin_list>
<pin id="97" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="98" class="1001" name="const_98">
<pin_list>
<pin id="99" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="100" class="1001" name="const_100">
<pin_list>
<pin id="101" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="102" class="1001" name="const_102">
<pin_list>
<pin id="103" dir="1" index="0" bw="1" slack="23"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="104" class="1004" name="NUM_BYTES_READ_fu_104">
<pin_list>
<pin id="105" dir="0" index="0" bw="1" slack="0"/>
<pin id="106" dir="1" index="1" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="alloca(26) " fcode="alloca"/>
<opset="NUM_BYTES_READ/49 "/>
</bind>
</comp>

<comp id="108" class="1004" name="grp_writeresp_fu_108">
<pin_list>
<pin id="109" dir="0" index="0" bw="1" slack="0"/>
<pin id="110" dir="0" index="1" bw="32" slack="0"/>
<pin id="111" dir="0" index="2" bw="1" slack="0"/>
<pin id="112" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="readreq(1154) writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_req/1 UART_addr_resp/3 UART_load_req/14 UART_addr_req4/22 UART_addr_resp5/24 "/>
</bind>
</comp>

<comp id="115" class="1004" name="StgValue_89_write_fu_115">
<pin_list>
<pin id="116" dir="0" index="0" bw="0" slack="0"/>
<pin id="117" dir="0" index="1" bw="32" slack="1"/>
<pin id="118" dir="0" index="2" bw="8" slack="0"/>
<pin id="119" dir="0" index="3" bw="1" slack="0"/>
<pin id="120" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_89/2 "/>
</bind>
</comp>

<comp id="124" class="1004" name="grp_writeresp_fu_124">
<pin_list>
<pin id="125" dir="0" index="0" bw="1" slack="0"/>
<pin id="126" dir="0" index="1" bw="32" slack="0"/>
<pin id="127" dir="0" index="2" bw="1" slack="0"/>
<pin id="128" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_1_req/2 UART_addr_1_resp/4 UART_addr_1_req6/5 UART_addr_1_resp7/7 "/>
</bind>
</comp>

<comp id="132" class="1004" name="StgValue_93_write_fu_132">
<pin_list>
<pin id="133" dir="0" index="0" bw="0" slack="0"/>
<pin id="134" dir="0" index="1" bw="32" slack="1"/>
<pin id="135" dir="0" index="2" bw="9" slack="0"/>
<pin id="136" dir="0" index="3" bw="1" slack="0"/>
<pin id="137" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_93/3 "/>
</bind>
</comp>

<comp id="141" class="1004" name="grp_writeresp_fu_141">
<pin_list>
<pin id="142" dir="0" index="0" bw="1" slack="0"/>
<pin id="143" dir="0" index="1" bw="32" slack="0"/>
<pin id="144" dir="0" index="2" bw="1" slack="0"/>
<pin id="145" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_2_req/3 UART_addr_2_resp/5 "/>
</bind>
</comp>

<comp id="149" class="1004" name="StgValue_98_write_fu_149">
<pin_list>
<pin id="150" dir="0" index="0" bw="0" slack="0"/>
<pin id="151" dir="0" index="1" bw="32" slack="1"/>
<pin id="152" dir="0" index="2" bw="7" slack="0"/>
<pin id="153" dir="0" index="3" bw="1" slack="0"/>
<pin id="154" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_98/4 "/>
</bind>
</comp>

<comp id="158" class="1004" name="grp_writeresp_fu_158">
<pin_list>
<pin id="159" dir="0" index="0" bw="1" slack="0"/>
<pin id="160" dir="0" index="1" bw="32" slack="0"/>
<pin id="161" dir="0" index="2" bw="1" slack="0"/>
<pin id="162" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_3_req/4 UART_addr_3_resp/6 UART_addr_3_req8/7 UART_addr_3_resp9/9 "/>
</bind>
</comp>

<comp id="166" class="1004" name="StgValue_104_write_fu_166">
<pin_list>
<pin id="167" dir="0" index="0" bw="0" slack="0"/>
<pin id="168" dir="0" index="1" bw="32" slack="1"/>
<pin id="169" dir="0" index="2" bw="1" slack="0"/>
<pin id="170" dir="0" index="3" bw="1" slack="0"/>
<pin id="171" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_104/5 "/>
</bind>
</comp>

<comp id="176" class="1004" name="StgValue_110_write_fu_176">
<pin_list>
<pin id="177" dir="0" index="0" bw="0" slack="0"/>
<pin id="178" dir="0" index="1" bw="32" slack="4"/>
<pin id="179" dir="0" index="2" bw="6" slack="0"/>
<pin id="180" dir="0" index="3" bw="1" slack="0"/>
<pin id="181" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_110/6 "/>
</bind>
</comp>

<comp id="185" class="1004" name="grp_writeresp_fu_185">
<pin_list>
<pin id="186" dir="0" index="0" bw="1" slack="0"/>
<pin id="187" dir="0" index="1" bw="32" slack="0"/>
<pin id="188" dir="0" index="2" bw="1" slack="0"/>
<pin id="189" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_4_req/6 UART_addr_4_resp/8 "/>
</bind>
</comp>

<comp id="192" class="1004" name="StgValue_118_write_fu_192">
<pin_list>
<pin id="193" dir="0" index="0" bw="0" slack="0"/>
<pin id="194" dir="0" index="1" bw="32" slack="1"/>
<pin id="195" dir="0" index="2" bw="1" slack="0"/>
<pin id="196" dir="0" index="3" bw="1" slack="0"/>
<pin id="197" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_118/7 "/>
</bind>
</comp>

<comp id="202" class="1004" name="StgValue_125_write_fu_202">
<pin_list>
<pin id="203" dir="0" index="0" bw="0" slack="0"/>
<pin id="204" dir="0" index="1" bw="32" slack="4"/>
<pin id="205" dir="0" index="2" bw="1" slack="0"/>
<pin id="206" dir="0" index="3" bw="1" slack="0"/>
<pin id="207" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_125/8 "/>
</bind>
</comp>

<comp id="212" class="1004" name="UART_addr_read_read_fu_212">
<pin_list>
<pin id="213" dir="0" index="0" bw="32" slack="0"/>
<pin id="214" dir="0" index="1" bw="32" slack="20"/>
<pin id="215" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="UART_addr_read/21 "/>
</bind>
</comp>

<comp id="217" class="1004" name="StgValue_154_write_fu_217">
<pin_list>
<pin id="218" dir="0" index="0" bw="0" slack="0"/>
<pin id="219" dir="0" index="1" bw="32" slack="22"/>
<pin id="220" dir="0" index="2" bw="1" slack="0"/>
<pin id="221" dir="0" index="3" bw="1" slack="0"/>
<pin id="222" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_154/23 "/>
</bind>
</comp>

<comp id="226" class="1004" name="grp_readreq_fu_226">
<pin_list>
<pin id="227" dir="0" index="0" bw="1" slack="0"/>
<pin id="228" dir="0" index="1" bw="32" slack="0"/>
<pin id="229" dir="0" index="2" bw="1" slack="0"/>
<pin id="230" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="readreq(1154) " fcode="readreq"/>
<opset="UART_load_1_req/29 UART_load_3_req/50 "/>
</bind>
</comp>

<comp id="233" class="1004" name="grp_read_fu_233">
<pin_list>
<pin id="234" dir="0" index="0" bw="32" slack="0"/>
<pin id="235" dir="0" index="1" bw="32" slack="7"/>
<pin id="236" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="UART_addr_5_read/36 UART_addr_5_read_1/57 "/>
</bind>
</comp>

<comp id="238" class="1004" name="grp_readreq_fu_238">
<pin_list>
<pin id="239" dir="0" index="0" bw="1" slack="0"/>
<pin id="240" dir="0" index="1" bw="32" slack="0"/>
<pin id="241" dir="0" index="2" bw="1" slack="0"/>
<pin id="242" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="readreq(1154) " fcode="readreq"/>
<opset="UART_load_2_req/36 UART_load_4_req/57 "/>
</bind>
</comp>

<comp id="245" class="1004" name="grp_read_fu_245">
<pin_list>
<pin id="246" dir="0" index="0" bw="32" slack="0"/>
<pin id="247" dir="0" index="1" bw="32" slack="7"/>
<pin id="248" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="UART_addr_6_read/43 UART_addr_6_read_1/64 "/>
</bind>
</comp>

<comp id="250" class="1004" name="grp_writeresp_fu_250">
<pin_list>
<pin id="251" dir="0" index="0" bw="1" slack="0"/>
<pin id="252" dir="0" index="1" bw="8" slack="0"/>
<pin id="253" dir="0" index="2" bw="1" slack="0"/>
<pin id="254" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="OUT_req/43 OUT_resp/45 "/>
</bind>
</comp>

<comp id="258" class="1004" name="StgValue_187_write_fu_258">
<pin_list>
<pin id="259" dir="0" index="0" bw="0" slack="0"/>
<pin id="260" dir="0" index="1" bw="8" slack="0"/>
<pin id="261" dir="0" index="2" bw="8" slack="1"/>
<pin id="262" dir="0" index="3" bw="1" slack="0"/>
<pin id="263" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_187/44 "/>
</bind>
</comp>

<comp id="268" class="1004" name="grp_writeresp_fu_268">
<pin_list>
<pin id="269" dir="0" index="0" bw="1" slack="0"/>
<pin id="270" dir="0" index="1" bw="8" slack="0"/>
<pin id="271" dir="0" index="2" bw="1" slack="0"/>
<pin id="272" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="OUT_addr_req/64 OUT_addr_resp/66 "/>
</bind>
</comp>

<comp id="275" class="1004" name="StgValue_224_write_fu_275">
<pin_list>
<pin id="276" dir="0" index="0" bw="0" slack="0"/>
<pin id="277" dir="0" index="1" bw="8" slack="1"/>
<pin id="278" dir="0" index="2" bw="8" slack="1"/>
<pin id="279" dir="0" index="3" bw="1" slack="0"/>
<pin id="280" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_224/65 "/>
</bind>
</comp>

<comp id="284" class="1004" name="grp_writeresp_fu_284">
<pin_list>
<pin id="285" dir="0" index="0" bw="1" slack="0"/>
<pin id="286" dir="0" index="1" bw="8" slack="0"/>
<pin id="287" dir="0" index="2" bw="3" slack="0"/>
<pin id="288" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="OUT_addr_1_req/70 OUT_addr_1_resp/73 "/>
</bind>
</comp>

<comp id="291" class="1004" name="StgValue_244_write_fu_291">
<pin_list>
<pin id="292" dir="0" index="0" bw="0" slack="0"/>
<pin id="293" dir="0" index="1" bw="8" slack="1"/>
<pin id="294" dir="0" index="2" bw="8" slack="0"/>
<pin id="295" dir="0" index="3" bw="1" slack="0"/>
<pin id="296" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_244/71 "/>
</bind>
</comp>

<comp id="300" class="1004" name="StgValue_247_write_fu_300">
<pin_list>
<pin id="301" dir="0" index="0" bw="0" slack="0"/>
<pin id="302" dir="0" index="1" bw="8" slack="2"/>
<pin id="303" dir="0" index="2" bw="5" slack="0"/>
<pin id="304" dir="0" index="3" bw="1" slack="0"/>
<pin id="305" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_247/72 "/>
</bind>
</comp>

<comp id="309" class="1005" name="NUM_BYTES_READ_3_ph_reg_309">
<pin_list>
<pin id="310" dir="0" index="0" bw="5" slack="2"/>
<pin id="311" dir="1" index="1" bw="5" slack="2"/>
</pin_list>
<bind>
<opset="NUM_BYTES_READ_3_ph (phireg) "/>
</bind>
</comp>

<comp id="312" class="1004" name="NUM_BYTES_READ_3_ph_phi_fu_312">
<pin_list>
<pin id="313" dir="0" index="0" bw="5" slack="20"/>
<pin id="314" dir="0" index="1" bw="0" slack="2147483647"/>
<pin id="315" dir="0" index="2" bw="5" slack="0"/>
<pin id="316" dir="0" index="3" bw="0" slack="2147483647"/>
<pin id="317" dir="1" index="4" bw="5" slack="2"/>
</pin_list>
<bind>
<opcode="phi(47) " fcode="phi"/>
<opset="NUM_BYTES_READ_3_ph/70 "/>
</bind>
</comp>

<comp id="319" class="1005" name="NUM_BYTES_READ_3_reg_319">
<pin_list>
<pin id="320" dir="0" index="0" bw="5" slack="23"/>
<pin id="321" dir="1" index="1" bw="5" slack="23"/>
</pin_list>
<bind>
<opset="NUM_BYTES_READ_3 (phireg) "/>
</bind>
</comp>

<comp id="323" class="1004" name="NUM_BYTES_READ_3_phi_fu_323">
<pin_list>
<pin id="324" dir="0" index="0" bw="1" slack="23"/>
<pin id="325" dir="0" index="1" bw="0" slack="2147483647"/>
<pin id="326" dir="0" index="2" bw="5" slack="2"/>
<pin id="327" dir="0" index="3" bw="0" slack="2147483647"/>
<pin id="328" dir="1" index="4" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="phi(47) " fcode="phi"/>
<opset="NUM_BYTES_READ_3/72 "/>
</bind>
</comp>

<comp id="331" class="1004" name="grp_fu_331">
<pin_list>
<pin id="332" dir="0" index="0" bw="32" slack="0"/>
<pin id="333" dir="0" index="1" bw="32" slack="0"/>
<pin id="334" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_2/3 UART_addr_6/36 "/>
</bind>
</comp>

<comp id="339" class="1004" name="grp_load_fu_339">
<pin_list>
<pin id="340" dir="0" index="0" bw="5" slack="1"/>
<pin id="341" dir="1" index="1" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="NUM_BYTES_READ_load/50 NUM_BYTES_READ_load_1/70 "/>
</bind>
</comp>

<comp id="343" class="1005" name="reg_343">
<pin_list>
<pin id="344" dir="0" index="0" bw="32" slack="1"/>
<pin id="345" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_2 UART_addr_6 "/>
</bind>
</comp>

<comp id="351" class="1004" name="firstSample_load_load_fu_351">
<pin_list>
<pin id="352" dir="0" index="0" bw="1" slack="0"/>
<pin id="353" dir="1" index="1" bw="1" slack="27"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="firstSample_load/1 "/>
</bind>
</comp>

<comp id="355" class="1004" name="UART_addr_fu_355">
<pin_list>
<pin id="356" dir="0" index="0" bw="32" slack="0"/>
<pin id="357" dir="0" index="1" bw="32" slack="0"/>
<pin id="358" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr/1 "/>
</bind>
</comp>

<comp id="362" class="1004" name="UART_addr_1_fu_362">
<pin_list>
<pin id="363" dir="0" index="0" bw="32" slack="0"/>
<pin id="364" dir="0" index="1" bw="32" slack="0"/>
<pin id="365" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_1/2 "/>
</bind>
</comp>

<comp id="369" class="1004" name="UART_addr_3_fu_369">
<pin_list>
<pin id="370" dir="0" index="0" bw="32" slack="0"/>
<pin id="371" dir="0" index="1" bw="32" slack="0"/>
<pin id="372" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_3/4 "/>
</bind>
</comp>

<comp id="376" class="1004" name="UART_addr_4_fu_376">
<pin_list>
<pin id="377" dir="0" index="0" bw="32" slack="0"/>
<pin id="378" dir="0" index="1" bw="32" slack="0"/>
<pin id="379" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_4/6 "/>
</bind>
</comp>

<comp id="383" class="1004" name="temp_fu_383">
<pin_list>
<pin id="384" dir="0" index="0" bw="32" slack="0"/>
<pin id="385" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="temp/21 "/>
</bind>
</comp>

<comp id="387" class="1004" name="tmp_fu_387">
<pin_list>
<pin id="388" dir="0" index="0" bw="8" slack="1"/>
<pin id="389" dir="0" index="1" bw="8" slack="0"/>
<pin id="390" dir="1" index="2" bw="1" slack="6"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp/22 "/>
</bind>
</comp>

<comp id="392" class="1004" name="StgValue_152_store_fu_392">
<pin_list>
<pin id="393" dir="0" index="0" bw="1" slack="0"/>
<pin id="394" dir="0" index="1" bw="1" slack="0"/>
<pin id="395" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_152/22 "/>
</bind>
</comp>

<comp id="398" class="1004" name="StgValue_161_store_fu_398">
<pin_list>
<pin id="399" dir="0" index="0" bw="1" slack="0"/>
<pin id="400" dir="0" index="1" bw="1" slack="0"/>
<pin id="401" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_161/28 "/>
</bind>
</comp>

<comp id="404" class="1004" name="calibrationSuccess_l_load_fu_404">
<pin_list>
<pin id="405" dir="0" index="0" bw="1" slack="0"/>
<pin id="406" dir="1" index="1" bw="1" slack="49"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="calibrationSuccess_l/28 "/>
</bind>
</comp>

<comp id="408" class="1004" name="UART_addr_5_fu_408">
<pin_list>
<pin id="409" dir="0" index="0" bw="32" slack="0"/>
<pin id="410" dir="0" index="1" bw="32" slack="0"/>
<pin id="411" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_5/29 "/>
</bind>
</comp>

<comp id="415" class="1004" name="tmp_8_fu_415">
<pin_list>
<pin id="416" dir="0" index="0" bw="32" slack="0"/>
<pin id="417" dir="1" index="1" bw="1" slack="41"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_8/36 "/>
</bind>
</comp>

<comp id="419" class="1004" name="tmp_9_fu_419">
<pin_list>
<pin id="420" dir="0" index="0" bw="32" slack="0"/>
<pin id="421" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_9/43 "/>
</bind>
</comp>

<comp id="423" class="1004" name="tmp_5_fu_423">
<pin_list>
<pin id="424" dir="0" index="0" bw="8" slack="1"/>
<pin id="425" dir="0" index="1" bw="8" slack="0"/>
<pin id="426" dir="1" index="2" bw="1" slack="5"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp_5/44 "/>
</bind>
</comp>

<comp id="428" class="1004" name="StgValue_196_store_fu_428">
<pin_list>
<pin id="429" dir="0" index="0" bw="1" slack="0"/>
<pin id="430" dir="0" index="1" bw="5" slack="0"/>
<pin id="431" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_196/49 "/>
</bind>
</comp>

<comp id="433" class="1004" name="tmp_6_fu_433">
<pin_list>
<pin id="434" dir="0" index="0" bw="5" slack="0"/>
<pin id="435" dir="0" index="1" bw="5" slack="0"/>
<pin id="436" dir="1" index="2" bw="1" slack="20"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp_6/50 "/>
</bind>
</comp>

<comp id="439" class="1004" name="tmp_10_fu_439">
<pin_list>
<pin id="440" dir="0" index="0" bw="32" slack="0"/>
<pin id="441" dir="1" index="1" bw="1" slack="13"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_10/57 "/>
</bind>
</comp>

<comp id="443" class="1004" name="StgValue_212_store_fu_443">
<pin_list>
<pin id="444" dir="0" index="0" bw="1" slack="0"/>
<pin id="445" dir="0" index="1" bw="14" slack="0"/>
<pin id="446" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_212/57 "/>
</bind>
</comp>

<comp id="449" class="1004" name="tmp_11_fu_449">
<pin_list>
<pin id="450" dir="0" index="0" bw="32" slack="0"/>
<pin id="451" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_11/64 "/>
</bind>
</comp>

<comp id="453" class="1004" name="tmp_1_fu_453">
<pin_list>
<pin id="454" dir="0" index="0" bw="5" slack="14"/>
<pin id="455" dir="1" index="1" bw="64" slack="0"/>
</pin_list>
<bind>
<opcode="zext(34) " fcode="zext"/>
<opset="tmp_1/64 "/>
</bind>
</comp>

<comp id="456" class="1004" name="OUT_addr_fu_456">
<pin_list>
<pin id="457" dir="0" index="0" bw="32" slack="0"/>
<pin id="458" dir="0" index="1" bw="32" slack="0"/>
<pin id="459" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="OUT_addr/64 "/>
</bind>
</comp>

<comp id="463" class="1004" name="NUM_BYTES_READ_1_fu_463">
<pin_list>
<pin id="464" dir="0" index="0" bw="1" slack="0"/>
<pin id="465" dir="0" index="1" bw="5" slack="19"/>
<pin id="466" dir="1" index="2" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="add(8) " fcode="add"/>
<opset="NUM_BYTES_READ_1/69 "/>
</bind>
</comp>

<comp id="468" class="1004" name="StgValue_230_store_fu_468">
<pin_list>
<pin id="469" dir="0" index="0" bw="5" slack="0"/>
<pin id="470" dir="0" index="1" bw="5" slack="20"/>
<pin id="471" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_230/69 "/>
</bind>
</comp>

<comp id="473" class="1004" name="cycle_count_load_load_fu_473">
<pin_list>
<pin id="474" dir="0" index="0" bw="14" slack="0"/>
<pin id="475" dir="1" index="1" bw="14" slack="0"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="cycle_count_load/70 "/>
</bind>
</comp>

<comp id="477" class="1004" name="tmp_7_fu_477">
<pin_list>
<pin id="478" dir="0" index="0" bw="14" slack="0"/>
<pin id="479" dir="0" index="1" bw="14" slack="0"/>
<pin id="480" dir="1" index="2" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp_7/70 "/>
</bind>
</comp>

<comp id="483" class="1004" name="tmp_2_fu_483">
<pin_list>
<pin id="484" dir="0" index="0" bw="14" slack="0"/>
<pin id="485" dir="0" index="1" bw="1" slack="0"/>
<pin id="486" dir="1" index="2" bw="14" slack="0"/>
</pin_list>
<bind>
<opcode="add(8) " fcode="add"/>
<opset="tmp_2/70 "/>
</bind>
</comp>

<comp id="489" class="1004" name="StgValue_238_store_fu_489">
<pin_list>
<pin id="490" dir="0" index="0" bw="14" slack="0"/>
<pin id="491" dir="0" index="1" bw="14" slack="0"/>
<pin id="492" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_238/70 "/>
</bind>
</comp>

<comp id="495" class="1004" name="OUT_addr_1_fu_495">
<pin_list>
<pin id="496" dir="0" index="0" bw="32" slack="0"/>
<pin id="497" dir="0" index="1" bw="32" slack="0"/>
<pin id="498" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="OUT_addr_1/70 "/>
</bind>
</comp>

<comp id="502" class="1004" name="tmp_3_fu_502">
<pin_list>
<pin id="503" dir="0" index="0" bw="5" slack="0"/>
<pin id="504" dir="1" index="1" bw="8" slack="0"/>
</pin_list>
<bind>
<opcode="zext(34) " fcode="zext"/>
<opset="tmp_3/72 "/>
</bind>
</comp>

<comp id="507" class="1005" name="firstSample_load_reg_507">
<pin_list>
<pin id="508" dir="0" index="0" bw="1" slack="27"/>
<pin id="509" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="firstSample_load "/>
</bind>
</comp>

<comp id="511" class="1005" name="UART_addr_reg_511">
<pin_list>
<pin id="512" dir="0" index="0" bw="32" slack="1"/>
<pin id="513" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr "/>
</bind>
</comp>

<comp id="519" class="1005" name="UART_addr_1_reg_519">
<pin_list>
<pin id="520" dir="0" index="0" bw="32" slack="1"/>
<pin id="521" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_1 "/>
</bind>
</comp>

<comp id="526" class="1005" name="UART_addr_3_reg_526">
<pin_list>
<pin id="527" dir="0" index="0" bw="32" slack="1"/>
<pin id="528" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_3 "/>
</bind>
</comp>

<comp id="533" class="1005" name="UART_addr_4_reg_533">
<pin_list>
<pin id="534" dir="0" index="0" bw="32" slack="1"/>
<pin id="535" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_4 "/>
</bind>
</comp>

<comp id="539" class="1005" name="temp_reg_539">
<pin_list>
<pin id="540" dir="0" index="0" bw="8" slack="1"/>
<pin id="541" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="temp "/>
</bind>
</comp>

<comp id="544" class="1005" name="tmp_reg_544">
<pin_list>
<pin id="545" dir="0" index="0" bw="1" slack="6"/>
<pin id="546" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp "/>
</bind>
</comp>

<comp id="548" class="1005" name="calibrationSuccess_l_reg_548">
<pin_list>
<pin id="549" dir="0" index="0" bw="1" slack="49"/>
<pin id="550" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="calibrationSuccess_l "/>
</bind>
</comp>

<comp id="552" class="1005" name="UART_addr_5_reg_552">
<pin_list>
<pin id="553" dir="0" index="0" bw="32" slack="1"/>
<pin id="554" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_5 "/>
</bind>
</comp>

<comp id="558" class="1005" name="tmp_8_reg_558">
<pin_list>
<pin id="559" dir="0" index="0" bw="1" slack="41"/>
<pin id="560" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp_8 "/>
</bind>
</comp>

<comp id="562" class="1005" name="tmp_9_reg_562">
<pin_list>
<pin id="563" dir="0" index="0" bw="8" slack="1"/>
<pin id="564" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="tmp_9 "/>
</bind>
</comp>

<comp id="568" class="1005" name="tmp_5_reg_568">
<pin_list>
<pin id="569" dir="0" index="0" bw="1" slack="5"/>
<pin id="570" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp_5 "/>
</bind>
</comp>

<comp id="572" class="1005" name="NUM_BYTES_READ_reg_572">
<pin_list>
<pin id="573" dir="0" index="0" bw="5" slack="0"/>
<pin id="574" dir="1" index="1" bw="5" slack="0"/>
</pin_list>
<bind>
<opset="NUM_BYTES_READ "/>
</bind>
</comp>

<comp id="579" class="1005" name="NUM_BYTES_READ_load_reg_579">
<pin_list>
<pin id="580" dir="0" index="0" bw="5" slack="14"/>
<pin id="581" dir="1" index="1" bw="5" slack="14"/>
</pin_list>
<bind>
<opset="NUM_BYTES_READ_load "/>
</bind>
</comp>

<comp id="586" class="1005" name="tmp_6_reg_586">
<pin_list>
<pin id="587" dir="0" index="0" bw="1" slack="20"/>
<pin id="588" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp_6 "/>
</bind>
</comp>

<comp id="590" class="1005" name="tmp_10_reg_590">
<pin_list>
<pin id="591" dir="0" index="0" bw="1" slack="13"/>
<pin id="592" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp_10 "/>
</bind>
</comp>

<comp id="594" class="1005" name="tmp_11_reg_594">
<pin_list>
<pin id="595" dir="0" index="0" bw="8" slack="1"/>
<pin id="596" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="tmp_11 "/>
</bind>
</comp>

<comp id="599" class="1005" name="OUT_addr_reg_599">
<pin_list>
<pin id="600" dir="0" index="0" bw="8" slack="1"/>
<pin id="601" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="OUT_addr "/>
</bind>
</comp>

<comp id="608" class="1005" name="OUT_addr_1_reg_608">
<pin_list>
<pin id="609" dir="0" index="0" bw="8" slack="1"/>
<pin id="610" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="OUT_addr_1 "/>
</bind>
</comp>

</comp_list>

<net_list>
<net id="107"><net_src comp="40" pin="0"/><net_sink comp="104" pin=0"/></net>

<net id="113"><net_src comp="44" pin="0"/><net_sink comp="108" pin=0"/></net>

<net id="114"><net_src comp="40" pin="0"/><net_sink comp="108" pin=2"/></net>

<net id="121"><net_src comp="46" pin="0"/><net_sink comp="115" pin=0"/></net>

<net id="122"><net_src comp="48" pin="0"/><net_sink comp="115" pin=2"/></net>

<net id="123"><net_src comp="50" pin="0"/><net_sink comp="115" pin=3"/></net>

<net id="129"><net_src comp="44" pin="0"/><net_sink comp="124" pin=0"/></net>

<net id="130"><net_src comp="40" pin="0"/><net_sink comp="124" pin=2"/></net>

<net id="131"><net_src comp="54" pin="0"/><net_sink comp="108" pin=0"/></net>

<net id="138"><net_src comp="46" pin="0"/><net_sink comp="132" pin=0"/></net>

<net id="139"><net_src comp="56" pin="0"/><net_sink comp="132" pin=2"/></net>

<net id="140"><net_src comp="50" pin="0"/><net_sink comp="132" pin=3"/></net>

<net id="146"><net_src comp="44" pin="0"/><net_sink comp="141" pin=0"/></net>

<net id="147"><net_src comp="40" pin="0"/><net_sink comp="141" pin=2"/></net>

<net id="148"><net_src comp="54" pin="0"/><net_sink comp="124" pin=0"/></net>

<net id="155"><net_src comp="46" pin="0"/><net_sink comp="149" pin=0"/></net>

<net id="156"><net_src comp="60" pin="0"/><net_sink comp="149" pin=2"/></net>

<net id="157"><net_src comp="50" pin="0"/><net_sink comp="149" pin=3"/></net>

<net id="163"><net_src comp="44" pin="0"/><net_sink comp="158" pin=0"/></net>

<net id="164"><net_src comp="40" pin="0"/><net_sink comp="158" pin=2"/></net>

<net id="165"><net_src comp="54" pin="0"/><net_sink comp="141" pin=0"/></net>

<net id="172"><net_src comp="46" pin="0"/><net_sink comp="166" pin=0"/></net>

<net id="173"><net_src comp="18" pin="0"/><net_sink comp="166" pin=2"/></net>

<net id="174"><net_src comp="50" pin="0"/><net_sink comp="166" pin=3"/></net>

<net id="175"><net_src comp="54" pin="0"/><net_sink comp="158" pin=0"/></net>

<net id="182"><net_src comp="46" pin="0"/><net_sink comp="176" pin=0"/></net>

<net id="183"><net_src comp="64" pin="0"/><net_sink comp="176" pin=2"/></net>

<net id="184"><net_src comp="50" pin="0"/><net_sink comp="176" pin=3"/></net>

<net id="190"><net_src comp="44" pin="0"/><net_sink comp="185" pin=0"/></net>

<net id="191"><net_src comp="40" pin="0"/><net_sink comp="185" pin=2"/></net>

<net id="198"><net_src comp="46" pin="0"/><net_sink comp="192" pin=0"/></net>

<net id="199"><net_src comp="40" pin="0"/><net_sink comp="192" pin=2"/></net>

<net id="200"><net_src comp="50" pin="0"/><net_sink comp="192" pin=3"/></net>

<net id="201"><net_src comp="54" pin="0"/><net_sink comp="185" pin=0"/></net>

<net id="208"><net_src comp="46" pin="0"/><net_sink comp="202" pin=0"/></net>

<net id="209"><net_src comp="40" pin="0"/><net_sink comp="202" pin=2"/></net>

<net id="210"><net_src comp="50" pin="0"/><net_sink comp="202" pin=3"/></net>

<net id="211"><net_src comp="68" pin="0"/><net_sink comp="108" pin=0"/></net>

<net id="216"><net_src comp="70" pin="0"/><net_sink comp="212" pin=0"/></net>

<net id="223"><net_src comp="46" pin="0"/><net_sink comp="217" pin=0"/></net>

<net id="224"><net_src comp="18" pin="0"/><net_sink comp="217" pin=2"/></net>

<net id="225"><net_src comp="50" pin="0"/><net_sink comp="217" pin=3"/></net>

<net id="231"><net_src comp="68" pin="0"/><net_sink comp="226" pin=0"/></net>

<net id="232"><net_src comp="40" pin="0"/><net_sink comp="226" pin=2"/></net>

<net id="237"><net_src comp="70" pin="0"/><net_sink comp="233" pin=0"/></net>

<net id="243"><net_src comp="68" pin="0"/><net_sink comp="238" pin=0"/></net>

<net id="244"><net_src comp="40" pin="0"/><net_sink comp="238" pin=2"/></net>

<net id="249"><net_src comp="70" pin="0"/><net_sink comp="245" pin=0"/></net>

<net id="255"><net_src comp="80" pin="0"/><net_sink comp="250" pin=0"/></net>

<net id="256"><net_src comp="2" pin="0"/><net_sink comp="250" pin=1"/></net>

<net id="257"><net_src comp="40" pin="0"/><net_sink comp="250" pin=2"/></net>

<net id="264"><net_src comp="82" pin="0"/><net_sink comp="258" pin=0"/></net>

<net id="265"><net_src comp="2" pin="0"/><net_sink comp="258" pin=1"/></net>

<net id="266"><net_src comp="74" pin="0"/><net_sink comp="258" pin=3"/></net>

<net id="267"><net_src comp="86" pin="0"/><net_sink comp="250" pin=0"/></net>

<net id="273"><net_src comp="80" pin="0"/><net_sink comp="268" pin=0"/></net>

<net id="274"><net_src comp="40" pin="0"/><net_sink comp="268" pin=2"/></net>

<net id="281"><net_src comp="82" pin="0"/><net_sink comp="275" pin=0"/></net>

<net id="282"><net_src comp="74" pin="0"/><net_sink comp="275" pin=3"/></net>

<net id="283"><net_src comp="86" pin="0"/><net_sink comp="268" pin=0"/></net>

<net id="289"><net_src comp="80" pin="0"/><net_sink comp="284" pin=0"/></net>

<net id="290"><net_src comp="100" pin="0"/><net_sink comp="284" pin=2"/></net>

<net id="297"><net_src comp="82" pin="0"/><net_sink comp="291" pin=0"/></net>

<net id="298"><net_src comp="72" pin="0"/><net_sink comp="291" pin=2"/></net>

<net id="299"><net_src comp="74" pin="0"/><net_sink comp="291" pin=3"/></net>

<net id="306"><net_src comp="82" pin="0"/><net_sink comp="300" pin=0"/></net>

<net id="307"><net_src comp="74" pin="0"/><net_sink comp="300" pin=3"/></net>

<net id="308"><net_src comp="86" pin="0"/><net_sink comp="284" pin=0"/></net>

<net id="318"><net_src comp="312" pin="4"/><net_sink comp="309" pin=0"/></net>

<net id="322"><net_src comp="102" pin="0"/><net_sink comp="319" pin=0"/></net>

<net id="329"><net_src comp="319" pin="1"/><net_sink comp="323" pin=0"/></net>

<net id="330"><net_src comp="309" pin="1"/><net_sink comp="323" pin=2"/></net>

<net id="335"><net_src comp="0" pin="0"/><net_sink comp="331" pin=0"/></net>

<net id="336"><net_src comp="58" pin="0"/><net_sink comp="331" pin=1"/></net>

<net id="337"><net_src comp="331" pin="2"/><net_sink comp="141" pin=1"/></net>

<net id="338"><net_src comp="331" pin="2"/><net_sink comp="238" pin=1"/></net>

<net id="342"><net_src comp="339" pin="1"/><net_sink comp="312" pin=2"/></net>

<net id="346"><net_src comp="331" pin="2"/><net_sink comp="343" pin=0"/></net>

<net id="347"><net_src comp="343" pin="1"/><net_sink comp="149" pin=1"/></net>

<net id="348"><net_src comp="343" pin="1"/><net_sink comp="141" pin=1"/></net>

<net id="349"><net_src comp="343" pin="1"/><net_sink comp="238" pin=1"/></net>

<net id="350"><net_src comp="343" pin="1"/><net_sink comp="245" pin=1"/></net>

<net id="354"><net_src comp="4" pin="0"/><net_sink comp="351" pin=0"/></net>

<net id="359"><net_src comp="0" pin="0"/><net_sink comp="355" pin=0"/></net>

<net id="360"><net_src comp="42" pin="0"/><net_sink comp="355" pin=1"/></net>

<net id="361"><net_src comp="355" pin="2"/><net_sink comp="108" pin=1"/></net>

<net id="366"><net_src comp="0" pin="0"/><net_sink comp="362" pin=0"/></net>

<net id="367"><net_src comp="52" pin="0"/><net_sink comp="362" pin=1"/></net>

<net id="368"><net_src comp="362" pin="2"/><net_sink comp="124" pin=1"/></net>

<net id="373"><net_src comp="0" pin="0"/><net_sink comp="369" pin=0"/></net>

<net id="374"><net_src comp="62" pin="0"/><net_sink comp="369" pin=1"/></net>

<net id="375"><net_src comp="369" pin="2"/><net_sink comp="158" pin=1"/></net>

<net id="380"><net_src comp="0" pin="0"/><net_sink comp="376" pin=0"/></net>

<net id="381"><net_src comp="66" pin="0"/><net_sink comp="376" pin=1"/></net>

<net id="382"><net_src comp="376" pin="2"/><net_sink comp="185" pin=1"/></net>

<net id="386"><net_src comp="212" pin="2"/><net_sink comp="383" pin=0"/></net>

<net id="391"><net_src comp="72" pin="0"/><net_sink comp="387" pin=1"/></net>

<net id="396"><net_src comp="74" pin="0"/><net_sink comp="392" pin=0"/></net>

<net id="397"><net_src comp="6" pin="0"/><net_sink comp="392" pin=1"/></net>

<net id="402"><net_src comp="76" pin="0"/><net_sink comp="398" pin=0"/></net>

<net id="403"><net_src comp="4" pin="0"/><net_sink comp="398" pin=1"/></net>

<net id="407"><net_src comp="6" pin="0"/><net_sink comp="404" pin=0"/></net>

<net id="412"><net_src comp="0" pin="0"/><net_sink comp="408" pin=0"/></net>

<net id="413"><net_src comp="78" pin="0"/><net_sink comp="408" pin=1"/></net>

<net id="414"><net_src comp="408" pin="2"/><net_sink comp="226" pin=1"/></net>

<net id="418"><net_src comp="233" pin="2"/><net_sink comp="415" pin=0"/></net>

<net id="422"><net_src comp="245" pin="2"/><net_sink comp="419" pin=0"/></net>

<net id="427"><net_src comp="84" pin="0"/><net_sink comp="423" pin=1"/></net>

<net id="432"><net_src comp="88" pin="0"/><net_sink comp="428" pin=0"/></net>

<net id="437"><net_src comp="339" pin="1"/><net_sink comp="433" pin=0"/></net>

<net id="438"><net_src comp="90" pin="0"/><net_sink comp="433" pin=1"/></net>

<net id="442"><net_src comp="233" pin="2"/><net_sink comp="439" pin=0"/></net>

<net id="447"><net_src comp="92" pin="0"/><net_sink comp="443" pin=0"/></net>

<net id="448"><net_src comp="8" pin="0"/><net_sink comp="443" pin=1"/></net>

<net id="452"><net_src comp="245" pin="2"/><net_sink comp="449" pin=0"/></net>

<net id="460"><net_src comp="2" pin="0"/><net_sink comp="456" pin=0"/></net>

<net id="461"><net_src comp="453" pin="1"/><net_sink comp="456" pin=1"/></net>

<net id="462"><net_src comp="456" pin="2"/><net_sink comp="268" pin=1"/></net>

<net id="467"><net_src comp="88" pin="0"/><net_sink comp="463" pin=0"/></net>

<net id="472"><net_src comp="463" pin="2"/><net_sink comp="468" pin=0"/></net>

<net id="476"><net_src comp="8" pin="0"/><net_sink comp="473" pin=0"/></net>

<net id="481"><net_src comp="473" pin="1"/><net_sink comp="477" pin=0"/></net>

<net id="482"><net_src comp="94" pin="0"/><net_sink comp="477" pin=1"/></net>

<net id="487"><net_src comp="473" pin="1"/><net_sink comp="483" pin=0"/></net>

<net id="488"><net_src comp="96" pin="0"/><net_sink comp="483" pin=1"/></net>

<net id="493"><net_src comp="483" pin="2"/><net_sink comp="489" pin=0"/></net>

<net id="494"><net_src comp="8" pin="0"/><net_sink comp="489" pin=1"/></net>

<net id="499"><net_src comp="2" pin="0"/><net_sink comp="495" pin=0"/></net>

<net id="500"><net_src comp="98" pin="0"/><net_sink comp="495" pin=1"/></net>

<net id="501"><net_src comp="495" pin="2"/><net_sink comp="284" pin=1"/></net>

<net id="505"><net_src comp="323" pin="4"/><net_sink comp="502" pin=0"/></net>

<net id="506"><net_src comp="502" pin="1"/><net_sink comp="300" pin=2"/></net>

<net id="510"><net_src comp="351" pin="1"/><net_sink comp="507" pin=0"/></net>

<net id="514"><net_src comp="355" pin="2"/><net_sink comp="511" pin=0"/></net>

<net id="515"><net_src comp="511" pin="1"/><net_sink comp="115" pin=1"/></net>

<net id="516"><net_src comp="511" pin="1"/><net_sink comp="108" pin=1"/></net>

<net id="517"><net_src comp="511" pin="1"/><net_sink comp="212" pin=1"/></net>

<net id="518"><net_src comp="511" pin="1"/><net_sink comp="217" pin=1"/></net>

<net id="522"><net_src comp="362" pin="2"/><net_sink comp="519" pin=0"/></net>

<net id="523"><net_src comp="519" pin="1"/><net_sink comp="132" pin=1"/></net>

<net id="524"><net_src comp="519" pin="1"/><net_sink comp="124" pin=1"/></net>

<net id="525"><net_src comp="519" pin="1"/><net_sink comp="176" pin=1"/></net>

<net id="529"><net_src comp="369" pin="2"/><net_sink comp="526" pin=0"/></net>

<net id="530"><net_src comp="526" pin="1"/><net_sink comp="166" pin=1"/></net>

<net id="531"><net_src comp="526" pin="1"/><net_sink comp="158" pin=1"/></net>

<net id="532"><net_src comp="526" pin="1"/><net_sink comp="202" pin=1"/></net>

<net id="536"><net_src comp="376" pin="2"/><net_sink comp="533" pin=0"/></net>

<net id="537"><net_src comp="533" pin="1"/><net_sink comp="192" pin=1"/></net>

<net id="538"><net_src comp="533" pin="1"/><net_sink comp="185" pin=1"/></net>

<net id="542"><net_src comp="383" pin="1"/><net_sink comp="539" pin=0"/></net>

<net id="543"><net_src comp="539" pin="1"/><net_sink comp="387" pin=0"/></net>

<net id="547"><net_src comp="387" pin="2"/><net_sink comp="544" pin=0"/></net>

<net id="551"><net_src comp="404" pin="1"/><net_sink comp="548" pin=0"/></net>

<net id="555"><net_src comp="408" pin="2"/><net_sink comp="552" pin=0"/></net>

<net id="556"><net_src comp="552" pin="1"/><net_sink comp="226" pin=1"/></net>

<net id="557"><net_src comp="552" pin="1"/><net_sink comp="233" pin=1"/></net>

<net id="561"><net_src comp="415" pin="1"/><net_sink comp="558" pin=0"/></net>

<net id="565"><net_src comp="419" pin="1"/><net_sink comp="562" pin=0"/></net>

<net id="566"><net_src comp="562" pin="1"/><net_sink comp="258" pin=2"/></net>

<net id="567"><net_src comp="562" pin="1"/><net_sink comp="423" pin=0"/></net>

<net id="571"><net_src comp="423" pin="2"/><net_sink comp="568" pin=0"/></net>

<net id="575"><net_src comp="104" pin="1"/><net_sink comp="572" pin=0"/></net>

<net id="576"><net_src comp="572" pin="1"/><net_sink comp="428" pin=1"/></net>

<net id="577"><net_src comp="572" pin="1"/><net_sink comp="339" pin=0"/></net>

<net id="578"><net_src comp="572" pin="1"/><net_sink comp="468" pin=1"/></net>

<net id="582"><net_src comp="339" pin="1"/><net_sink comp="579" pin=0"/></net>

<net id="583"><net_src comp="579" pin="1"/><net_sink comp="453" pin=0"/></net>

<net id="584"><net_src comp="579" pin="1"/><net_sink comp="463" pin=1"/></net>

<net id="585"><net_src comp="579" pin="1"/><net_sink comp="312" pin=0"/></net>

<net id="589"><net_src comp="433" pin="2"/><net_sink comp="586" pin=0"/></net>

<net id="593"><net_src comp="439" pin="1"/><net_sink comp="590" pin=0"/></net>

<net id="597"><net_src comp="449" pin="1"/><net_sink comp="594" pin=0"/></net>

<net id="598"><net_src comp="594" pin="1"/><net_sink comp="275" pin=2"/></net>

<net id="602"><net_src comp="456" pin="2"/><net_sink comp="599" pin=0"/></net>

<net id="603"><net_src comp="599" pin="1"/><net_sink comp="275" pin=1"/></net>

<net id="604"><net_src comp="599" pin="1"/><net_sink comp="268" pin=1"/></net>

<net id="611"><net_src comp="495" pin="2"/><net_sink comp="608" pin=0"/></net>

<net id="612"><net_src comp="608" pin="1"/><net_sink comp="291" pin=1"/></net>

<net id="613"><net_src comp="608" pin="1"/><net_sink comp="300" pin=1"/></net>

<net id="614"><net_src comp="608" pin="1"/><net_sink comp="284" pin=1"/></net>

</net_list>

</model> 
---------------- Datapath Model END ------------------

* FSMD analyzer results:
  - Output states:
	Port: UART | {1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 }
	Port: OUT_r | {43 44 45 46 47 48 49 64 65 66 67 68 69 70 71 72 73 74 75 76 77 }
	Port: firstSample | {28 }
	Port: calibrationSuccess | {22 }
	Port: cycle_count | {57 70 }
 - Input state : 
	Port: AXI_UART_DRIVER : UART | {14 15 16 17 18 19 20 21 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 }
	Port: AXI_UART_DRIVER : firstSample | {1 }
	Port: AXI_UART_DRIVER : calibrationSuccess | {28 }
	Port: AXI_UART_DRIVER : cycle_count | {70 }
  - Chain level:
	State 1
		StgValue_86 : 1
		UART_addr_req : 1
	State 2
		UART_addr_1_req : 1
	State 3
		UART_addr_2_req : 1
	State 4
		UART_addr_3_req : 1
	State 5
	State 6
		UART_addr_4_req : 1
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
		StgValue_151 : 1
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
		StgValue_164 : 1
	State 29
		UART_load_1_req : 1
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
		StgValue_175 : 1
		UART_load_2_req : 1
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
		StgValue_196 : 1
	State 50
		tmp_6 : 1
		StgValue_200 : 2
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
		StgValue_210 : 1
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
		OUT_addr : 1
		OUT_addr_req : 2
	State 65
	State 66
	State 67
	State 68
	State 69
		StgValue_230 : 1
	State 70
		tmp_7 : 1
		StgValue_236 : 2
		tmp_2 : 1
		StgValue_238 : 2
		NUM_BYTES_READ_3_ph : 3
		OUT_addr_1_req : 1
	State 71
	State 72
		tmp_3 : 1
		StgValue_247 : 2
	State 73
	State 74
	State 75
	State 76
	State 77


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================

* Functional unit list:
|----------|----------------------------|---------|---------|
| Operation|       Functional Unit      |    FF   |   LUT   |
|----------|----------------------------|---------|---------|
|          |         tmp_fu_387         |    0    |    11   |
|   icmp   |        tmp_5_fu_423        |    0    |    11   |
|          |        tmp_6_fu_433        |    0    |    11   |
|          |        tmp_7_fu_477        |    0    |    13   |
|----------|----------------------------|---------|---------|
|    add   |   NUM_BYTES_READ_1_fu_463  |    0    |    15   |
|          |        tmp_2_fu_483        |    0    |    19   |
|----------|----------------------------|---------|---------|
|          |    grp_writeresp_fu_108    |    0    |    0    |
|          |    grp_writeresp_fu_124    |    0    |    0    |
|          |    grp_writeresp_fu_141    |    0    |    0    |
| writeresp|    grp_writeresp_fu_158    |    0    |    0    |
|          |    grp_writeresp_fu_185    |    0    |    0    |
|          |    grp_writeresp_fu_250    |    0    |    0    |
|          |    grp_writeresp_fu_268    |    0    |    0    |
|          |    grp_writeresp_fu_284    |    0    |    0    |
|----------|----------------------------|---------|---------|
|          |  StgValue_89_write_fu_115  |    0    |    0    |
|          |  StgValue_93_write_fu_132  |    0    |    0    |
|          |  StgValue_98_write_fu_149  |    0    |    0    |
|          |  StgValue_104_write_fu_166 |    0    |    0    |
|          |  StgValue_110_write_fu_176 |    0    |    0    |
|   write  |  StgValue_118_write_fu_192 |    0    |    0    |
|          |  StgValue_125_write_fu_202 |    0    |    0    |
|          |  StgValue_154_write_fu_217 |    0    |    0    |
|          |  StgValue_187_write_fu_258 |    0    |    0    |
|          |  StgValue_224_write_fu_275 |    0    |    0    |
|          |  StgValue_244_write_fu_291 |    0    |    0    |
|          |  StgValue_247_write_fu_300 |    0    |    0    |
|----------|----------------------------|---------|---------|
|          | UART_addr_read_read_fu_212 |    0    |    0    |
|   read   |       grp_read_fu_233      |    0    |    0    |
|          |       grp_read_fu_245      |    0    |    0    |
|----------|----------------------------|---------|---------|
|  readreq |     grp_readreq_fu_226     |    0    |    0    |
|          |     grp_readreq_fu_238     |    0    |    0    |
|----------|----------------------------|---------|---------|
|          |         temp_fu_383        |    0    |    0    |
|          |        tmp_8_fu_415        |    0    |    0    |
|   trunc  |        tmp_9_fu_419        |    0    |    0    |
|          |        tmp_10_fu_439       |    0    |    0    |
|          |        tmp_11_fu_449       |    0    |    0    |
|----------|----------------------------|---------|---------|
|   zext   |        tmp_1_fu_453        |    0    |    0    |
|          |        tmp_3_fu_502        |    0    |    0    |
|----------|----------------------------|---------|---------|
|   Total  |                            |    0    |    80   |
|----------|----------------------------|---------|---------|

Memories:
N/A

* Register list:
+----------------------------+--------+
|                            |   FF   |
+----------------------------+--------+
| NUM_BYTES_READ_3_ph_reg_309|    5   |
|  NUM_BYTES_READ_3_reg_319  |    5   |
| NUM_BYTES_READ_load_reg_579|    5   |
|   NUM_BYTES_READ_reg_572   |    5   |
|     OUT_addr_1_reg_608     |    8   |
|      OUT_addr_reg_599      |    8   |
|     UART_addr_1_reg_519    |   32   |
|     UART_addr_3_reg_526    |   32   |
|     UART_addr_4_reg_533    |   32   |
|     UART_addr_5_reg_552    |   32   |
|      UART_addr_reg_511     |   32   |
|calibrationSuccess_l_reg_548|    1   |
|  firstSample_load_reg_507  |    1   |
|           reg_343          |   32   |
|        temp_reg_539        |    8   |
|       tmp_10_reg_590       |    1   |
|       tmp_11_reg_594       |    8   |
|        tmp_5_reg_568       |    1   |
|        tmp_6_reg_586       |    1   |
|        tmp_8_reg_558       |    1   |
|        tmp_9_reg_562       |    8   |
|         tmp_reg_544        |    1   |
+----------------------------+--------+
|            Total           |   259  |
+----------------------------+--------+

* Multiplexer (MUX) list: 
|----------------------|------|------|------|--------||---------||---------|
|         Comp         |  Pin | Size |  BW  | S x BW ||  Delay  ||   LUT   |
|----------------------|------|------|------|--------||---------||---------|
| grp_writeresp_fu_108 |  p0  |   3  |   1  |    3   |
| grp_writeresp_fu_108 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_124 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_124 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_141 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_141 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_158 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_158 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_185 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_185 |  p1  |   2  |  32  |   64   ||    9    |
|  grp_readreq_fu_226  |  p1  |   2  |  32  |   64   ||    9    |
|  grp_readreq_fu_238  |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_250 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_268 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_268 |  p1  |   2  |   8  |   16   ||    9    |
| grp_writeresp_fu_284 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_284 |  p1  |   2  |   8  |   16   ||    9    |
|----------------------|------|------|------|--------||---------||---------|
|         Total        |      |      |      |   497  || 30.1187 ||    81   |
|----------------------|------|------|------|--------||---------||---------|



* Summary:
+-----------+--------+--------+--------+
|           |  Delay |   FF   |   LUT  |
+-----------+--------+--------+--------+
|  Function |    -   |    0   |   80   |
|   Memory  |    -   |    -   |    -   |
|Multiplexer|   30   |    -   |   81   |
|  Register |    -   |   259  |    -   |
+-----------+--------+--------+--------+
|   Total   |   30   |   259  |   161  |
+-----------+--------+--------+--------+
