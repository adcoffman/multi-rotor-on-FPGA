// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="positionCtrl,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=117,HLS_SYN_LUT=110,HLS_VERSION=2018_2}" *)

module positionCtrl (
        ap_clk,
        ap_rst_n,
        m_axi_CTRL_AWVALID,
        m_axi_CTRL_AWREADY,
        m_axi_CTRL_AWADDR,
        m_axi_CTRL_AWID,
        m_axi_CTRL_AWLEN,
        m_axi_CTRL_AWSIZE,
        m_axi_CTRL_AWBURST,
        m_axi_CTRL_AWLOCK,
        m_axi_CTRL_AWCACHE,
        m_axi_CTRL_AWPROT,
        m_axi_CTRL_AWQOS,
        m_axi_CTRL_AWREGION,
        m_axi_CTRL_AWUSER,
        m_axi_CTRL_WVALID,
        m_axi_CTRL_WREADY,
        m_axi_CTRL_WDATA,
        m_axi_CTRL_WSTRB,
        m_axi_CTRL_WLAST,
        m_axi_CTRL_WID,
        m_axi_CTRL_WUSER,
        m_axi_CTRL_ARVALID,
        m_axi_CTRL_ARREADY,
        m_axi_CTRL_ARADDR,
        m_axi_CTRL_ARID,
        m_axi_CTRL_ARLEN,
        m_axi_CTRL_ARSIZE,
        m_axi_CTRL_ARBURST,
        m_axi_CTRL_ARLOCK,
        m_axi_CTRL_ARCACHE,
        m_axi_CTRL_ARPROT,
        m_axi_CTRL_ARQOS,
        m_axi_CTRL_ARREGION,
        m_axi_CTRL_ARUSER,
        m_axi_CTRL_RVALID,
        m_axi_CTRL_RREADY,
        m_axi_CTRL_RDATA,
        m_axi_CTRL_RLAST,
        m_axi_CTRL_RID,
        m_axi_CTRL_RUSER,
        m_axi_CTRL_RRESP,
        m_axi_CTRL_BVALID,
        m_axi_CTRL_BREADY,
        m_axi_CTRL_BRESP,
        m_axi_CTRL_BID,
        m_axi_CTRL_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CTRL_ID_WIDTH = 1;
parameter    C_M_AXI_CTRL_ADDR_WIDTH = 32;
parameter    C_M_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_M_AXI_CTRL_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_WUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_RUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_BUSER_WIDTH = 1;
parameter    C_M_AXI_CTRL_TARGET_ADDR = 0;
parameter    C_M_AXI_CTRL_USER_VALUE = 0;
parameter    C_M_AXI_CTRL_PROT_VALUE = 0;
parameter    C_M_AXI_CTRL_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CTRL_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_CTRL_AWVALID;
input   m_axi_CTRL_AWREADY;
output  [C_M_AXI_CTRL_ADDR_WIDTH - 1:0] m_axi_CTRL_AWADDR;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_AWID;
output  [7:0] m_axi_CTRL_AWLEN;
output  [2:0] m_axi_CTRL_AWSIZE;
output  [1:0] m_axi_CTRL_AWBURST;
output  [1:0] m_axi_CTRL_AWLOCK;
output  [3:0] m_axi_CTRL_AWCACHE;
output  [2:0] m_axi_CTRL_AWPROT;
output  [3:0] m_axi_CTRL_AWQOS;
output  [3:0] m_axi_CTRL_AWREGION;
output  [C_M_AXI_CTRL_AWUSER_WIDTH - 1:0] m_axi_CTRL_AWUSER;
output   m_axi_CTRL_WVALID;
input   m_axi_CTRL_WREADY;
output  [C_M_AXI_CTRL_DATA_WIDTH - 1:0] m_axi_CTRL_WDATA;
output  [C_M_AXI_CTRL_WSTRB_WIDTH - 1:0] m_axi_CTRL_WSTRB;
output   m_axi_CTRL_WLAST;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_WID;
output  [C_M_AXI_CTRL_WUSER_WIDTH - 1:0] m_axi_CTRL_WUSER;
output   m_axi_CTRL_ARVALID;
input   m_axi_CTRL_ARREADY;
output  [C_M_AXI_CTRL_ADDR_WIDTH - 1:0] m_axi_CTRL_ARADDR;
output  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_ARID;
output  [7:0] m_axi_CTRL_ARLEN;
output  [2:0] m_axi_CTRL_ARSIZE;
output  [1:0] m_axi_CTRL_ARBURST;
output  [1:0] m_axi_CTRL_ARLOCK;
output  [3:0] m_axi_CTRL_ARCACHE;
output  [2:0] m_axi_CTRL_ARPROT;
output  [3:0] m_axi_CTRL_ARQOS;
output  [3:0] m_axi_CTRL_ARREGION;
output  [C_M_AXI_CTRL_ARUSER_WIDTH - 1:0] m_axi_CTRL_ARUSER;
input   m_axi_CTRL_RVALID;
output   m_axi_CTRL_RREADY;
input  [C_M_AXI_CTRL_DATA_WIDTH - 1:0] m_axi_CTRL_RDATA;
input   m_axi_CTRL_RLAST;
input  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_RID;
input  [C_M_AXI_CTRL_RUSER_WIDTH - 1:0] m_axi_CTRL_RUSER;
input  [1:0] m_axi_CTRL_RRESP;
input   m_axi_CTRL_BVALID;
output   m_axi_CTRL_BREADY;
input  [1:0] m_axi_CTRL_BRESP;
input  [C_M_AXI_CTRL_ID_WIDTH - 1:0] m_axi_CTRL_BID;
input  [C_M_AXI_CTRL_BUSER_WIDTH - 1:0] m_axi_CTRL_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

positionCtrl_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
positionCtrl_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign m_axi_CTRL_ARADDR = 32'd0;

assign m_axi_CTRL_ARBURST = 2'd0;

assign m_axi_CTRL_ARCACHE = 4'd0;

assign m_axi_CTRL_ARID = 1'd0;

assign m_axi_CTRL_ARLEN = 8'd0;

assign m_axi_CTRL_ARLOCK = 2'd0;

assign m_axi_CTRL_ARPROT = 3'd0;

assign m_axi_CTRL_ARQOS = 4'd0;

assign m_axi_CTRL_ARREGION = 4'd0;

assign m_axi_CTRL_ARSIZE = 3'd0;

assign m_axi_CTRL_ARUSER = 1'd0;

assign m_axi_CTRL_ARVALID = 1'b0;

assign m_axi_CTRL_AWADDR = 32'd0;

assign m_axi_CTRL_AWBURST = 2'd0;

assign m_axi_CTRL_AWCACHE = 4'd0;

assign m_axi_CTRL_AWID = 1'd0;

assign m_axi_CTRL_AWLEN = 8'd0;

assign m_axi_CTRL_AWLOCK = 2'd0;

assign m_axi_CTRL_AWPROT = 3'd0;

assign m_axi_CTRL_AWQOS = 4'd0;

assign m_axi_CTRL_AWREGION = 4'd0;

assign m_axi_CTRL_AWSIZE = 3'd0;

assign m_axi_CTRL_AWUSER = 1'd0;

assign m_axi_CTRL_AWVALID = 1'b0;

assign m_axi_CTRL_BREADY = 1'b0;

assign m_axi_CTRL_RREADY = 1'b0;

assign m_axi_CTRL_WDATA = 32'd0;

assign m_axi_CTRL_WID = 1'd0;

assign m_axi_CTRL_WLAST = 1'b0;

assign m_axi_CTRL_WSTRB = 4'd0;

assign m_axi_CTRL_WUSER = 1'd0;

assign m_axi_CTRL_WVALID = 1'b0;

endmodule //positionCtrl
