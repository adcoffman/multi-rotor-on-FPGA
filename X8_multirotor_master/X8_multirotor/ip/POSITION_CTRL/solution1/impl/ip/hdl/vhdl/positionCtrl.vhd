-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity positionCtrl is
generic (
    C_M_AXI_CTRL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTRL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTRL_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_CTRL_AWVALID : OUT STD_LOGIC;
    m_axi_CTRL_AWREADY : IN STD_LOGIC;
    m_axi_CTRL_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_AWUSER_WIDTH-1 downto 0);
    m_axi_CTRL_WVALID : OUT STD_LOGIC;
    m_axi_CTRL_WREADY : IN STD_LOGIC;
    m_axi_CTRL_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    m_axi_CTRL_WLAST : OUT STD_LOGIC;
    m_axi_CTRL_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_WUSER_WIDTH-1 downto 0);
    m_axi_CTRL_ARVALID : OUT STD_LOGIC;
    m_axi_CTRL_ARREADY : IN STD_LOGIC;
    m_axi_CTRL_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    m_axi_CTRL_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CTRL_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CTRL_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CTRL_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTRL_ARUSER_WIDTH-1 downto 0);
    m_axi_CTRL_RVALID : IN STD_LOGIC;
    m_axi_CTRL_RREADY : OUT STD_LOGIC;
    m_axi_CTRL_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_DATA_WIDTH-1 downto 0);
    m_axi_CTRL_RLAST : IN STD_LOGIC;
    m_axi_CTRL_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_RUSER_WIDTH-1 downto 0);
    m_axi_CTRL_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BVALID : IN STD_LOGIC;
    m_axi_CTRL_BREADY : OUT STD_LOGIC;
    m_axi_CTRL_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CTRL_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_ID_WIDTH-1 downto 0);
    m_axi_CTRL_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTRL_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of positionCtrl is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "positionCtrl,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=117,HLS_SYN_LUT=110,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_CTRL_TARGET_ADDR : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_CTRL_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_CTRL_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_CTRL_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component positionCtrl_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    positionCtrl_CTRL_s_axi_U : component positionCtrl_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    m_axi_CTRL_ARADDR <= ap_const_lv32_0;
    m_axi_CTRL_ARBURST <= ap_const_lv2_0;
    m_axi_CTRL_ARCACHE <= ap_const_lv4_0;
    m_axi_CTRL_ARID <= ap_const_lv1_0;
    m_axi_CTRL_ARLEN <= ap_const_lv8_0;
    m_axi_CTRL_ARLOCK <= ap_const_lv2_0;
    m_axi_CTRL_ARPROT <= ap_const_lv3_0;
    m_axi_CTRL_ARQOS <= ap_const_lv4_0;
    m_axi_CTRL_ARREGION <= ap_const_lv4_0;
    m_axi_CTRL_ARSIZE <= ap_const_lv3_0;
    m_axi_CTRL_ARUSER <= ap_const_lv1_0;
    m_axi_CTRL_ARVALID <= ap_const_logic_0;
    m_axi_CTRL_AWADDR <= ap_const_lv32_0;
    m_axi_CTRL_AWBURST <= ap_const_lv2_0;
    m_axi_CTRL_AWCACHE <= ap_const_lv4_0;
    m_axi_CTRL_AWID <= ap_const_lv1_0;
    m_axi_CTRL_AWLEN <= ap_const_lv8_0;
    m_axi_CTRL_AWLOCK <= ap_const_lv2_0;
    m_axi_CTRL_AWPROT <= ap_const_lv3_0;
    m_axi_CTRL_AWQOS <= ap_const_lv4_0;
    m_axi_CTRL_AWREGION <= ap_const_lv4_0;
    m_axi_CTRL_AWSIZE <= ap_const_lv3_0;
    m_axi_CTRL_AWUSER <= ap_const_lv1_0;
    m_axi_CTRL_AWVALID <= ap_const_logic_0;
    m_axi_CTRL_BREADY <= ap_const_logic_0;
    m_axi_CTRL_RREADY <= ap_const_logic_0;
    m_axi_CTRL_WDATA <= ap_const_lv32_0;
    m_axi_CTRL_WID <= ap_const_lv1_0;
    m_axi_CTRL_WLAST <= ap_const_logic_0;
    m_axi_CTRL_WSTRB <= ap_const_lv4_0;
    m_axi_CTRL_WUSER <= ap_const_lv1_0;
    m_axi_CTRL_WVALID <= ap_const_logic_0;
end behav;
