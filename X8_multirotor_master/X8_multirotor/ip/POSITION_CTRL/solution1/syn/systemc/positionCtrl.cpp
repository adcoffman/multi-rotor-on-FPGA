// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "positionCtrl.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic positionCtrl::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic positionCtrl::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> positionCtrl::ap_ST_fsm_state1 = "1";
const sc_lv<32> positionCtrl::ap_const_lv32_0 = "00000000000000000000000000000000";
const int positionCtrl::C_S_AXI_DATA_WIDTH = "100000";
const int positionCtrl::C_M_AXI_CTRL_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int positionCtrl::C_M_AXI_CTRL_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int positionCtrl::C_M_AXI_CTRL_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int positionCtrl::C_M_AXI_CTRL_CACHE_VALUE = "11";
const sc_lv<1> positionCtrl::ap_const_lv1_0 = "0";
const sc_lv<8> positionCtrl::ap_const_lv8_0 = "00000000";
const sc_lv<3> positionCtrl::ap_const_lv3_0 = "000";
const sc_lv<2> positionCtrl::ap_const_lv2_0 = "00";
const sc_lv<4> positionCtrl::ap_const_lv4_0 = "0000";
const bool positionCtrl::ap_const_boolean_1 = true;

positionCtrl::positionCtrl(sc_module_name name) : sc_module(name), mVcdFile(0) {
    positionCtrl_CTRL_s_axi_U = new positionCtrl_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("positionCtrl_CTRL_s_axi_U");
    positionCtrl_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    positionCtrl_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    positionCtrl_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    positionCtrl_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    positionCtrl_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    positionCtrl_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    positionCtrl_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    positionCtrl_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    positionCtrl_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    positionCtrl_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    positionCtrl_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    positionCtrl_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    positionCtrl_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    positionCtrl_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    positionCtrl_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    positionCtrl_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    positionCtrl_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    positionCtrl_CTRL_s_axi_U->ACLK(ap_clk);
    positionCtrl_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    positionCtrl_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    positionCtrl_CTRL_s_axi_U->ap_start(ap_start);
    positionCtrl_CTRL_s_axi_U->interrupt(interrupt);
    positionCtrl_CTRL_s_axi_U->ap_ready(ap_ready);
    positionCtrl_CTRL_s_axi_U->ap_done(ap_done);
    positionCtrl_CTRL_s_axi_U->ap_idle(ap_idle);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_m_axi_CTRL_ARADDR);

    SC_METHOD(thread_m_axi_CTRL_ARBURST);

    SC_METHOD(thread_m_axi_CTRL_ARCACHE);

    SC_METHOD(thread_m_axi_CTRL_ARID);

    SC_METHOD(thread_m_axi_CTRL_ARLEN);

    SC_METHOD(thread_m_axi_CTRL_ARLOCK);

    SC_METHOD(thread_m_axi_CTRL_ARPROT);

    SC_METHOD(thread_m_axi_CTRL_ARQOS);

    SC_METHOD(thread_m_axi_CTRL_ARREGION);

    SC_METHOD(thread_m_axi_CTRL_ARSIZE);

    SC_METHOD(thread_m_axi_CTRL_ARUSER);

    SC_METHOD(thread_m_axi_CTRL_ARVALID);

    SC_METHOD(thread_m_axi_CTRL_AWADDR);

    SC_METHOD(thread_m_axi_CTRL_AWBURST);

    SC_METHOD(thread_m_axi_CTRL_AWCACHE);

    SC_METHOD(thread_m_axi_CTRL_AWID);

    SC_METHOD(thread_m_axi_CTRL_AWLEN);

    SC_METHOD(thread_m_axi_CTRL_AWLOCK);

    SC_METHOD(thread_m_axi_CTRL_AWPROT);

    SC_METHOD(thread_m_axi_CTRL_AWQOS);

    SC_METHOD(thread_m_axi_CTRL_AWREGION);

    SC_METHOD(thread_m_axi_CTRL_AWSIZE);

    SC_METHOD(thread_m_axi_CTRL_AWUSER);

    SC_METHOD(thread_m_axi_CTRL_AWVALID);

    SC_METHOD(thread_m_axi_CTRL_BREADY);

    SC_METHOD(thread_m_axi_CTRL_RREADY);

    SC_METHOD(thread_m_axi_CTRL_WDATA);

    SC_METHOD(thread_m_axi_CTRL_WID);

    SC_METHOD(thread_m_axi_CTRL_WLAST);

    SC_METHOD(thread_m_axi_CTRL_WSTRB);

    SC_METHOD(thread_m_axi_CTRL_WUSER);

    SC_METHOD(thread_m_axi_CTRL_WVALID);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "positionCtrl_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_CTRL_AWVALID, "(port)m_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, m_axi_CTRL_AWREADY, "(port)m_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, m_axi_CTRL_AWADDR, "(port)m_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, m_axi_CTRL_AWID, "(port)m_axi_CTRL_AWID");
    sc_trace(mVcdFile, m_axi_CTRL_AWLEN, "(port)m_axi_CTRL_AWLEN");
    sc_trace(mVcdFile, m_axi_CTRL_AWSIZE, "(port)m_axi_CTRL_AWSIZE");
    sc_trace(mVcdFile, m_axi_CTRL_AWBURST, "(port)m_axi_CTRL_AWBURST");
    sc_trace(mVcdFile, m_axi_CTRL_AWLOCK, "(port)m_axi_CTRL_AWLOCK");
    sc_trace(mVcdFile, m_axi_CTRL_AWCACHE, "(port)m_axi_CTRL_AWCACHE");
    sc_trace(mVcdFile, m_axi_CTRL_AWPROT, "(port)m_axi_CTRL_AWPROT");
    sc_trace(mVcdFile, m_axi_CTRL_AWQOS, "(port)m_axi_CTRL_AWQOS");
    sc_trace(mVcdFile, m_axi_CTRL_AWREGION, "(port)m_axi_CTRL_AWREGION");
    sc_trace(mVcdFile, m_axi_CTRL_AWUSER, "(port)m_axi_CTRL_AWUSER");
    sc_trace(mVcdFile, m_axi_CTRL_WVALID, "(port)m_axi_CTRL_WVALID");
    sc_trace(mVcdFile, m_axi_CTRL_WREADY, "(port)m_axi_CTRL_WREADY");
    sc_trace(mVcdFile, m_axi_CTRL_WDATA, "(port)m_axi_CTRL_WDATA");
    sc_trace(mVcdFile, m_axi_CTRL_WSTRB, "(port)m_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, m_axi_CTRL_WLAST, "(port)m_axi_CTRL_WLAST");
    sc_trace(mVcdFile, m_axi_CTRL_WID, "(port)m_axi_CTRL_WID");
    sc_trace(mVcdFile, m_axi_CTRL_WUSER, "(port)m_axi_CTRL_WUSER");
    sc_trace(mVcdFile, m_axi_CTRL_ARVALID, "(port)m_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, m_axi_CTRL_ARREADY, "(port)m_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, m_axi_CTRL_ARADDR, "(port)m_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, m_axi_CTRL_ARID, "(port)m_axi_CTRL_ARID");
    sc_trace(mVcdFile, m_axi_CTRL_ARLEN, "(port)m_axi_CTRL_ARLEN");
    sc_trace(mVcdFile, m_axi_CTRL_ARSIZE, "(port)m_axi_CTRL_ARSIZE");
    sc_trace(mVcdFile, m_axi_CTRL_ARBURST, "(port)m_axi_CTRL_ARBURST");
    sc_trace(mVcdFile, m_axi_CTRL_ARLOCK, "(port)m_axi_CTRL_ARLOCK");
    sc_trace(mVcdFile, m_axi_CTRL_ARCACHE, "(port)m_axi_CTRL_ARCACHE");
    sc_trace(mVcdFile, m_axi_CTRL_ARPROT, "(port)m_axi_CTRL_ARPROT");
    sc_trace(mVcdFile, m_axi_CTRL_ARQOS, "(port)m_axi_CTRL_ARQOS");
    sc_trace(mVcdFile, m_axi_CTRL_ARREGION, "(port)m_axi_CTRL_ARREGION");
    sc_trace(mVcdFile, m_axi_CTRL_ARUSER, "(port)m_axi_CTRL_ARUSER");
    sc_trace(mVcdFile, m_axi_CTRL_RVALID, "(port)m_axi_CTRL_RVALID");
    sc_trace(mVcdFile, m_axi_CTRL_RREADY, "(port)m_axi_CTRL_RREADY");
    sc_trace(mVcdFile, m_axi_CTRL_RDATA, "(port)m_axi_CTRL_RDATA");
    sc_trace(mVcdFile, m_axi_CTRL_RLAST, "(port)m_axi_CTRL_RLAST");
    sc_trace(mVcdFile, m_axi_CTRL_RID, "(port)m_axi_CTRL_RID");
    sc_trace(mVcdFile, m_axi_CTRL_RUSER, "(port)m_axi_CTRL_RUSER");
    sc_trace(mVcdFile, m_axi_CTRL_RRESP, "(port)m_axi_CTRL_RRESP");
    sc_trace(mVcdFile, m_axi_CTRL_BVALID, "(port)m_axi_CTRL_BVALID");
    sc_trace(mVcdFile, m_axi_CTRL_BREADY, "(port)m_axi_CTRL_BREADY");
    sc_trace(mVcdFile, m_axi_CTRL_BRESP, "(port)m_axi_CTRL_BRESP");
    sc_trace(mVcdFile, m_axi_CTRL_BID, "(port)m_axi_CTRL_BID");
    sc_trace(mVcdFile, m_axi_CTRL_BUSER, "(port)m_axi_CTRL_BUSER");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("positionCtrl.hdltvin.dat");
    mHdltvoutHandle.open("positionCtrl.hdltvout.dat");
}

positionCtrl::~positionCtrl() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete positionCtrl_CTRL_s_axi_U;
}

void positionCtrl::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void positionCtrl::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void positionCtrl::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void positionCtrl::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void positionCtrl::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void positionCtrl::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void positionCtrl::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void positionCtrl::thread_m_axi_CTRL_ARADDR() {
    m_axi_CTRL_ARADDR = ap_const_lv32_0;
}

void positionCtrl::thread_m_axi_CTRL_ARBURST() {
    m_axi_CTRL_ARBURST = ap_const_lv2_0;
}

void positionCtrl::thread_m_axi_CTRL_ARCACHE() {
    m_axi_CTRL_ARCACHE = ap_const_lv4_0;
}

void positionCtrl::thread_m_axi_CTRL_ARID() {
    m_axi_CTRL_ARID = ap_const_lv1_0;
}

void positionCtrl::thread_m_axi_CTRL_ARLEN() {
    m_axi_CTRL_ARLEN = ap_const_lv8_0;
}

void positionCtrl::thread_m_axi_CTRL_ARLOCK() {
    m_axi_CTRL_ARLOCK = ap_const_lv2_0;
}

void positionCtrl::thread_m_axi_CTRL_ARPROT() {
    m_axi_CTRL_ARPROT = ap_const_lv3_0;
}

void positionCtrl::thread_m_axi_CTRL_ARQOS() {
    m_axi_CTRL_ARQOS = ap_const_lv4_0;
}

void positionCtrl::thread_m_axi_CTRL_ARREGION() {
    m_axi_CTRL_ARREGION = ap_const_lv4_0;
}

void positionCtrl::thread_m_axi_CTRL_ARSIZE() {
    m_axi_CTRL_ARSIZE = ap_const_lv3_0;
}

void positionCtrl::thread_m_axi_CTRL_ARUSER() {
    m_axi_CTRL_ARUSER = ap_const_lv1_0;
}

void positionCtrl::thread_m_axi_CTRL_ARVALID() {
    m_axi_CTRL_ARVALID = ap_const_logic_0;
}

void positionCtrl::thread_m_axi_CTRL_AWADDR() {
    m_axi_CTRL_AWADDR = ap_const_lv32_0;
}

void positionCtrl::thread_m_axi_CTRL_AWBURST() {
    m_axi_CTRL_AWBURST = ap_const_lv2_0;
}

void positionCtrl::thread_m_axi_CTRL_AWCACHE() {
    m_axi_CTRL_AWCACHE = ap_const_lv4_0;
}

void positionCtrl::thread_m_axi_CTRL_AWID() {
    m_axi_CTRL_AWID = ap_const_lv1_0;
}

void positionCtrl::thread_m_axi_CTRL_AWLEN() {
    m_axi_CTRL_AWLEN = ap_const_lv8_0;
}

void positionCtrl::thread_m_axi_CTRL_AWLOCK() {
    m_axi_CTRL_AWLOCK = ap_const_lv2_0;
}

void positionCtrl::thread_m_axi_CTRL_AWPROT() {
    m_axi_CTRL_AWPROT = ap_const_lv3_0;
}

void positionCtrl::thread_m_axi_CTRL_AWQOS() {
    m_axi_CTRL_AWQOS = ap_const_lv4_0;
}

void positionCtrl::thread_m_axi_CTRL_AWREGION() {
    m_axi_CTRL_AWREGION = ap_const_lv4_0;
}

void positionCtrl::thread_m_axi_CTRL_AWSIZE() {
    m_axi_CTRL_AWSIZE = ap_const_lv3_0;
}

void positionCtrl::thread_m_axi_CTRL_AWUSER() {
    m_axi_CTRL_AWUSER = ap_const_lv1_0;
}

void positionCtrl::thread_m_axi_CTRL_AWVALID() {
    m_axi_CTRL_AWVALID = ap_const_logic_0;
}

void positionCtrl::thread_m_axi_CTRL_BREADY() {
    m_axi_CTRL_BREADY = ap_const_logic_0;
}

void positionCtrl::thread_m_axi_CTRL_RREADY() {
    m_axi_CTRL_RREADY = ap_const_logic_0;
}

void positionCtrl::thread_m_axi_CTRL_WDATA() {
    m_axi_CTRL_WDATA = ap_const_lv32_0;
}

void positionCtrl::thread_m_axi_CTRL_WID() {
    m_axi_CTRL_WID = ap_const_lv1_0;
}

void positionCtrl::thread_m_axi_CTRL_WLAST() {
    m_axi_CTRL_WLAST = ap_const_logic_0;
}

void positionCtrl::thread_m_axi_CTRL_WSTRB() {
    m_axi_CTRL_WSTRB = ap_const_lv4_0;
}

void positionCtrl::thread_m_axi_CTRL_WUSER() {
    m_axi_CTRL_WUSER = ap_const_lv1_0;
}

void positionCtrl::thread_m_axi_CTRL_WVALID() {
    m_axi_CTRL_WVALID = ap_const_logic_0;
}

void positionCtrl::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void positionCtrl::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_CTRL_AWVALID\" :  \"" << m_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_AWREADY\" :  \"" << m_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWADDR\" :  \"" << m_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWID\" :  \"" << m_axi_CTRL_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWLEN\" :  \"" << m_axi_CTRL_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWSIZE\" :  \"" << m_axi_CTRL_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWBURST\" :  \"" << m_axi_CTRL_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWLOCK\" :  \"" << m_axi_CTRL_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWCACHE\" :  \"" << m_axi_CTRL_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWPROT\" :  \"" << m_axi_CTRL_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWQOS\" :  \"" << m_axi_CTRL_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWREGION\" :  \"" << m_axi_CTRL_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_AWUSER\" :  \"" << m_axi_CTRL_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_WVALID\" :  \"" << m_axi_CTRL_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_WREADY\" :  \"" << m_axi_CTRL_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_WDATA\" :  \"" << m_axi_CTRL_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_WSTRB\" :  \"" << m_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_WLAST\" :  \"" << m_axi_CTRL_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_WID\" :  \"" << m_axi_CTRL_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_WUSER\" :  \"" << m_axi_CTRL_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARVALID\" :  \"" << m_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_ARREADY\" :  \"" << m_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARADDR\" :  \"" << m_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARID\" :  \"" << m_axi_CTRL_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARLEN\" :  \"" << m_axi_CTRL_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARSIZE\" :  \"" << m_axi_CTRL_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARBURST\" :  \"" << m_axi_CTRL_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARLOCK\" :  \"" << m_axi_CTRL_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARCACHE\" :  \"" << m_axi_CTRL_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARPROT\" :  \"" << m_axi_CTRL_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARQOS\" :  \"" << m_axi_CTRL_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARREGION\" :  \"" << m_axi_CTRL_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_ARUSER\" :  \"" << m_axi_CTRL_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_RVALID\" :  \"" << m_axi_CTRL_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_RREADY\" :  \"" << m_axi_CTRL_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_RDATA\" :  \"" << m_axi_CTRL_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_RLAST\" :  \"" << m_axi_CTRL_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_RID\" :  \"" << m_axi_CTRL_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_RUSER\" :  \"" << m_axi_CTRL_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_RRESP\" :  \"" << m_axi_CTRL_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_BVALID\" :  \"" << m_axi_CTRL_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CTRL_BREADY\" :  \"" << m_axi_CTRL_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_BRESP\" :  \"" << m_axi_CTRL_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_BID\" :  \"" << m_axi_CTRL_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CTRL_BUSER\" :  \"" << m_axi_CTRL_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

