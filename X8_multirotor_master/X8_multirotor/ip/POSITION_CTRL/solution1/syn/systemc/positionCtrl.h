// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _positionCtrl_HH_
#define _positionCtrl_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "positionCtrl_CTRL_s_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_DATA_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_DATA_ID_WIDTH = 1,
         unsigned int C_M_AXI_DATA_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_DATA_WIDTH = 32,
         unsigned int C_M_AXI_DATA_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_DATA_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 14,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct positionCtrl : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_DATA_AWVALID;
    sc_in< sc_logic > m_axi_DATA_AWREADY;
    sc_out< sc_uint<C_M_AXI_DATA_ADDR_WIDTH> > m_axi_DATA_AWADDR;
    sc_out< sc_uint<C_M_AXI_DATA_ID_WIDTH> > m_axi_DATA_AWID;
    sc_out< sc_lv<8> > m_axi_DATA_AWLEN;
    sc_out< sc_lv<3> > m_axi_DATA_AWSIZE;
    sc_out< sc_lv<2> > m_axi_DATA_AWBURST;
    sc_out< sc_lv<2> > m_axi_DATA_AWLOCK;
    sc_out< sc_lv<4> > m_axi_DATA_AWCACHE;
    sc_out< sc_lv<3> > m_axi_DATA_AWPROT;
    sc_out< sc_lv<4> > m_axi_DATA_AWQOS;
    sc_out< sc_lv<4> > m_axi_DATA_AWREGION;
    sc_out< sc_uint<C_M_AXI_DATA_AWUSER_WIDTH> > m_axi_DATA_AWUSER;
    sc_out< sc_logic > m_axi_DATA_WVALID;
    sc_in< sc_logic > m_axi_DATA_WREADY;
    sc_out< sc_uint<C_M_AXI_DATA_DATA_WIDTH> > m_axi_DATA_WDATA;
    sc_out< sc_uint<C_M_AXI_DATA_DATA_WIDTH/8> > m_axi_DATA_WSTRB;
    sc_out< sc_logic > m_axi_DATA_WLAST;
    sc_out< sc_uint<C_M_AXI_DATA_ID_WIDTH> > m_axi_DATA_WID;
    sc_out< sc_uint<C_M_AXI_DATA_WUSER_WIDTH> > m_axi_DATA_WUSER;
    sc_out< sc_logic > m_axi_DATA_ARVALID;
    sc_in< sc_logic > m_axi_DATA_ARREADY;
    sc_out< sc_uint<C_M_AXI_DATA_ADDR_WIDTH> > m_axi_DATA_ARADDR;
    sc_out< sc_uint<C_M_AXI_DATA_ID_WIDTH> > m_axi_DATA_ARID;
    sc_out< sc_lv<8> > m_axi_DATA_ARLEN;
    sc_out< sc_lv<3> > m_axi_DATA_ARSIZE;
    sc_out< sc_lv<2> > m_axi_DATA_ARBURST;
    sc_out< sc_lv<2> > m_axi_DATA_ARLOCK;
    sc_out< sc_lv<4> > m_axi_DATA_ARCACHE;
    sc_out< sc_lv<3> > m_axi_DATA_ARPROT;
    sc_out< sc_lv<4> > m_axi_DATA_ARQOS;
    sc_out< sc_lv<4> > m_axi_DATA_ARREGION;
    sc_out< sc_uint<C_M_AXI_DATA_ARUSER_WIDTH> > m_axi_DATA_ARUSER;
    sc_in< sc_logic > m_axi_DATA_RVALID;
    sc_out< sc_logic > m_axi_DATA_RREADY;
    sc_in< sc_uint<C_M_AXI_DATA_DATA_WIDTH> > m_axi_DATA_RDATA;
    sc_in< sc_logic > m_axi_DATA_RLAST;
    sc_in< sc_uint<C_M_AXI_DATA_ID_WIDTH> > m_axi_DATA_RID;
    sc_in< sc_uint<C_M_AXI_DATA_RUSER_WIDTH> > m_axi_DATA_RUSER;
    sc_in< sc_lv<2> > m_axi_DATA_RRESP;
    sc_in< sc_logic > m_axi_DATA_BVALID;
    sc_out< sc_logic > m_axi_DATA_BREADY;
    sc_in< sc_lv<2> > m_axi_DATA_BRESP;
    sc_in< sc_uint<C_M_AXI_DATA_ID_WIDTH> > m_axi_DATA_BID;
    sc_in< sc_uint<C_M_AXI_DATA_BUSER_WIDTH> > m_axi_DATA_BUSER;
    sc_in< sc_logic > s_axi_CTRL_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_WVALID;
    sc_out< sc_logic > s_axi_CTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_CTRL_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_RVALID;
    sc_in< sc_logic > s_axi_CTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    positionCtrl(sc_module_name name);
    SC_HAS_PROCESS(positionCtrl);

    ~positionCtrl();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    positionCtrl_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* positionCtrl_CTRL_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_DATA_TARGET_ADDR;
    static const int C_M_AXI_DATA_USER_VALUE;
    static const int C_M_AXI_DATA_PROT_VALUE;
    static const int C_M_AXI_DATA_CACHE_VALUE;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_m_axi_DATA_ARADDR();
    void thread_m_axi_DATA_ARBURST();
    void thread_m_axi_DATA_ARCACHE();
    void thread_m_axi_DATA_ARID();
    void thread_m_axi_DATA_ARLEN();
    void thread_m_axi_DATA_ARLOCK();
    void thread_m_axi_DATA_ARPROT();
    void thread_m_axi_DATA_ARQOS();
    void thread_m_axi_DATA_ARREGION();
    void thread_m_axi_DATA_ARSIZE();
    void thread_m_axi_DATA_ARUSER();
    void thread_m_axi_DATA_ARVALID();
    void thread_m_axi_DATA_AWADDR();
    void thread_m_axi_DATA_AWBURST();
    void thread_m_axi_DATA_AWCACHE();
    void thread_m_axi_DATA_AWID();
    void thread_m_axi_DATA_AWLEN();
    void thread_m_axi_DATA_AWLOCK();
    void thread_m_axi_DATA_AWPROT();
    void thread_m_axi_DATA_AWQOS();
    void thread_m_axi_DATA_AWREGION();
    void thread_m_axi_DATA_AWSIZE();
    void thread_m_axi_DATA_AWUSER();
    void thread_m_axi_DATA_AWVALID();
    void thread_m_axi_DATA_BREADY();
    void thread_m_axi_DATA_RREADY();
    void thread_m_axi_DATA_WDATA();
    void thread_m_axi_DATA_WID();
    void thread_m_axi_DATA_WLAST();
    void thread_m_axi_DATA_WSTRB();
    void thread_m_axi_DATA_WUSER();
    void thread_m_axi_DATA_WVALID();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
