// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rx_driver.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rx_driver::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rx_driver::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<38> rx_driver::ap_ST_fsm_state1 = "1";
const sc_lv<38> rx_driver::ap_ST_fsm_state2 = "10";
const sc_lv<38> rx_driver::ap_ST_fsm_state3 = "100";
const sc_lv<38> rx_driver::ap_ST_fsm_state4 = "1000";
const sc_lv<38> rx_driver::ap_ST_fsm_state5 = "10000";
const sc_lv<38> rx_driver::ap_ST_fsm_state6 = "100000";
const sc_lv<38> rx_driver::ap_ST_fsm_state7 = "1000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state8 = "10000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state9 = "100000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state10 = "1000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state11 = "10000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state12 = "100000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<38> rx_driver::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<32> rx_driver::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool rx_driver::ap_const_boolean_1 = true;
const sc_lv<1> rx_driver::ap_const_lv1_1 = "1";
const sc_lv<32> rx_driver::ap_const_lv32_2 = "10";
const sc_lv<32> rx_driver::ap_const_lv32_7 = "111";
const sc_lv<32> rx_driver::ap_const_lv32_4 = "100";
const sc_lv<32> rx_driver::ap_const_lv32_5 = "101";
const sc_lv<32> rx_driver::ap_const_lv32_A = "1010";
const sc_lv<32> rx_driver::ap_const_lv32_3 = "11";
const sc_lv<32> rx_driver::ap_const_lv32_8 = "1000";
const sc_lv<32> rx_driver::ap_const_lv32_F = "1111";
const sc_lv<32> rx_driver::ap_const_lv32_16 = "10110";
const sc_lv<32> rx_driver::ap_const_lv32_18 = "11000";
const sc_lv<1> rx_driver::ap_const_lv1_0 = "0";
const sc_lv<32> rx_driver::ap_const_lv32_1F = "11111";
const sc_lv<32> rx_driver::ap_const_lv32_9 = "1001";
const sc_lv<32> rx_driver::ap_const_lv32_E = "1110";
const sc_lv<32> rx_driver::ap_const_lv32_6 = "110";
const sc_lv<32> rx_driver::ap_const_lv32_B = "1011";
const sc_lv<32> rx_driver::ap_const_lv32_C = "1100";
const sc_lv<32> rx_driver::ap_const_lv32_D = "1101";
const sc_lv<32> rx_driver::ap_const_lv32_17 = "10111";
const sc_lv<32> rx_driver::ap_const_lv32_20 = "100000";
const sc_lv<32> rx_driver::ap_const_lv32_24 = "100100";
const int rx_driver::C_S_AXI_DATA_WIDTH = "100000";
const int rx_driver::C_M_AXI_AXI_UART_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int rx_driver::C_M_AXI_AXI_UART_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int rx_driver::C_M_AXI_AXI_UART_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int rx_driver::C_M_AXI_AXI_UART_CACHE_VALUE = "11";
const int rx_driver::C_M_AXI_DATA_WIDTH = "100000";
const int rx_driver::C_M_AXI_SBUS_DATA_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int rx_driver::C_M_AXI_SBUS_DATA_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int rx_driver::C_M_AXI_SBUS_DATA_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int rx_driver::C_M_AXI_SBUS_DATA_CACHE_VALUE = "11";
const sc_lv<32> rx_driver::ap_const_lv32_1 = "1";
const bool rx_driver::ap_const_boolean_0 = false;
const sc_lv<32> rx_driver::ap_const_lv32_25 = "100101";
const sc_lv<19> rx_driver::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<5> rx_driver::ap_const_lv5_0 = "00000";
const sc_lv<20> rx_driver::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<64> rx_driver::ap_const_lv64_100C = "1000000001100";
const sc_lv<64> rx_driver::ap_const_lv64_1000 = "1000000000000";
const sc_lv<64> rx_driver::ap_const_lv64_1004 = "1000000000100";
const sc_lv<64> rx_driver::ap_const_lv64_1008 = "1000000001000";
const sc_lv<3> rx_driver::ap_const_lv3_0 = "000";
const sc_lv<2> rx_driver::ap_const_lv2_0 = "00";
const sc_lv<4> rx_driver::ap_const_lv4_0 = "0000";
const sc_lv<32> rx_driver::ap_const_lv32_80 = "10000000";
const sc_lv<4> rx_driver::ap_const_lv4_F = "1111";
const sc_lv<32> rx_driver::ap_const_lv32_11 = "10001";
const sc_lv<32> rx_driver::ap_const_lv32_19 = "11001";
const sc_lv<19> rx_driver::ap_const_lv19_493E0 = "1001001001111100000";
const sc_lv<19> rx_driver::ap_const_lv19_1 = "1";
const sc_lv<5> rx_driver::ap_const_lv5_19 = "11001";
const sc_lv<5> rx_driver::ap_const_lv5_1 = "1";
const sc_lv<20> rx_driver::ap_const_lv20_927C0 = "10010010011111000000";
const sc_lv<20> rx_driver::ap_const_lv20_1 = "1";

rx_driver::rx_driver(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rx_driver_CTRL_s_axi_U = new rx_driver_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("rx_driver_CTRL_s_axi_U");
    rx_driver_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    rx_driver_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    rx_driver_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    rx_driver_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    rx_driver_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    rx_driver_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    rx_driver_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    rx_driver_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    rx_driver_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    rx_driver_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    rx_driver_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    rx_driver_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    rx_driver_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    rx_driver_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    rx_driver_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    rx_driver_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    rx_driver_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    rx_driver_CTRL_s_axi_U->ACLK(ap_clk);
    rx_driver_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    rx_driver_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    rx_driver_CTRL_s_axi_U->ap_start(ap_start);
    rx_driver_CTRL_s_axi_U->interrupt(interrupt);
    rx_driver_CTRL_s_axi_U->ap_ready(ap_ready);
    rx_driver_CTRL_s_axi_U->ap_done(ap_done);
    rx_driver_CTRL_s_axi_U->ap_idle(ap_idle);
    rx_driver_AXI_UART_m_axi_U = new rx_driver_AXI_UART_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_AXI_UART_ID_WIDTH,C_M_AXI_AXI_UART_ADDR_WIDTH,C_M_AXI_AXI_UART_DATA_WIDTH,C_M_AXI_AXI_UART_AWUSER_WIDTH,C_M_AXI_AXI_UART_ARUSER_WIDTH,C_M_AXI_AXI_UART_WUSER_WIDTH,C_M_AXI_AXI_UART_RUSER_WIDTH,C_M_AXI_AXI_UART_BUSER_WIDTH,C_M_AXI_AXI_UART_TARGET_ADDR,C_M_AXI_AXI_UART_USER_VALUE,C_M_AXI_AXI_UART_PROT_VALUE,C_M_AXI_AXI_UART_CACHE_VALUE>("rx_driver_AXI_UART_m_axi_U");
    rx_driver_AXI_UART_m_axi_U->AWVALID(m_axi_AXI_UART_AWVALID);
    rx_driver_AXI_UART_m_axi_U->AWREADY(m_axi_AXI_UART_AWREADY);
    rx_driver_AXI_UART_m_axi_U->AWADDR(m_axi_AXI_UART_AWADDR);
    rx_driver_AXI_UART_m_axi_U->AWID(m_axi_AXI_UART_AWID);
    rx_driver_AXI_UART_m_axi_U->AWLEN(m_axi_AXI_UART_AWLEN);
    rx_driver_AXI_UART_m_axi_U->AWSIZE(m_axi_AXI_UART_AWSIZE);
    rx_driver_AXI_UART_m_axi_U->AWBURST(m_axi_AXI_UART_AWBURST);
    rx_driver_AXI_UART_m_axi_U->AWLOCK(m_axi_AXI_UART_AWLOCK);
    rx_driver_AXI_UART_m_axi_U->AWCACHE(m_axi_AXI_UART_AWCACHE);
    rx_driver_AXI_UART_m_axi_U->AWPROT(m_axi_AXI_UART_AWPROT);
    rx_driver_AXI_UART_m_axi_U->AWQOS(m_axi_AXI_UART_AWQOS);
    rx_driver_AXI_UART_m_axi_U->AWREGION(m_axi_AXI_UART_AWREGION);
    rx_driver_AXI_UART_m_axi_U->AWUSER(m_axi_AXI_UART_AWUSER);
    rx_driver_AXI_UART_m_axi_U->WVALID(m_axi_AXI_UART_WVALID);
    rx_driver_AXI_UART_m_axi_U->WREADY(m_axi_AXI_UART_WREADY);
    rx_driver_AXI_UART_m_axi_U->WDATA(m_axi_AXI_UART_WDATA);
    rx_driver_AXI_UART_m_axi_U->WSTRB(m_axi_AXI_UART_WSTRB);
    rx_driver_AXI_UART_m_axi_U->WLAST(m_axi_AXI_UART_WLAST);
    rx_driver_AXI_UART_m_axi_U->WID(m_axi_AXI_UART_WID);
    rx_driver_AXI_UART_m_axi_U->WUSER(m_axi_AXI_UART_WUSER);
    rx_driver_AXI_UART_m_axi_U->ARVALID(m_axi_AXI_UART_ARVALID);
    rx_driver_AXI_UART_m_axi_U->ARREADY(m_axi_AXI_UART_ARREADY);
    rx_driver_AXI_UART_m_axi_U->ARADDR(m_axi_AXI_UART_ARADDR);
    rx_driver_AXI_UART_m_axi_U->ARID(m_axi_AXI_UART_ARID);
    rx_driver_AXI_UART_m_axi_U->ARLEN(m_axi_AXI_UART_ARLEN);
    rx_driver_AXI_UART_m_axi_U->ARSIZE(m_axi_AXI_UART_ARSIZE);
    rx_driver_AXI_UART_m_axi_U->ARBURST(m_axi_AXI_UART_ARBURST);
    rx_driver_AXI_UART_m_axi_U->ARLOCK(m_axi_AXI_UART_ARLOCK);
    rx_driver_AXI_UART_m_axi_U->ARCACHE(m_axi_AXI_UART_ARCACHE);
    rx_driver_AXI_UART_m_axi_U->ARPROT(m_axi_AXI_UART_ARPROT);
    rx_driver_AXI_UART_m_axi_U->ARQOS(m_axi_AXI_UART_ARQOS);
    rx_driver_AXI_UART_m_axi_U->ARREGION(m_axi_AXI_UART_ARREGION);
    rx_driver_AXI_UART_m_axi_U->ARUSER(m_axi_AXI_UART_ARUSER);
    rx_driver_AXI_UART_m_axi_U->RVALID(m_axi_AXI_UART_RVALID);
    rx_driver_AXI_UART_m_axi_U->RREADY(m_axi_AXI_UART_RREADY);
    rx_driver_AXI_UART_m_axi_U->RDATA(m_axi_AXI_UART_RDATA);
    rx_driver_AXI_UART_m_axi_U->RLAST(m_axi_AXI_UART_RLAST);
    rx_driver_AXI_UART_m_axi_U->RID(m_axi_AXI_UART_RID);
    rx_driver_AXI_UART_m_axi_U->RUSER(m_axi_AXI_UART_RUSER);
    rx_driver_AXI_UART_m_axi_U->RRESP(m_axi_AXI_UART_RRESP);
    rx_driver_AXI_UART_m_axi_U->BVALID(m_axi_AXI_UART_BVALID);
    rx_driver_AXI_UART_m_axi_U->BREADY(m_axi_AXI_UART_BREADY);
    rx_driver_AXI_UART_m_axi_U->BRESP(m_axi_AXI_UART_BRESP);
    rx_driver_AXI_UART_m_axi_U->BID(m_axi_AXI_UART_BID);
    rx_driver_AXI_UART_m_axi_U->BUSER(m_axi_AXI_UART_BUSER);
    rx_driver_AXI_UART_m_axi_U->ACLK(ap_clk);
    rx_driver_AXI_UART_m_axi_U->ARESET(ap_rst_n_inv);
    rx_driver_AXI_UART_m_axi_U->ACLK_EN(ap_var_for_const0);
    rx_driver_AXI_UART_m_axi_U->I_ARVALID(AXI_UART_ARVALID);
    rx_driver_AXI_UART_m_axi_U->I_ARREADY(AXI_UART_ARREADY);
    rx_driver_AXI_UART_m_axi_U->I_ARADDR(AXI_UART_ARADDR);
    rx_driver_AXI_UART_m_axi_U->I_ARID(ap_var_for_const1);
    rx_driver_AXI_UART_m_axi_U->I_ARLEN(ap_var_for_const2);
    rx_driver_AXI_UART_m_axi_U->I_ARSIZE(ap_var_for_const3);
    rx_driver_AXI_UART_m_axi_U->I_ARLOCK(ap_var_for_const4);
    rx_driver_AXI_UART_m_axi_U->I_ARCACHE(ap_var_for_const5);
    rx_driver_AXI_UART_m_axi_U->I_ARQOS(ap_var_for_const5);
    rx_driver_AXI_UART_m_axi_U->I_ARPROT(ap_var_for_const3);
    rx_driver_AXI_UART_m_axi_U->I_ARUSER(ap_var_for_const1);
    rx_driver_AXI_UART_m_axi_U->I_ARBURST(ap_var_for_const4);
    rx_driver_AXI_UART_m_axi_U->I_ARREGION(ap_var_for_const5);
    rx_driver_AXI_UART_m_axi_U->I_RVALID(AXI_UART_RVALID);
    rx_driver_AXI_UART_m_axi_U->I_RREADY(AXI_UART_RREADY);
    rx_driver_AXI_UART_m_axi_U->I_RDATA(AXI_UART_RDATA);
    rx_driver_AXI_UART_m_axi_U->I_RID(AXI_UART_RID);
    rx_driver_AXI_UART_m_axi_U->I_RUSER(AXI_UART_RUSER);
    rx_driver_AXI_UART_m_axi_U->I_RRESP(AXI_UART_RRESP);
    rx_driver_AXI_UART_m_axi_U->I_RLAST(AXI_UART_RLAST);
    rx_driver_AXI_UART_m_axi_U->I_AWVALID(AXI_UART_AWVALID);
    rx_driver_AXI_UART_m_axi_U->I_AWREADY(AXI_UART_AWREADY);
    rx_driver_AXI_UART_m_axi_U->I_AWADDR(AXI_UART_AWADDR);
    rx_driver_AXI_UART_m_axi_U->I_AWID(ap_var_for_const1);
    rx_driver_AXI_UART_m_axi_U->I_AWLEN(ap_var_for_const2);
    rx_driver_AXI_UART_m_axi_U->I_AWSIZE(ap_var_for_const3);
    rx_driver_AXI_UART_m_axi_U->I_AWLOCK(ap_var_for_const4);
    rx_driver_AXI_UART_m_axi_U->I_AWCACHE(ap_var_for_const5);
    rx_driver_AXI_UART_m_axi_U->I_AWQOS(ap_var_for_const5);
    rx_driver_AXI_UART_m_axi_U->I_AWPROT(ap_var_for_const3);
    rx_driver_AXI_UART_m_axi_U->I_AWUSER(ap_var_for_const1);
    rx_driver_AXI_UART_m_axi_U->I_AWBURST(ap_var_for_const4);
    rx_driver_AXI_UART_m_axi_U->I_AWREGION(ap_var_for_const5);
    rx_driver_AXI_UART_m_axi_U->I_WVALID(AXI_UART_WVALID);
    rx_driver_AXI_UART_m_axi_U->I_WREADY(AXI_UART_WREADY);
    rx_driver_AXI_UART_m_axi_U->I_WDATA(AXI_UART_WDATA);
    rx_driver_AXI_UART_m_axi_U->I_WID(ap_var_for_const1);
    rx_driver_AXI_UART_m_axi_U->I_WUSER(ap_var_for_const1);
    rx_driver_AXI_UART_m_axi_U->I_WLAST(ap_var_for_const6);
    rx_driver_AXI_UART_m_axi_U->I_WSTRB(ap_var_for_const7);
    rx_driver_AXI_UART_m_axi_U->I_BVALID(AXI_UART_BVALID);
    rx_driver_AXI_UART_m_axi_U->I_BREADY(AXI_UART_BREADY);
    rx_driver_AXI_UART_m_axi_U->I_BRESP(AXI_UART_BRESP);
    rx_driver_AXI_UART_m_axi_U->I_BID(AXI_UART_BID);
    rx_driver_AXI_UART_m_axi_U->I_BUSER(AXI_UART_BUSER);
    rx_driver_SBUS_data_m_axi_U = new rx_driver_SBUS_data_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_SBUS_DATA_ID_WIDTH,C_M_AXI_SBUS_DATA_ADDR_WIDTH,C_M_AXI_SBUS_DATA_DATA_WIDTH,C_M_AXI_SBUS_DATA_AWUSER_WIDTH,C_M_AXI_SBUS_DATA_ARUSER_WIDTH,C_M_AXI_SBUS_DATA_WUSER_WIDTH,C_M_AXI_SBUS_DATA_RUSER_WIDTH,C_M_AXI_SBUS_DATA_BUSER_WIDTH,C_M_AXI_SBUS_DATA_TARGET_ADDR,C_M_AXI_SBUS_DATA_USER_VALUE,C_M_AXI_SBUS_DATA_PROT_VALUE,C_M_AXI_SBUS_DATA_CACHE_VALUE>("rx_driver_SBUS_data_m_axi_U");
    rx_driver_SBUS_data_m_axi_U->AWVALID(m_axi_SBUS_data_AWVALID);
    rx_driver_SBUS_data_m_axi_U->AWREADY(m_axi_SBUS_data_AWREADY);
    rx_driver_SBUS_data_m_axi_U->AWADDR(m_axi_SBUS_data_AWADDR);
    rx_driver_SBUS_data_m_axi_U->AWID(m_axi_SBUS_data_AWID);
    rx_driver_SBUS_data_m_axi_U->AWLEN(m_axi_SBUS_data_AWLEN);
    rx_driver_SBUS_data_m_axi_U->AWSIZE(m_axi_SBUS_data_AWSIZE);
    rx_driver_SBUS_data_m_axi_U->AWBURST(m_axi_SBUS_data_AWBURST);
    rx_driver_SBUS_data_m_axi_U->AWLOCK(m_axi_SBUS_data_AWLOCK);
    rx_driver_SBUS_data_m_axi_U->AWCACHE(m_axi_SBUS_data_AWCACHE);
    rx_driver_SBUS_data_m_axi_U->AWPROT(m_axi_SBUS_data_AWPROT);
    rx_driver_SBUS_data_m_axi_U->AWQOS(m_axi_SBUS_data_AWQOS);
    rx_driver_SBUS_data_m_axi_U->AWREGION(m_axi_SBUS_data_AWREGION);
    rx_driver_SBUS_data_m_axi_U->AWUSER(m_axi_SBUS_data_AWUSER);
    rx_driver_SBUS_data_m_axi_U->WVALID(m_axi_SBUS_data_WVALID);
    rx_driver_SBUS_data_m_axi_U->WREADY(m_axi_SBUS_data_WREADY);
    rx_driver_SBUS_data_m_axi_U->WDATA(m_axi_SBUS_data_WDATA);
    rx_driver_SBUS_data_m_axi_U->WSTRB(m_axi_SBUS_data_WSTRB);
    rx_driver_SBUS_data_m_axi_U->WLAST(m_axi_SBUS_data_WLAST);
    rx_driver_SBUS_data_m_axi_U->WID(m_axi_SBUS_data_WID);
    rx_driver_SBUS_data_m_axi_U->WUSER(m_axi_SBUS_data_WUSER);
    rx_driver_SBUS_data_m_axi_U->ARVALID(m_axi_SBUS_data_ARVALID);
    rx_driver_SBUS_data_m_axi_U->ARREADY(m_axi_SBUS_data_ARREADY);
    rx_driver_SBUS_data_m_axi_U->ARADDR(m_axi_SBUS_data_ARADDR);
    rx_driver_SBUS_data_m_axi_U->ARID(m_axi_SBUS_data_ARID);
    rx_driver_SBUS_data_m_axi_U->ARLEN(m_axi_SBUS_data_ARLEN);
    rx_driver_SBUS_data_m_axi_U->ARSIZE(m_axi_SBUS_data_ARSIZE);
    rx_driver_SBUS_data_m_axi_U->ARBURST(m_axi_SBUS_data_ARBURST);
    rx_driver_SBUS_data_m_axi_U->ARLOCK(m_axi_SBUS_data_ARLOCK);
    rx_driver_SBUS_data_m_axi_U->ARCACHE(m_axi_SBUS_data_ARCACHE);
    rx_driver_SBUS_data_m_axi_U->ARPROT(m_axi_SBUS_data_ARPROT);
    rx_driver_SBUS_data_m_axi_U->ARQOS(m_axi_SBUS_data_ARQOS);
    rx_driver_SBUS_data_m_axi_U->ARREGION(m_axi_SBUS_data_ARREGION);
    rx_driver_SBUS_data_m_axi_U->ARUSER(m_axi_SBUS_data_ARUSER);
    rx_driver_SBUS_data_m_axi_U->RVALID(m_axi_SBUS_data_RVALID);
    rx_driver_SBUS_data_m_axi_U->RREADY(m_axi_SBUS_data_RREADY);
    rx_driver_SBUS_data_m_axi_U->RDATA(m_axi_SBUS_data_RDATA);
    rx_driver_SBUS_data_m_axi_U->RLAST(m_axi_SBUS_data_RLAST);
    rx_driver_SBUS_data_m_axi_U->RID(m_axi_SBUS_data_RID);
    rx_driver_SBUS_data_m_axi_U->RUSER(m_axi_SBUS_data_RUSER);
    rx_driver_SBUS_data_m_axi_U->RRESP(m_axi_SBUS_data_RRESP);
    rx_driver_SBUS_data_m_axi_U->BVALID(m_axi_SBUS_data_BVALID);
    rx_driver_SBUS_data_m_axi_U->BREADY(m_axi_SBUS_data_BREADY);
    rx_driver_SBUS_data_m_axi_U->BRESP(m_axi_SBUS_data_BRESP);
    rx_driver_SBUS_data_m_axi_U->BID(m_axi_SBUS_data_BID);
    rx_driver_SBUS_data_m_axi_U->BUSER(m_axi_SBUS_data_BUSER);
    rx_driver_SBUS_data_m_axi_U->ACLK(ap_clk);
    rx_driver_SBUS_data_m_axi_U->ARESET(ap_rst_n_inv);
    rx_driver_SBUS_data_m_axi_U->ACLK_EN(ap_var_for_const0);
    rx_driver_SBUS_data_m_axi_U->I_ARVALID(ap_var_for_const6);
    rx_driver_SBUS_data_m_axi_U->I_ARREADY(SBUS_data_ARREADY);
    rx_driver_SBUS_data_m_axi_U->I_ARADDR(ap_var_for_const8);
    rx_driver_SBUS_data_m_axi_U->I_ARID(ap_var_for_const1);
    rx_driver_SBUS_data_m_axi_U->I_ARLEN(ap_var_for_const8);
    rx_driver_SBUS_data_m_axi_U->I_ARSIZE(ap_var_for_const3);
    rx_driver_SBUS_data_m_axi_U->I_ARLOCK(ap_var_for_const4);
    rx_driver_SBUS_data_m_axi_U->I_ARCACHE(ap_var_for_const5);
    rx_driver_SBUS_data_m_axi_U->I_ARQOS(ap_var_for_const5);
    rx_driver_SBUS_data_m_axi_U->I_ARPROT(ap_var_for_const3);
    rx_driver_SBUS_data_m_axi_U->I_ARUSER(ap_var_for_const1);
    rx_driver_SBUS_data_m_axi_U->I_ARBURST(ap_var_for_const4);
    rx_driver_SBUS_data_m_axi_U->I_ARREGION(ap_var_for_const5);
    rx_driver_SBUS_data_m_axi_U->I_RVALID(SBUS_data_RVALID);
    rx_driver_SBUS_data_m_axi_U->I_RREADY(ap_var_for_const6);
    rx_driver_SBUS_data_m_axi_U->I_RDATA(SBUS_data_RDATA);
    rx_driver_SBUS_data_m_axi_U->I_RID(SBUS_data_RID);
    rx_driver_SBUS_data_m_axi_U->I_RUSER(SBUS_data_RUSER);
    rx_driver_SBUS_data_m_axi_U->I_RRESP(SBUS_data_RRESP);
    rx_driver_SBUS_data_m_axi_U->I_RLAST(SBUS_data_RLAST);
    rx_driver_SBUS_data_m_axi_U->I_AWVALID(SBUS_data_AWVALID);
    rx_driver_SBUS_data_m_axi_U->I_AWREADY(SBUS_data_AWREADY);
    rx_driver_SBUS_data_m_axi_U->I_AWADDR(ap_var_for_const8);
    rx_driver_SBUS_data_m_axi_U->I_AWID(ap_var_for_const1);
    rx_driver_SBUS_data_m_axi_U->I_AWLEN(ap_var_for_const9);
    rx_driver_SBUS_data_m_axi_U->I_AWSIZE(ap_var_for_const3);
    rx_driver_SBUS_data_m_axi_U->I_AWLOCK(ap_var_for_const4);
    rx_driver_SBUS_data_m_axi_U->I_AWCACHE(ap_var_for_const5);
    rx_driver_SBUS_data_m_axi_U->I_AWQOS(ap_var_for_const5);
    rx_driver_SBUS_data_m_axi_U->I_AWPROT(ap_var_for_const3);
    rx_driver_SBUS_data_m_axi_U->I_AWUSER(ap_var_for_const1);
    rx_driver_SBUS_data_m_axi_U->I_AWBURST(ap_var_for_const4);
    rx_driver_SBUS_data_m_axi_U->I_AWREGION(ap_var_for_const5);
    rx_driver_SBUS_data_m_axi_U->I_WVALID(SBUS_data_WVALID);
    rx_driver_SBUS_data_m_axi_U->I_WREADY(SBUS_data_WREADY);
    rx_driver_SBUS_data_m_axi_U->I_WDATA(tmp_2_reg_440);
    rx_driver_SBUS_data_m_axi_U->I_WID(ap_var_for_const1);
    rx_driver_SBUS_data_m_axi_U->I_WUSER(ap_var_for_const1);
    rx_driver_SBUS_data_m_axi_U->I_WLAST(ap_var_for_const6);
    rx_driver_SBUS_data_m_axi_U->I_WSTRB(ap_var_for_const10);
    rx_driver_SBUS_data_m_axi_U->I_BVALID(SBUS_data_BVALID);
    rx_driver_SBUS_data_m_axi_U->I_BREADY(SBUS_data_BREADY);
    rx_driver_SBUS_data_m_axi_U->I_BRESP(SBUS_data_BRESP);
    rx_driver_SBUS_data_m_axi_U->I_BID(SBUS_data_BID);
    rx_driver_SBUS_data_m_axi_U->I_BUSER(SBUS_data_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_AXI_UART_ARADDR);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( exitcond_fu_335_p2 );
    sensitive << ( ap_reg_ioackin_AXI_UART_ARREADY );

    SC_METHOD(thread_AXI_UART_ARVALID);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( exitcond_fu_335_p2 );
    sensitive << ( ap_reg_ioackin_AXI_UART_ARREADY );

    SC_METHOD(thread_AXI_UART_AWADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( AXI_UART_BVALID );
    sensitive << ( AXI_UART_addr_reg_387 );
    sensitive << ( AXI_UART_addr_2_reg_409 );
    sensitive << ( AXI_UART_addr_3_reg_416 );
    sensitive << ( ap_reg_ioackin_AXI_UART_AWREADY );

    SC_METHOD(thread_AXI_UART_AWVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( AXI_UART_BVALID );
    sensitive << ( ap_reg_ioackin_AXI_UART_AWREADY );

    SC_METHOD(thread_AXI_UART_BREADY);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( AXI_UART_BVALID );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );
    sensitive << ( ap_block_state8_io );
    sensitive << ( ap_block_state9_io );

    SC_METHOD(thread_AXI_UART_RREADY);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( AXI_UART_RVALID );

    SC_METHOD(thread_AXI_UART_WDATA);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( AXI_UART_BVALID );
    sensitive << ( ap_reg_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_AXI_UART_WVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( AXI_UART_BVALID );
    sensitive << ( ap_reg_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_AXI_UART_addr_2_reg_409);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_AXI_UART_addr_3_reg_416);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_block_state6_io );

    SC_METHOD(thread_AXI_UART_addr_reg_387);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_AXI_UART_blk_n_AR);
    sensitive << ( m_axi_AXI_UART_ARREADY );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( exitcond_fu_335_p2 );

    SC_METHOD(thread_AXI_UART_blk_n_AW);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_AXI_UART_AWREADY );
    sensitive << ( firstSample );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_AXI_UART_blk_n_B);
    sensitive << ( m_axi_AXI_UART_BVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_AXI_UART_blk_n_R);
    sensitive << ( m_axi_AXI_UART_RVALID );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_AXI_UART_blk_n_W);
    sensitive << ( m_axi_AXI_UART_WREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_SBUS_data_AWVALID);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( tmp_fu_330_p2 );
    sensitive << ( ap_reg_ioackin_SBUS_data_AWREADY );

    SC_METHOD(thread_SBUS_data_BREADY);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( SBUS_data_BVALID );
    sensitive << ( ap_predicate_op156_writeresp_state37 );

    SC_METHOD(thread_SBUS_data_WVALID);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_reg_ioackin_SBUS_data_WREADY );

    SC_METHOD(thread_SBUS_data_blk_n_AW);
    sensitive << ( m_axi_SBUS_data_AWREADY );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( tmp_fu_330_p2 );

    SC_METHOD(thread_SBUS_data_blk_n_B);
    sensitive << ( m_axi_SBUS_data_BVALID );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( firstSample_load_reg_383 );
    sensitive << ( tmp_reg_428 );

    SC_METHOD(thread_SBUS_data_blk_n_W);
    sensitive << ( m_axi_SBUS_data_WREADY );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( firstSample );
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );

    SC_METHOD(thread_ap_block_state24_io);
    sensitive << ( tmp_fu_330_p2 );
    sensitive << ( ap_sig_ioackin_SBUS_data_AWREADY );

    SC_METHOD(thread_ap_block_state25_io);
    sensitive << ( exitcond_fu_335_p2 );
    sensitive << ( ap_sig_ioackin_AXI_UART_ARREADY );

    SC_METHOD(thread_ap_block_state37);
    sensitive << ( SBUS_data_BVALID );
    sensitive << ( ap_predicate_op156_writeresp_state37 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_block_state6_io);
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_block_state7_io);
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_block_state8_io);
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_block_state9_io);
    sensitive << ( ap_sig_ioackin_AXI_UART_AWREADY );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( tmp_6_fu_351_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op156_writeresp_state37);
    sensitive << ( firstSample_load_reg_383 );
    sensitive << ( tmp_reg_428 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( tmp_6_fu_351_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_AXI_UART_ARREADY);
    sensitive << ( AXI_UART_ARREADY );
    sensitive << ( ap_reg_ioackin_AXI_UART_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_AXI_UART_AWREADY);
    sensitive << ( AXI_UART_AWREADY );
    sensitive << ( ap_reg_ioackin_AXI_UART_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_AXI_UART_WREADY);
    sensitive << ( AXI_UART_WREADY );
    sensitive << ( ap_reg_ioackin_AXI_UART_WREADY );

    SC_METHOD(thread_ap_sig_ioackin_SBUS_data_AWREADY);
    sensitive << ( SBUS_data_AWREADY );
    sensitive << ( ap_reg_ioackin_SBUS_data_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_SBUS_data_WREADY);
    sensitive << ( SBUS_data_WREADY );
    sensitive << ( ap_reg_ioackin_SBUS_data_WREADY );

    SC_METHOD(thread_ctr_V_1_fu_357_p2);
    sensitive << ( p_014_0_i4_reg_261 );

    SC_METHOD(thread_ctr_V_fu_295_p2);
    sensitive << ( p_014_0_i_reg_239 );

    SC_METHOD(thread_exitcond_fu_335_p2);
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_block_state25_io );
    sensitive << ( index_reg_250 );

    SC_METHOD(thread_firstSample_load_load_fu_272_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );

    SC_METHOD(thread_index_1_fu_341_p2);
    sensitive << ( index_reg_250 );

    SC_METHOD(thread_tmp_1_fu_289_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_014_0_i_reg_239 );

    SC_METHOD(thread_tmp_2_fu_347_p1);
    sensitive << ( AXI_UART_RDATA );

    SC_METHOD(thread_tmp_6_fu_351_p2);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( p_014_0_i4_reg_261 );

    SC_METHOD(thread_tmp_fu_330_p2);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( AXI_UART_addr_1_read_reg_423 );
    sensitive << ( ap_block_state24_io );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( firstSample );
    sensitive << ( firstSample_load_load_fu_272_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( exitcond_fu_335_p2 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( tmp_fu_330_p2 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( AXI_UART_RVALID );
    sensitive << ( AXI_UART_BVALID );
    sensitive << ( SBUS_data_BVALID );
    sensitive << ( ap_block_state1_io );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_sig_ioackin_AXI_UART_WREADY );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state24_io );
    sensitive << ( ap_sig_ioackin_AXI_UART_ARREADY );
    sensitive << ( ap_block_state25_io );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( tmp_1_fu_289_p2 );
    sensitive << ( ap_sig_ioackin_SBUS_data_WREADY );
    sensitive << ( ap_predicate_op156_writeresp_state37 );
    sensitive << ( tmp_6_fu_351_p2 );
    sensitive << ( ap_block_state8_io );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state9_io );
    sensitive << ( ap_block_state7_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const10);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const9);

    ap_CS_fsm = "00000000000000000000000000000000000001";
    firstSample = "1";
    ap_reg_ioackin_AXI_UART_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_AXI_UART_WREADY = SC_LOGIC_0;
    ap_reg_ioackin_AXI_UART_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_SBUS_data_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_SBUS_data_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rx_driver_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWVALID, "(port)m_axi_AXI_UART_AWVALID");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWREADY, "(port)m_axi_AXI_UART_AWREADY");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWADDR, "(port)m_axi_AXI_UART_AWADDR");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWID, "(port)m_axi_AXI_UART_AWID");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWLEN, "(port)m_axi_AXI_UART_AWLEN");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWSIZE, "(port)m_axi_AXI_UART_AWSIZE");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWBURST, "(port)m_axi_AXI_UART_AWBURST");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWLOCK, "(port)m_axi_AXI_UART_AWLOCK");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWCACHE, "(port)m_axi_AXI_UART_AWCACHE");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWPROT, "(port)m_axi_AXI_UART_AWPROT");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWQOS, "(port)m_axi_AXI_UART_AWQOS");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWREGION, "(port)m_axi_AXI_UART_AWREGION");
    sc_trace(mVcdFile, m_axi_AXI_UART_AWUSER, "(port)m_axi_AXI_UART_AWUSER");
    sc_trace(mVcdFile, m_axi_AXI_UART_WVALID, "(port)m_axi_AXI_UART_WVALID");
    sc_trace(mVcdFile, m_axi_AXI_UART_WREADY, "(port)m_axi_AXI_UART_WREADY");
    sc_trace(mVcdFile, m_axi_AXI_UART_WDATA, "(port)m_axi_AXI_UART_WDATA");
    sc_trace(mVcdFile, m_axi_AXI_UART_WSTRB, "(port)m_axi_AXI_UART_WSTRB");
    sc_trace(mVcdFile, m_axi_AXI_UART_WLAST, "(port)m_axi_AXI_UART_WLAST");
    sc_trace(mVcdFile, m_axi_AXI_UART_WID, "(port)m_axi_AXI_UART_WID");
    sc_trace(mVcdFile, m_axi_AXI_UART_WUSER, "(port)m_axi_AXI_UART_WUSER");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARVALID, "(port)m_axi_AXI_UART_ARVALID");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARREADY, "(port)m_axi_AXI_UART_ARREADY");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARADDR, "(port)m_axi_AXI_UART_ARADDR");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARID, "(port)m_axi_AXI_UART_ARID");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARLEN, "(port)m_axi_AXI_UART_ARLEN");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARSIZE, "(port)m_axi_AXI_UART_ARSIZE");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARBURST, "(port)m_axi_AXI_UART_ARBURST");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARLOCK, "(port)m_axi_AXI_UART_ARLOCK");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARCACHE, "(port)m_axi_AXI_UART_ARCACHE");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARPROT, "(port)m_axi_AXI_UART_ARPROT");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARQOS, "(port)m_axi_AXI_UART_ARQOS");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARREGION, "(port)m_axi_AXI_UART_ARREGION");
    sc_trace(mVcdFile, m_axi_AXI_UART_ARUSER, "(port)m_axi_AXI_UART_ARUSER");
    sc_trace(mVcdFile, m_axi_AXI_UART_RVALID, "(port)m_axi_AXI_UART_RVALID");
    sc_trace(mVcdFile, m_axi_AXI_UART_RREADY, "(port)m_axi_AXI_UART_RREADY");
    sc_trace(mVcdFile, m_axi_AXI_UART_RDATA, "(port)m_axi_AXI_UART_RDATA");
    sc_trace(mVcdFile, m_axi_AXI_UART_RLAST, "(port)m_axi_AXI_UART_RLAST");
    sc_trace(mVcdFile, m_axi_AXI_UART_RID, "(port)m_axi_AXI_UART_RID");
    sc_trace(mVcdFile, m_axi_AXI_UART_RUSER, "(port)m_axi_AXI_UART_RUSER");
    sc_trace(mVcdFile, m_axi_AXI_UART_RRESP, "(port)m_axi_AXI_UART_RRESP");
    sc_trace(mVcdFile, m_axi_AXI_UART_BVALID, "(port)m_axi_AXI_UART_BVALID");
    sc_trace(mVcdFile, m_axi_AXI_UART_BREADY, "(port)m_axi_AXI_UART_BREADY");
    sc_trace(mVcdFile, m_axi_AXI_UART_BRESP, "(port)m_axi_AXI_UART_BRESP");
    sc_trace(mVcdFile, m_axi_AXI_UART_BID, "(port)m_axi_AXI_UART_BID");
    sc_trace(mVcdFile, m_axi_AXI_UART_BUSER, "(port)m_axi_AXI_UART_BUSER");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWVALID, "(port)m_axi_SBUS_data_AWVALID");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWREADY, "(port)m_axi_SBUS_data_AWREADY");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWADDR, "(port)m_axi_SBUS_data_AWADDR");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWID, "(port)m_axi_SBUS_data_AWID");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWLEN, "(port)m_axi_SBUS_data_AWLEN");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWSIZE, "(port)m_axi_SBUS_data_AWSIZE");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWBURST, "(port)m_axi_SBUS_data_AWBURST");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWLOCK, "(port)m_axi_SBUS_data_AWLOCK");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWCACHE, "(port)m_axi_SBUS_data_AWCACHE");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWPROT, "(port)m_axi_SBUS_data_AWPROT");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWQOS, "(port)m_axi_SBUS_data_AWQOS");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWREGION, "(port)m_axi_SBUS_data_AWREGION");
    sc_trace(mVcdFile, m_axi_SBUS_data_AWUSER, "(port)m_axi_SBUS_data_AWUSER");
    sc_trace(mVcdFile, m_axi_SBUS_data_WVALID, "(port)m_axi_SBUS_data_WVALID");
    sc_trace(mVcdFile, m_axi_SBUS_data_WREADY, "(port)m_axi_SBUS_data_WREADY");
    sc_trace(mVcdFile, m_axi_SBUS_data_WDATA, "(port)m_axi_SBUS_data_WDATA");
    sc_trace(mVcdFile, m_axi_SBUS_data_WSTRB, "(port)m_axi_SBUS_data_WSTRB");
    sc_trace(mVcdFile, m_axi_SBUS_data_WLAST, "(port)m_axi_SBUS_data_WLAST");
    sc_trace(mVcdFile, m_axi_SBUS_data_WID, "(port)m_axi_SBUS_data_WID");
    sc_trace(mVcdFile, m_axi_SBUS_data_WUSER, "(port)m_axi_SBUS_data_WUSER");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARVALID, "(port)m_axi_SBUS_data_ARVALID");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARREADY, "(port)m_axi_SBUS_data_ARREADY");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARADDR, "(port)m_axi_SBUS_data_ARADDR");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARID, "(port)m_axi_SBUS_data_ARID");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARLEN, "(port)m_axi_SBUS_data_ARLEN");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARSIZE, "(port)m_axi_SBUS_data_ARSIZE");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARBURST, "(port)m_axi_SBUS_data_ARBURST");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARLOCK, "(port)m_axi_SBUS_data_ARLOCK");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARCACHE, "(port)m_axi_SBUS_data_ARCACHE");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARPROT, "(port)m_axi_SBUS_data_ARPROT");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARQOS, "(port)m_axi_SBUS_data_ARQOS");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARREGION, "(port)m_axi_SBUS_data_ARREGION");
    sc_trace(mVcdFile, m_axi_SBUS_data_ARUSER, "(port)m_axi_SBUS_data_ARUSER");
    sc_trace(mVcdFile, m_axi_SBUS_data_RVALID, "(port)m_axi_SBUS_data_RVALID");
    sc_trace(mVcdFile, m_axi_SBUS_data_RREADY, "(port)m_axi_SBUS_data_RREADY");
    sc_trace(mVcdFile, m_axi_SBUS_data_RDATA, "(port)m_axi_SBUS_data_RDATA");
    sc_trace(mVcdFile, m_axi_SBUS_data_RLAST, "(port)m_axi_SBUS_data_RLAST");
    sc_trace(mVcdFile, m_axi_SBUS_data_RID, "(port)m_axi_SBUS_data_RID");
    sc_trace(mVcdFile, m_axi_SBUS_data_RUSER, "(port)m_axi_SBUS_data_RUSER");
    sc_trace(mVcdFile, m_axi_SBUS_data_RRESP, "(port)m_axi_SBUS_data_RRESP");
    sc_trace(mVcdFile, m_axi_SBUS_data_BVALID, "(port)m_axi_SBUS_data_BVALID");
    sc_trace(mVcdFile, m_axi_SBUS_data_BREADY, "(port)m_axi_SBUS_data_BREADY");
    sc_trace(mVcdFile, m_axi_SBUS_data_BRESP, "(port)m_axi_SBUS_data_BRESP");
    sc_trace(mVcdFile, m_axi_SBUS_data_BID, "(port)m_axi_SBUS_data_BID");
    sc_trace(mVcdFile, m_axi_SBUS_data_BUSER, "(port)m_axi_SBUS_data_BUSER");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, firstSample, "firstSample");
    sc_trace(mVcdFile, AXI_UART_blk_n_AW, "AXI_UART_blk_n_AW");
    sc_trace(mVcdFile, firstSample_load_load_fu_272_p1, "firstSample_load_load_fu_272_p1");
    sc_trace(mVcdFile, AXI_UART_blk_n_W, "AXI_UART_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, AXI_UART_blk_n_B, "AXI_UART_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, AXI_UART_blk_n_AR, "AXI_UART_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, AXI_UART_blk_n_R, "AXI_UART_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, exitcond_fu_335_p2, "exitcond_fu_335_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, SBUS_data_blk_n_AW, "SBUS_data_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, tmp_fu_330_p2, "tmp_fu_330_p2");
    sc_trace(mVcdFile, SBUS_data_blk_n_W, "SBUS_data_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, SBUS_data_blk_n_B, "SBUS_data_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, firstSample_load_reg_383, "firstSample_load_reg_383");
    sc_trace(mVcdFile, tmp_reg_428, "tmp_reg_428");
    sc_trace(mVcdFile, AXI_UART_AWVALID, "AXI_UART_AWVALID");
    sc_trace(mVcdFile, AXI_UART_AWREADY, "AXI_UART_AWREADY");
    sc_trace(mVcdFile, AXI_UART_AWADDR, "AXI_UART_AWADDR");
    sc_trace(mVcdFile, AXI_UART_WVALID, "AXI_UART_WVALID");
    sc_trace(mVcdFile, AXI_UART_WREADY, "AXI_UART_WREADY");
    sc_trace(mVcdFile, AXI_UART_WDATA, "AXI_UART_WDATA");
    sc_trace(mVcdFile, AXI_UART_ARVALID, "AXI_UART_ARVALID");
    sc_trace(mVcdFile, AXI_UART_ARREADY, "AXI_UART_ARREADY");
    sc_trace(mVcdFile, AXI_UART_ARADDR, "AXI_UART_ARADDR");
    sc_trace(mVcdFile, AXI_UART_RVALID, "AXI_UART_RVALID");
    sc_trace(mVcdFile, AXI_UART_RREADY, "AXI_UART_RREADY");
    sc_trace(mVcdFile, AXI_UART_RDATA, "AXI_UART_RDATA");
    sc_trace(mVcdFile, AXI_UART_RLAST, "AXI_UART_RLAST");
    sc_trace(mVcdFile, AXI_UART_RID, "AXI_UART_RID");
    sc_trace(mVcdFile, AXI_UART_RUSER, "AXI_UART_RUSER");
    sc_trace(mVcdFile, AXI_UART_RRESP, "AXI_UART_RRESP");
    sc_trace(mVcdFile, AXI_UART_BVALID, "AXI_UART_BVALID");
    sc_trace(mVcdFile, AXI_UART_BREADY, "AXI_UART_BREADY");
    sc_trace(mVcdFile, AXI_UART_BRESP, "AXI_UART_BRESP");
    sc_trace(mVcdFile, AXI_UART_BID, "AXI_UART_BID");
    sc_trace(mVcdFile, AXI_UART_BUSER, "AXI_UART_BUSER");
    sc_trace(mVcdFile, SBUS_data_AWVALID, "SBUS_data_AWVALID");
    sc_trace(mVcdFile, SBUS_data_AWREADY, "SBUS_data_AWREADY");
    sc_trace(mVcdFile, SBUS_data_WVALID, "SBUS_data_WVALID");
    sc_trace(mVcdFile, SBUS_data_WREADY, "SBUS_data_WREADY");
    sc_trace(mVcdFile, SBUS_data_ARREADY, "SBUS_data_ARREADY");
    sc_trace(mVcdFile, SBUS_data_RVALID, "SBUS_data_RVALID");
    sc_trace(mVcdFile, SBUS_data_RDATA, "SBUS_data_RDATA");
    sc_trace(mVcdFile, SBUS_data_RLAST, "SBUS_data_RLAST");
    sc_trace(mVcdFile, SBUS_data_RID, "SBUS_data_RID");
    sc_trace(mVcdFile, SBUS_data_RUSER, "SBUS_data_RUSER");
    sc_trace(mVcdFile, SBUS_data_RRESP, "SBUS_data_RRESP");
    sc_trace(mVcdFile, SBUS_data_BVALID, "SBUS_data_BVALID");
    sc_trace(mVcdFile, SBUS_data_BREADY, "SBUS_data_BREADY");
    sc_trace(mVcdFile, SBUS_data_BRESP, "SBUS_data_BRESP");
    sc_trace(mVcdFile, SBUS_data_BID, "SBUS_data_BID");
    sc_trace(mVcdFile, SBUS_data_BUSER, "SBUS_data_BUSER");
    sc_trace(mVcdFile, ap_sig_ioackin_AXI_UART_AWREADY, "ap_sig_ioackin_AXI_UART_AWREADY");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, AXI_UART_addr_reg_387, "AXI_UART_addr_reg_387");
    sc_trace(mVcdFile, ctr_V_fu_295_p2, "ctr_V_fu_295_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_sig_ioackin_AXI_UART_WREADY, "ap_sig_ioackin_AXI_UART_WREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, AXI_UART_addr_2_reg_409, "AXI_UART_addr_2_reg_409");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, AXI_UART_addr_3_reg_416, "AXI_UART_addr_3_reg_416");
    sc_trace(mVcdFile, ap_block_state6_io, "ap_block_state6_io");
    sc_trace(mVcdFile, AXI_UART_addr_1_read_reg_423, "AXI_UART_addr_1_read_reg_423");
    sc_trace(mVcdFile, ap_sig_ioackin_SBUS_data_AWREADY, "ap_sig_ioackin_SBUS_data_AWREADY");
    sc_trace(mVcdFile, ap_block_state24_io, "ap_block_state24_io");
    sc_trace(mVcdFile, index_1_fu_341_p2, "index_1_fu_341_p2");
    sc_trace(mVcdFile, index_1_reg_435, "index_1_reg_435");
    sc_trace(mVcdFile, ap_sig_ioackin_AXI_UART_ARREADY, "ap_sig_ioackin_AXI_UART_ARREADY");
    sc_trace(mVcdFile, ap_block_state25_io, "ap_block_state25_io");
    sc_trace(mVcdFile, tmp_2_fu_347_p1, "tmp_2_fu_347_p1");
    sc_trace(mVcdFile, tmp_2_reg_440, "tmp_2_reg_440");
    sc_trace(mVcdFile, ctr_V_1_fu_357_p2, "ctr_V_1_fu_357_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, p_014_0_i_reg_239, "p_014_0_i_reg_239");
    sc_trace(mVcdFile, tmp_1_fu_289_p2, "tmp_1_fu_289_p2");
    sc_trace(mVcdFile, index_reg_250, "index_reg_250");
    sc_trace(mVcdFile, ap_sig_ioackin_SBUS_data_WREADY, "ap_sig_ioackin_SBUS_data_WREADY");
    sc_trace(mVcdFile, p_014_0_i4_reg_261, "p_014_0_i4_reg_261");
    sc_trace(mVcdFile, ap_predicate_op156_writeresp_state37, "ap_predicate_op156_writeresp_state37");
    sc_trace(mVcdFile, ap_block_state37, "ap_block_state37");
    sc_trace(mVcdFile, tmp_6_fu_351_p2, "tmp_6_fu_351_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_AXI_UART_AWREADY, "ap_reg_ioackin_AXI_UART_AWREADY");
    sc_trace(mVcdFile, ap_block_state8_io, "ap_block_state8_io");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_reg_ioackin_AXI_UART_WREADY, "ap_reg_ioackin_AXI_UART_WREADY");
    sc_trace(mVcdFile, ap_block_state9_io, "ap_block_state9_io");
    sc_trace(mVcdFile, ap_reg_ioackin_AXI_UART_ARREADY, "ap_reg_ioackin_AXI_UART_ARREADY");
    sc_trace(mVcdFile, ap_block_state7_io, "ap_block_state7_io");
    sc_trace(mVcdFile, ap_reg_ioackin_SBUS_data_AWREADY, "ap_reg_ioackin_SBUS_data_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_SBUS_data_WREADY, "ap_reg_ioackin_SBUS_data_WREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("rx_driver.hdltvin.dat");
    mHdltvoutHandle.open("rx_driver.hdltvout.dat");
}

rx_driver::~rx_driver() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete rx_driver_CTRL_s_axi_U;
    delete rx_driver_AXI_UART_m_axi_U;
    delete rx_driver_SBUS_data_m_axi_U;
}

void rx_driver::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void rx_driver::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void rx_driver::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv32_0;
}

void rx_driver::thread_ap_var_for_const10() {
    ap_var_for_const10 = ap_const_lv1_1;
}

void rx_driver::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void rx_driver::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void rx_driver::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void rx_driver::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void rx_driver::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void rx_driver::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void rx_driver::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv32_19;
}

void rx_driver::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_AXI_UART_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_ARREADY.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state25_io.read()) && 
              esl_seteq<1,1,1>(exitcond_fu_335_p2.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())))) {
            ap_reg_ioackin_AXI_UART_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
                     esl_seteq<1,1,1>(exitcond_fu_335_p2.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_ARREADY.read())))) {
            ap_reg_ioackin_AXI_UART_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0;
    } else {
        if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state6_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state9_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state7_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
            ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_AWREADY.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read())))) {
            ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state6_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
             (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state9_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
             (!(esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state7_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
            ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_WREADY.read())))) {
            ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_SBUS_data_AWREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(tmp_fu_330_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state24_io.read())) {
                ap_reg_ioackin_SBUS_data_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, SBUS_data_AWREADY.read())) {
                ap_reg_ioackin_SBUS_data_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_SBUS_data_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_SBUS_data_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_SBUS_data_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, SBUS_data_WREADY.read())) {
                ap_reg_ioackin_SBUS_data_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        firstSample = ap_const_lv1_1;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1))) {
            firstSample = ap_const_lv1_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state24_io.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(tmp_fu_330_p2.read(), ap_const_lv1_1))) {
        index_reg_250 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_sig_ioackin_SBUS_data_WREADY.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        index_reg_250 = index_1_reg_435.read();
    }
    if ((esl_seteq<1,1,1>(tmp_6_fu_351_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        p_014_0_i4_reg_261 = ctr_V_1_fu_357_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_predicate_op156_writeresp_state37.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, SBUS_data_BVALID.read())) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        p_014_0_i4_reg_261 = ap_const_lv20_0;
    }
    if ((esl_seteq<1,1,1>(tmp_1_fu_289_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_014_0_i_reg_239 = ctr_V_fu_295_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(firstSample_load_load_fu_272_p1.read(), ap_const_lv1_0))) {
        p_014_0_i_reg_239 = ap_const_lv19_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_RVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        AXI_UART_addr_1_read_reg_423 = AXI_UART_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        firstSample_load_reg_383 = firstSample.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state25_io.read()))) {
        index_1_reg_435 = index_1_fu_341_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_RVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        tmp_2_reg_440 = tmp_2_fu_347_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state24_io.read()))) {
        tmp_reg_428 = tmp_fu_330_p2.read();
    }
}

void rx_driver::thread_AXI_UART_ARADDR() {
    AXI_UART_ARADDR =  (sc_lv<32>) (ap_const_lv64_1000);
}

void rx_driver::thread_AXI_UART_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_335_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_ARREADY.read())))) {
        AXI_UART_ARVALID = ap_const_logic_1;
    } else {
        AXI_UART_ARVALID = ap_const_logic_0;
    }
}

void rx_driver::thread_AXI_UART_AWADDR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read())))) {
        AXI_UART_AWADDR = AXI_UART_addr_3_reg_416.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()))) {
        AXI_UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_1008);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()))) {
        AXI_UART_AWADDR = AXI_UART_addr_2_reg_409.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()))) {
        AXI_UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_1004);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()))) {
        AXI_UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_1000);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()))) {
        AXI_UART_AWADDR = AXI_UART_addr_reg_387.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()))) {
        AXI_UART_AWADDR =  (sc_lv<32>) (ap_const_lv64_100C);
    } else {
        AXI_UART_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void rx_driver::thread_AXI_UART_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read())))) {
        AXI_UART_AWVALID = ap_const_logic_1;
    } else {
        AXI_UART_AWVALID = ap_const_logic_0;
    }
}

void rx_driver::thread_AXI_UART_BREADY() {
    if (((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state9_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (!(esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        AXI_UART_BREADY = ap_const_logic_1;
    } else {
        AXI_UART_BREADY = ap_const_logic_0;
    }
}

void rx_driver::thread_AXI_UART_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_RVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_RVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())))) {
        AXI_UART_RREADY = ap_const_logic_1;
    } else {
        AXI_UART_RREADY = ap_const_logic_0;
    }
}

void rx_driver::thread_AXI_UART_WDATA() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read()))) {
        AXI_UART_WDATA = ap_const_lv32_11;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read()))) {
        AXI_UART_WDATA = ap_const_lv32_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read()))) {
        AXI_UART_WDATA = ap_const_lv32_1F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read()))) {
        AXI_UART_WDATA = ap_const_lv32_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())))) {
        AXI_UART_WDATA = ap_const_lv32_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read()))) {
        AXI_UART_WDATA = ap_const_lv32_80;
    } else {
        AXI_UART_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void rx_driver::thread_AXI_UART_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())))) {
        AXI_UART_WVALID = ap_const_logic_1;
    } else {
        AXI_UART_WVALID = ap_const_logic_0;
    }
}

void rx_driver::thread_AXI_UART_addr_2_reg_409() {
    AXI_UART_addr_2_reg_409 =  (sc_lv<32>) (ap_const_lv64_1004);
}

void rx_driver::thread_AXI_UART_addr_3_reg_416() {
    AXI_UART_addr_3_reg_416 =  (sc_lv<32>) (ap_const_lv64_1008);
}

void rx_driver::thread_AXI_UART_addr_reg_387() {
    AXI_UART_addr_reg_387 =  (sc_lv<32>) (ap_const_lv64_100C);
}

void rx_driver::thread_AXI_UART_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_335_p2.read(), ap_const_lv1_0)))) {
        AXI_UART_blk_n_AR = m_axi_AXI_UART_ARREADY.read();
    } else {
        AXI_UART_blk_n_AR = ap_const_logic_1;
    }
}

void rx_driver::thread_AXI_UART_blk_n_AW() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        AXI_UART_blk_n_AW = m_axi_AXI_UART_AWREADY.read();
    } else {
        AXI_UART_blk_n_AW = ap_const_logic_1;
    }
}

void rx_driver::thread_AXI_UART_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        AXI_UART_blk_n_B = m_axi_AXI_UART_BVALID.read();
    } else {
        AXI_UART_blk_n_B = ap_const_logic_1;
    }
}

void rx_driver::thread_AXI_UART_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        AXI_UART_blk_n_R = m_axi_AXI_UART_RVALID.read();
    } else {
        AXI_UART_blk_n_R = ap_const_logic_1;
    }
}

void rx_driver::thread_AXI_UART_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        AXI_UART_blk_n_W = m_axi_AXI_UART_WREADY.read();
    } else {
        AXI_UART_blk_n_W = ap_const_logic_1;
    }
}

void rx_driver::thread_SBUS_data_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(tmp_fu_330_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_SBUS_data_AWREADY.read()))) {
        SBUS_data_AWVALID = ap_const_logic_1;
    } else {
        SBUS_data_AWVALID = ap_const_logic_0;
    }
}

void rx_driver::thread_SBUS_data_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
         esl_seteq<1,1,1>(ap_predicate_op156_writeresp_state37.read(), ap_const_boolean_1) && 
         !(esl_seteq<1,1,1>(ap_predicate_op156_writeresp_state37.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, SBUS_data_BVALID.read())))) {
        SBUS_data_BREADY = ap_const_logic_1;
    } else {
        SBUS_data_BREADY = ap_const_logic_0;
    }
}

void rx_driver::thread_SBUS_data_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_SBUS_data_WREADY.read()))) {
        SBUS_data_WVALID = ap_const_logic_1;
    } else {
        SBUS_data_WVALID = ap_const_logic_0;
    }
}

void rx_driver::thread_SBUS_data_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(tmp_fu_330_p2.read(), ap_const_lv1_1))) {
        SBUS_data_blk_n_AW = m_axi_SBUS_data_AWREADY.read();
    } else {
        SBUS_data_blk_n_AW = ap_const_logic_1;
    }
}

void rx_driver::thread_SBUS_data_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, firstSample_load_reg_383.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_428.read()))) {
        SBUS_data_blk_n_B = m_axi_SBUS_data_BVALID.read();
    } else {
        SBUS_data_blk_n_B = ap_const_logic_1;
    }
}

void rx_driver::thread_SBUS_data_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        SBUS_data_blk_n_W = m_axi_SBUS_data_WREADY.read();
    } else {
        SBUS_data_blk_n_W = ap_const_logic_1;
    }
}

void rx_driver::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void rx_driver::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void rx_driver::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void rx_driver::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void rx_driver::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void rx_driver::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void rx_driver::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void rx_driver::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void rx_driver::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void rx_driver::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void rx_driver::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void rx_driver::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void rx_driver::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void rx_driver::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void rx_driver::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void rx_driver::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void rx_driver::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void rx_driver::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void rx_driver::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void rx_driver::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void rx_driver::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void rx_driver::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void rx_driver::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void rx_driver::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()));
}

void rx_driver::thread_ap_block_state24_io() {
    ap_block_state24_io = (esl_seteq<1,1,1>(tmp_fu_330_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_SBUS_data_AWREADY.read()));
}

void rx_driver::thread_ap_block_state25_io() {
    ap_block_state25_io = (esl_seteq<1,1,1>(exitcond_fu_335_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_ARREADY.read()));
}

void rx_driver::thread_ap_block_state37() {
    ap_block_state37 = (esl_seteq<1,1,1>(ap_predicate_op156_writeresp_state37.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, SBUS_data_BVALID.read()));
}

void rx_driver::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0));
}

void rx_driver::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0));
}

void rx_driver::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0));
}

void rx_driver::thread_ap_block_state6_io() {
    ap_block_state6_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0));
}

void rx_driver::thread_ap_block_state7_io() {
    ap_block_state7_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0));
}

void rx_driver::thread_ap_block_state8_io() {
    ap_block_state8_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0));
}

void rx_driver::thread_ap_block_state9_io() {
    ap_block_state9_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_AXI_UART_AWREADY.read()) || esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0));
}

void rx_driver::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         esl_seteq<1,1,1>(tmp_6_fu_351_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void rx_driver::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rx_driver::thread_ap_predicate_op156_writeresp_state37() {
    ap_predicate_op156_writeresp_state37 = (esl_seteq<1,1,1>(ap_const_lv1_1, firstSample_load_reg_383.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_428.read()));
}

void rx_driver::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         esl_seteq<1,1,1>(tmp_6_fu_351_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rx_driver::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void rx_driver::thread_ap_sig_ioackin_AXI_UART_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_ARREADY.read())) {
        ap_sig_ioackin_AXI_UART_ARREADY = AXI_UART_ARREADY.read();
    } else {
        ap_sig_ioackin_AXI_UART_ARREADY = ap_const_logic_1;
    }
}

void rx_driver::thread_ap_sig_ioackin_AXI_UART_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_AWREADY.read())) {
        ap_sig_ioackin_AXI_UART_AWREADY = AXI_UART_AWREADY.read();
    } else {
        ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_1;
    }
}

void rx_driver::thread_ap_sig_ioackin_AXI_UART_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_AXI_UART_WREADY.read())) {
        ap_sig_ioackin_AXI_UART_WREADY = AXI_UART_WREADY.read();
    } else {
        ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_1;
    }
}

void rx_driver::thread_ap_sig_ioackin_SBUS_data_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_SBUS_data_AWREADY.read())) {
        ap_sig_ioackin_SBUS_data_AWREADY = SBUS_data_AWREADY.read();
    } else {
        ap_sig_ioackin_SBUS_data_AWREADY = ap_const_logic_1;
    }
}

void rx_driver::thread_ap_sig_ioackin_SBUS_data_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_SBUS_data_WREADY.read())) {
        ap_sig_ioackin_SBUS_data_WREADY = SBUS_data_WREADY.read();
    } else {
        ap_sig_ioackin_SBUS_data_WREADY = ap_const_logic_1;
    }
}

void rx_driver::thread_ctr_V_1_fu_357_p2() {
    ctr_V_1_fu_357_p2 = (!p_014_0_i4_reg_261.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(p_014_0_i4_reg_261.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void rx_driver::thread_ctr_V_fu_295_p2() {
    ctr_V_fu_295_p2 = (!p_014_0_i_reg_239.read().is_01() || !ap_const_lv19_1.is_01())? sc_lv<19>(): (sc_biguint<19>(p_014_0_i_reg_239.read()) + sc_biguint<19>(ap_const_lv19_1));
}

void rx_driver::thread_exitcond_fu_335_p2() {
    exitcond_fu_335_p2 = (!index_reg_250.read().is_01() || !ap_const_lv5_19.is_01())? sc_lv<1>(): sc_lv<1>(index_reg_250.read() == ap_const_lv5_19);
}

void rx_driver::thread_firstSample_load_load_fu_272_p1() {
    firstSample_load_load_fu_272_p1 = firstSample.read();
}

void rx_driver::thread_index_1_fu_341_p2() {
    index_1_fu_341_p2 = (!index_reg_250.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(index_reg_250.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void rx_driver::thread_tmp_1_fu_289_p2() {
    tmp_1_fu_289_p2 = (!p_014_0_i_reg_239.read().is_01() || !ap_const_lv19_493E0.is_01())? sc_lv<1>(): sc_lv<1>(p_014_0_i_reg_239.read() == ap_const_lv19_493E0);
}

void rx_driver::thread_tmp_2_fu_347_p1() {
    tmp_2_fu_347_p1 = AXI_UART_RDATA.read().range(8-1, 0);
}

void rx_driver::thread_tmp_6_fu_351_p2() {
    tmp_6_fu_351_p2 = (!p_014_0_i4_reg_261.read().is_01() || !ap_const_lv20_927C0.is_01())? sc_lv<1>(): sc_lv<1>(p_014_0_i4_reg_261.read() == ap_const_lv20_927C0);
}

void rx_driver::thread_tmp_fu_330_p2() {
    tmp_fu_330_p2 = (!AXI_UART_addr_1_read_reg_423.read().is_01() || !ap_const_lv32_F.is_01())? sc_lv<1>(): sc_lv<1>(AXI_UART_addr_1_read_reg_423.read() == ap_const_lv32_F);
}

void rx_driver::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(firstSample_load_load_fu_272_p1.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(firstSample.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_1_fu_289_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state37;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state6_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state7_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state9_io.read()) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((!(esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_WREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, AXI_UART_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_BVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_AXI_UART_ARREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_RVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state24_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(tmp_fu_330_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state24_io.read()) && esl_seteq<1,1,1>(tmp_fu_330_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
                ap_NS_fsm = ap_ST_fsm_state37;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state25_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(exitcond_fu_335_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state25_io.read()) && esl_seteq<1,1,1>(exitcond_fu_335_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, AXI_UART_RVALID.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
                ap_NS_fsm = ap_ST_fsm_state33;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_SBUS_data_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            if ((!(esl_seteq<1,1,1>(ap_predicate_op156_writeresp_state37.read(), ap_const_boolean_1) && esl_seteq<1,1,1>(ap_const_logic_0, SBUS_data_BVALID.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
                ap_NS_fsm = ap_ST_fsm_state38;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 137438953472 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(tmp_6_fu_351_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state38;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<38>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void rx_driver::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_AXI_UART_AWVALID\" :  \"" << m_axi_AXI_UART_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_AWREADY\" :  \"" << m_axi_AXI_UART_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWADDR\" :  \"" << m_axi_AXI_UART_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWID\" :  \"" << m_axi_AXI_UART_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWLEN\" :  \"" << m_axi_AXI_UART_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWSIZE\" :  \"" << m_axi_AXI_UART_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWBURST\" :  \"" << m_axi_AXI_UART_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWLOCK\" :  \"" << m_axi_AXI_UART_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWCACHE\" :  \"" << m_axi_AXI_UART_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWPROT\" :  \"" << m_axi_AXI_UART_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWQOS\" :  \"" << m_axi_AXI_UART_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWREGION\" :  \"" << m_axi_AXI_UART_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_AWUSER\" :  \"" << m_axi_AXI_UART_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_WVALID\" :  \"" << m_axi_AXI_UART_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_WREADY\" :  \"" << m_axi_AXI_UART_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_WDATA\" :  \"" << m_axi_AXI_UART_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_WSTRB\" :  \"" << m_axi_AXI_UART_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_WLAST\" :  \"" << m_axi_AXI_UART_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_WID\" :  \"" << m_axi_AXI_UART_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_WUSER\" :  \"" << m_axi_AXI_UART_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARVALID\" :  \"" << m_axi_AXI_UART_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_ARREADY\" :  \"" << m_axi_AXI_UART_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARADDR\" :  \"" << m_axi_AXI_UART_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARID\" :  \"" << m_axi_AXI_UART_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARLEN\" :  \"" << m_axi_AXI_UART_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARSIZE\" :  \"" << m_axi_AXI_UART_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARBURST\" :  \"" << m_axi_AXI_UART_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARLOCK\" :  \"" << m_axi_AXI_UART_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARCACHE\" :  \"" << m_axi_AXI_UART_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARPROT\" :  \"" << m_axi_AXI_UART_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARQOS\" :  \"" << m_axi_AXI_UART_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARREGION\" :  \"" << m_axi_AXI_UART_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_ARUSER\" :  \"" << m_axi_AXI_UART_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_RVALID\" :  \"" << m_axi_AXI_UART_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_RREADY\" :  \"" << m_axi_AXI_UART_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_RDATA\" :  \"" << m_axi_AXI_UART_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_RLAST\" :  \"" << m_axi_AXI_UART_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_RID\" :  \"" << m_axi_AXI_UART_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_RUSER\" :  \"" << m_axi_AXI_UART_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_RRESP\" :  \"" << m_axi_AXI_UART_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_BVALID\" :  \"" << m_axi_AXI_UART_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_AXI_UART_BREADY\" :  \"" << m_axi_AXI_UART_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_BRESP\" :  \"" << m_axi_AXI_UART_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_BID\" :  \"" << m_axi_AXI_UART_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_AXI_UART_BUSER\" :  \"" << m_axi_AXI_UART_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWVALID\" :  \"" << m_axi_SBUS_data_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_AWREADY\" :  \"" << m_axi_SBUS_data_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWADDR\" :  \"" << m_axi_SBUS_data_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWID\" :  \"" << m_axi_SBUS_data_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWLEN\" :  \"" << m_axi_SBUS_data_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWSIZE\" :  \"" << m_axi_SBUS_data_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWBURST\" :  \"" << m_axi_SBUS_data_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWLOCK\" :  \"" << m_axi_SBUS_data_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWCACHE\" :  \"" << m_axi_SBUS_data_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWPROT\" :  \"" << m_axi_SBUS_data_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWQOS\" :  \"" << m_axi_SBUS_data_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWREGION\" :  \"" << m_axi_SBUS_data_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_AWUSER\" :  \"" << m_axi_SBUS_data_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_WVALID\" :  \"" << m_axi_SBUS_data_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_WREADY\" :  \"" << m_axi_SBUS_data_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_WDATA\" :  \"" << m_axi_SBUS_data_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_WSTRB\" :  \"" << m_axi_SBUS_data_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_WLAST\" :  \"" << m_axi_SBUS_data_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_WID\" :  \"" << m_axi_SBUS_data_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_WUSER\" :  \"" << m_axi_SBUS_data_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARVALID\" :  \"" << m_axi_SBUS_data_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_ARREADY\" :  \"" << m_axi_SBUS_data_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARADDR\" :  \"" << m_axi_SBUS_data_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARID\" :  \"" << m_axi_SBUS_data_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARLEN\" :  \"" << m_axi_SBUS_data_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARSIZE\" :  \"" << m_axi_SBUS_data_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARBURST\" :  \"" << m_axi_SBUS_data_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARLOCK\" :  \"" << m_axi_SBUS_data_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARCACHE\" :  \"" << m_axi_SBUS_data_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARPROT\" :  \"" << m_axi_SBUS_data_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARQOS\" :  \"" << m_axi_SBUS_data_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARREGION\" :  \"" << m_axi_SBUS_data_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_ARUSER\" :  \"" << m_axi_SBUS_data_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_RVALID\" :  \"" << m_axi_SBUS_data_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_RREADY\" :  \"" << m_axi_SBUS_data_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_RDATA\" :  \"" << m_axi_SBUS_data_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_RLAST\" :  \"" << m_axi_SBUS_data_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_RID\" :  \"" << m_axi_SBUS_data_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_RUSER\" :  \"" << m_axi_SBUS_data_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_RRESP\" :  \"" << m_axi_SBUS_data_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_BVALID\" :  \"" << m_axi_SBUS_data_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_SBUS_data_BREADY\" :  \"" << m_axi_SBUS_data_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_BRESP\" :  \"" << m_axi_SBUS_data_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_BID\" :  \"" << m_axi_SBUS_data_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_SBUS_data_BUSER\" :  \"" << m_axi_SBUS_data_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

