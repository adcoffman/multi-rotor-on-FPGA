// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rx_driver,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=750071,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1267,HLS_SYN_LUT=1981,HLS_VERSION=2018_2}" *)

module rx_driver (
        ap_clk,
        ap_rst_n,
        m_axi_AXI_UART_AWVALID,
        m_axi_AXI_UART_AWREADY,
        m_axi_AXI_UART_AWADDR,
        m_axi_AXI_UART_AWID,
        m_axi_AXI_UART_AWLEN,
        m_axi_AXI_UART_AWSIZE,
        m_axi_AXI_UART_AWBURST,
        m_axi_AXI_UART_AWLOCK,
        m_axi_AXI_UART_AWCACHE,
        m_axi_AXI_UART_AWPROT,
        m_axi_AXI_UART_AWQOS,
        m_axi_AXI_UART_AWREGION,
        m_axi_AXI_UART_AWUSER,
        m_axi_AXI_UART_WVALID,
        m_axi_AXI_UART_WREADY,
        m_axi_AXI_UART_WDATA,
        m_axi_AXI_UART_WSTRB,
        m_axi_AXI_UART_WLAST,
        m_axi_AXI_UART_WID,
        m_axi_AXI_UART_WUSER,
        m_axi_AXI_UART_ARVALID,
        m_axi_AXI_UART_ARREADY,
        m_axi_AXI_UART_ARADDR,
        m_axi_AXI_UART_ARID,
        m_axi_AXI_UART_ARLEN,
        m_axi_AXI_UART_ARSIZE,
        m_axi_AXI_UART_ARBURST,
        m_axi_AXI_UART_ARLOCK,
        m_axi_AXI_UART_ARCACHE,
        m_axi_AXI_UART_ARPROT,
        m_axi_AXI_UART_ARQOS,
        m_axi_AXI_UART_ARREGION,
        m_axi_AXI_UART_ARUSER,
        m_axi_AXI_UART_RVALID,
        m_axi_AXI_UART_RREADY,
        m_axi_AXI_UART_RDATA,
        m_axi_AXI_UART_RLAST,
        m_axi_AXI_UART_RID,
        m_axi_AXI_UART_RUSER,
        m_axi_AXI_UART_RRESP,
        m_axi_AXI_UART_BVALID,
        m_axi_AXI_UART_BREADY,
        m_axi_AXI_UART_BRESP,
        m_axi_AXI_UART_BID,
        m_axi_AXI_UART_BUSER,
        m_axi_SBUS_data_AWVALID,
        m_axi_SBUS_data_AWREADY,
        m_axi_SBUS_data_AWADDR,
        m_axi_SBUS_data_AWID,
        m_axi_SBUS_data_AWLEN,
        m_axi_SBUS_data_AWSIZE,
        m_axi_SBUS_data_AWBURST,
        m_axi_SBUS_data_AWLOCK,
        m_axi_SBUS_data_AWCACHE,
        m_axi_SBUS_data_AWPROT,
        m_axi_SBUS_data_AWQOS,
        m_axi_SBUS_data_AWREGION,
        m_axi_SBUS_data_AWUSER,
        m_axi_SBUS_data_WVALID,
        m_axi_SBUS_data_WREADY,
        m_axi_SBUS_data_WDATA,
        m_axi_SBUS_data_WSTRB,
        m_axi_SBUS_data_WLAST,
        m_axi_SBUS_data_WID,
        m_axi_SBUS_data_WUSER,
        m_axi_SBUS_data_ARVALID,
        m_axi_SBUS_data_ARREADY,
        m_axi_SBUS_data_ARADDR,
        m_axi_SBUS_data_ARID,
        m_axi_SBUS_data_ARLEN,
        m_axi_SBUS_data_ARSIZE,
        m_axi_SBUS_data_ARBURST,
        m_axi_SBUS_data_ARLOCK,
        m_axi_SBUS_data_ARCACHE,
        m_axi_SBUS_data_ARPROT,
        m_axi_SBUS_data_ARQOS,
        m_axi_SBUS_data_ARREGION,
        m_axi_SBUS_data_ARUSER,
        m_axi_SBUS_data_RVALID,
        m_axi_SBUS_data_RREADY,
        m_axi_SBUS_data_RDATA,
        m_axi_SBUS_data_RLAST,
        m_axi_SBUS_data_RID,
        m_axi_SBUS_data_RUSER,
        m_axi_SBUS_data_RRESP,
        m_axi_SBUS_data_BVALID,
        m_axi_SBUS_data_BREADY,
        m_axi_SBUS_data_BRESP,
        m_axi_SBUS_data_BID,
        m_axi_SBUS_data_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_state11 = 38'd1024;
parameter    ap_ST_fsm_state12 = 38'd2048;
parameter    ap_ST_fsm_state13 = 38'd4096;
parameter    ap_ST_fsm_state14 = 38'd8192;
parameter    ap_ST_fsm_state15 = 38'd16384;
parameter    ap_ST_fsm_state16 = 38'd32768;
parameter    ap_ST_fsm_state17 = 38'd65536;
parameter    ap_ST_fsm_state18 = 38'd131072;
parameter    ap_ST_fsm_state19 = 38'd262144;
parameter    ap_ST_fsm_state20 = 38'd524288;
parameter    ap_ST_fsm_state21 = 38'd1048576;
parameter    ap_ST_fsm_state22 = 38'd2097152;
parameter    ap_ST_fsm_state23 = 38'd4194304;
parameter    ap_ST_fsm_state24 = 38'd8388608;
parameter    ap_ST_fsm_state25 = 38'd16777216;
parameter    ap_ST_fsm_state26 = 38'd33554432;
parameter    ap_ST_fsm_state27 = 38'd67108864;
parameter    ap_ST_fsm_state28 = 38'd134217728;
parameter    ap_ST_fsm_state29 = 38'd268435456;
parameter    ap_ST_fsm_state30 = 38'd536870912;
parameter    ap_ST_fsm_state31 = 38'd1073741824;
parameter    ap_ST_fsm_state32 = 38'd2147483648;
parameter    ap_ST_fsm_state33 = 38'd4294967296;
parameter    ap_ST_fsm_state34 = 38'd8589934592;
parameter    ap_ST_fsm_state35 = 38'd17179869184;
parameter    ap_ST_fsm_state36 = 38'd34359738368;
parameter    ap_ST_fsm_state37 = 38'd68719476736;
parameter    ap_ST_fsm_state38 = 38'd137438953472;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_UART_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_UART_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_UART_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_UART_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_UART_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_UART_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_UART_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_UART_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_UART_TARGET_ADDR = 0;
parameter    C_M_AXI_AXI_UART_USER_VALUE = 0;
parameter    C_M_AXI_AXI_UART_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_UART_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_SBUS_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_SBUS_DATA_ADDR_WIDTH = 32;
parameter    C_M_AXI_SBUS_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_SBUS_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SBUS_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SBUS_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_SBUS_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_SBUS_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_SBUS_DATA_TARGET_ADDR = 0;
parameter    C_M_AXI_SBUS_DATA_USER_VALUE = 0;
parameter    C_M_AXI_SBUS_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_SBUS_DATA_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_UART_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_SBUS_DATA_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_AXI_UART_AWVALID;
input   m_axi_AXI_UART_AWREADY;
output  [C_M_AXI_AXI_UART_ADDR_WIDTH - 1:0] m_axi_AXI_UART_AWADDR;
output  [C_M_AXI_AXI_UART_ID_WIDTH - 1:0] m_axi_AXI_UART_AWID;
output  [7:0] m_axi_AXI_UART_AWLEN;
output  [2:0] m_axi_AXI_UART_AWSIZE;
output  [1:0] m_axi_AXI_UART_AWBURST;
output  [1:0] m_axi_AXI_UART_AWLOCK;
output  [3:0] m_axi_AXI_UART_AWCACHE;
output  [2:0] m_axi_AXI_UART_AWPROT;
output  [3:0] m_axi_AXI_UART_AWQOS;
output  [3:0] m_axi_AXI_UART_AWREGION;
output  [C_M_AXI_AXI_UART_AWUSER_WIDTH - 1:0] m_axi_AXI_UART_AWUSER;
output   m_axi_AXI_UART_WVALID;
input   m_axi_AXI_UART_WREADY;
output  [C_M_AXI_AXI_UART_DATA_WIDTH - 1:0] m_axi_AXI_UART_WDATA;
output  [C_M_AXI_AXI_UART_WSTRB_WIDTH - 1:0] m_axi_AXI_UART_WSTRB;
output   m_axi_AXI_UART_WLAST;
output  [C_M_AXI_AXI_UART_ID_WIDTH - 1:0] m_axi_AXI_UART_WID;
output  [C_M_AXI_AXI_UART_WUSER_WIDTH - 1:0] m_axi_AXI_UART_WUSER;
output   m_axi_AXI_UART_ARVALID;
input   m_axi_AXI_UART_ARREADY;
output  [C_M_AXI_AXI_UART_ADDR_WIDTH - 1:0] m_axi_AXI_UART_ARADDR;
output  [C_M_AXI_AXI_UART_ID_WIDTH - 1:0] m_axi_AXI_UART_ARID;
output  [7:0] m_axi_AXI_UART_ARLEN;
output  [2:0] m_axi_AXI_UART_ARSIZE;
output  [1:0] m_axi_AXI_UART_ARBURST;
output  [1:0] m_axi_AXI_UART_ARLOCK;
output  [3:0] m_axi_AXI_UART_ARCACHE;
output  [2:0] m_axi_AXI_UART_ARPROT;
output  [3:0] m_axi_AXI_UART_ARQOS;
output  [3:0] m_axi_AXI_UART_ARREGION;
output  [C_M_AXI_AXI_UART_ARUSER_WIDTH - 1:0] m_axi_AXI_UART_ARUSER;
input   m_axi_AXI_UART_RVALID;
output   m_axi_AXI_UART_RREADY;
input  [C_M_AXI_AXI_UART_DATA_WIDTH - 1:0] m_axi_AXI_UART_RDATA;
input   m_axi_AXI_UART_RLAST;
input  [C_M_AXI_AXI_UART_ID_WIDTH - 1:0] m_axi_AXI_UART_RID;
input  [C_M_AXI_AXI_UART_RUSER_WIDTH - 1:0] m_axi_AXI_UART_RUSER;
input  [1:0] m_axi_AXI_UART_RRESP;
input   m_axi_AXI_UART_BVALID;
output   m_axi_AXI_UART_BREADY;
input  [1:0] m_axi_AXI_UART_BRESP;
input  [C_M_AXI_AXI_UART_ID_WIDTH - 1:0] m_axi_AXI_UART_BID;
input  [C_M_AXI_AXI_UART_BUSER_WIDTH - 1:0] m_axi_AXI_UART_BUSER;
output   m_axi_SBUS_data_AWVALID;
input   m_axi_SBUS_data_AWREADY;
output  [C_M_AXI_SBUS_DATA_ADDR_WIDTH - 1:0] m_axi_SBUS_data_AWADDR;
output  [C_M_AXI_SBUS_DATA_ID_WIDTH - 1:0] m_axi_SBUS_data_AWID;
output  [7:0] m_axi_SBUS_data_AWLEN;
output  [2:0] m_axi_SBUS_data_AWSIZE;
output  [1:0] m_axi_SBUS_data_AWBURST;
output  [1:0] m_axi_SBUS_data_AWLOCK;
output  [3:0] m_axi_SBUS_data_AWCACHE;
output  [2:0] m_axi_SBUS_data_AWPROT;
output  [3:0] m_axi_SBUS_data_AWQOS;
output  [3:0] m_axi_SBUS_data_AWREGION;
output  [C_M_AXI_SBUS_DATA_AWUSER_WIDTH - 1:0] m_axi_SBUS_data_AWUSER;
output   m_axi_SBUS_data_WVALID;
input   m_axi_SBUS_data_WREADY;
output  [C_M_AXI_SBUS_DATA_DATA_WIDTH - 1:0] m_axi_SBUS_data_WDATA;
output  [C_M_AXI_SBUS_DATA_WSTRB_WIDTH - 1:0] m_axi_SBUS_data_WSTRB;
output   m_axi_SBUS_data_WLAST;
output  [C_M_AXI_SBUS_DATA_ID_WIDTH - 1:0] m_axi_SBUS_data_WID;
output  [C_M_AXI_SBUS_DATA_WUSER_WIDTH - 1:0] m_axi_SBUS_data_WUSER;
output   m_axi_SBUS_data_ARVALID;
input   m_axi_SBUS_data_ARREADY;
output  [C_M_AXI_SBUS_DATA_ADDR_WIDTH - 1:0] m_axi_SBUS_data_ARADDR;
output  [C_M_AXI_SBUS_DATA_ID_WIDTH - 1:0] m_axi_SBUS_data_ARID;
output  [7:0] m_axi_SBUS_data_ARLEN;
output  [2:0] m_axi_SBUS_data_ARSIZE;
output  [1:0] m_axi_SBUS_data_ARBURST;
output  [1:0] m_axi_SBUS_data_ARLOCK;
output  [3:0] m_axi_SBUS_data_ARCACHE;
output  [2:0] m_axi_SBUS_data_ARPROT;
output  [3:0] m_axi_SBUS_data_ARQOS;
output  [3:0] m_axi_SBUS_data_ARREGION;
output  [C_M_AXI_SBUS_DATA_ARUSER_WIDTH - 1:0] m_axi_SBUS_data_ARUSER;
input   m_axi_SBUS_data_RVALID;
output   m_axi_SBUS_data_RREADY;
input  [C_M_AXI_SBUS_DATA_DATA_WIDTH - 1:0] m_axi_SBUS_data_RDATA;
input   m_axi_SBUS_data_RLAST;
input  [C_M_AXI_SBUS_DATA_ID_WIDTH - 1:0] m_axi_SBUS_data_RID;
input  [C_M_AXI_SBUS_DATA_RUSER_WIDTH - 1:0] m_axi_SBUS_data_RUSER;
input  [1:0] m_axi_SBUS_data_RRESP;
input   m_axi_SBUS_data_BVALID;
output   m_axi_SBUS_data_BREADY;
input  [1:0] m_axi_SBUS_data_BRESP;
input  [C_M_AXI_SBUS_DATA_ID_WIDTH - 1:0] m_axi_SBUS_data_BID;
input  [C_M_AXI_SBUS_DATA_BUSER_WIDTH - 1:0] m_axi_SBUS_data_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [0:0] firstSample;
reg    AXI_UART_blk_n_AW;
wire   [0:0] firstSample_load_load_fu_272_p1;
reg    AXI_UART_blk_n_W;
wire    ap_CS_fsm_state3;
reg    AXI_UART_blk_n_B;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
reg    AXI_UART_blk_n_AR;
wire    ap_CS_fsm_state16;
reg    AXI_UART_blk_n_R;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire   [0:0] exitcond_fu_335_p2;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    SBUS_data_blk_n_AW;
wire    ap_CS_fsm_state24;
wire   [0:0] tmp_fu_330_p2;
reg    SBUS_data_blk_n_W;
wire    ap_CS_fsm_state33;
reg    SBUS_data_blk_n_B;
wire    ap_CS_fsm_state37;
reg   [0:0] firstSample_load_reg_383;
reg   [0:0] tmp_reg_428;
reg    AXI_UART_AWVALID;
wire    AXI_UART_AWREADY;
reg   [31:0] AXI_UART_AWADDR;
reg    AXI_UART_WVALID;
wire    AXI_UART_WREADY;
reg   [31:0] AXI_UART_WDATA;
reg    AXI_UART_ARVALID;
wire    AXI_UART_ARREADY;
wire   [31:0] AXI_UART_ARADDR;
wire    AXI_UART_RVALID;
reg    AXI_UART_RREADY;
wire   [31:0] AXI_UART_RDATA;
wire    AXI_UART_RLAST;
wire   [0:0] AXI_UART_RID;
wire   [0:0] AXI_UART_RUSER;
wire   [1:0] AXI_UART_RRESP;
wire    AXI_UART_BVALID;
reg    AXI_UART_BREADY;
wire   [1:0] AXI_UART_BRESP;
wire   [0:0] AXI_UART_BID;
wire   [0:0] AXI_UART_BUSER;
reg    SBUS_data_AWVALID;
wire    SBUS_data_AWREADY;
reg    SBUS_data_WVALID;
wire    SBUS_data_WREADY;
wire    SBUS_data_ARREADY;
wire    SBUS_data_RVALID;
wire   [7:0] SBUS_data_RDATA;
wire    SBUS_data_RLAST;
wire   [0:0] SBUS_data_RID;
wire   [0:0] SBUS_data_RUSER;
wire   [1:0] SBUS_data_RRESP;
wire    SBUS_data_BVALID;
reg    SBUS_data_BREADY;
wire   [1:0] SBUS_data_BRESP;
wire   [0:0] SBUS_data_BID;
wire   [0:0] SBUS_data_BUSER;
reg    ap_sig_ioackin_AXI_UART_AWREADY;
reg    ap_block_state1_io;
wire   [31:0] AXI_UART_addr_reg_387;
wire   [18:0] ctr_V_fu_295_p2;
wire    ap_CS_fsm_state2;
reg    ap_sig_ioackin_AXI_UART_WREADY;
reg    ap_block_state3_io;
wire   [31:0] AXI_UART_addr_2_reg_409;
reg    ap_block_state4_io;
wire   [31:0] AXI_UART_addr_3_reg_416;
reg    ap_block_state6_io;
reg   [31:0] AXI_UART_addr_1_read_reg_423;
reg    ap_sig_ioackin_SBUS_data_AWREADY;
reg    ap_block_state24_io;
wire   [4:0] index_1_fu_341_p2;
reg   [4:0] index_1_reg_435;
reg    ap_sig_ioackin_AXI_UART_ARREADY;
reg    ap_block_state25_io;
wire   [7:0] tmp_2_fu_347_p1;
reg   [7:0] tmp_2_reg_440;
wire   [19:0] ctr_V_1_fu_357_p2;
wire    ap_CS_fsm_state38;
reg   [18:0] p_014_0_i_reg_239;
wire   [0:0] tmp_1_fu_289_p2;
reg   [4:0] index_reg_250;
reg    ap_sig_ioackin_SBUS_data_WREADY;
reg   [19:0] p_014_0_i4_reg_261;
reg    ap_predicate_op156_writeresp_state37;
reg    ap_block_state37;
wire   [0:0] tmp_6_fu_351_p2;
reg    ap_reg_ioackin_AXI_UART_AWREADY;
reg    ap_block_state8_io;
reg    ap_block_state5_io;
reg    ap_reg_ioackin_AXI_UART_WREADY;
reg    ap_block_state9_io;
reg    ap_reg_ioackin_AXI_UART_ARREADY;
reg    ap_block_state7_io;
reg    ap_reg_ioackin_SBUS_data_AWREADY;
reg    ap_reg_ioackin_SBUS_data_WREADY;
reg   [37:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 firstSample = 1'd1;
#0 ap_reg_ioackin_AXI_UART_AWREADY = 1'b0;
#0 ap_reg_ioackin_AXI_UART_WREADY = 1'b0;
#0 ap_reg_ioackin_AXI_UART_ARREADY = 1'b0;
#0 ap_reg_ioackin_SBUS_data_AWREADY = 1'b0;
#0 ap_reg_ioackin_SBUS_data_WREADY = 1'b0;
end

rx_driver_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
rx_driver_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

rx_driver_AXI_UART_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_UART_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_UART_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_UART_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_UART_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_UART_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_UART_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_UART_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_UART_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_AXI_UART_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_AXI_UART_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_UART_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_UART_CACHE_VALUE ))
rx_driver_AXI_UART_m_axi_U(
    .AWVALID(m_axi_AXI_UART_AWVALID),
    .AWREADY(m_axi_AXI_UART_AWREADY),
    .AWADDR(m_axi_AXI_UART_AWADDR),
    .AWID(m_axi_AXI_UART_AWID),
    .AWLEN(m_axi_AXI_UART_AWLEN),
    .AWSIZE(m_axi_AXI_UART_AWSIZE),
    .AWBURST(m_axi_AXI_UART_AWBURST),
    .AWLOCK(m_axi_AXI_UART_AWLOCK),
    .AWCACHE(m_axi_AXI_UART_AWCACHE),
    .AWPROT(m_axi_AXI_UART_AWPROT),
    .AWQOS(m_axi_AXI_UART_AWQOS),
    .AWREGION(m_axi_AXI_UART_AWREGION),
    .AWUSER(m_axi_AXI_UART_AWUSER),
    .WVALID(m_axi_AXI_UART_WVALID),
    .WREADY(m_axi_AXI_UART_WREADY),
    .WDATA(m_axi_AXI_UART_WDATA),
    .WSTRB(m_axi_AXI_UART_WSTRB),
    .WLAST(m_axi_AXI_UART_WLAST),
    .WID(m_axi_AXI_UART_WID),
    .WUSER(m_axi_AXI_UART_WUSER),
    .ARVALID(m_axi_AXI_UART_ARVALID),
    .ARREADY(m_axi_AXI_UART_ARREADY),
    .ARADDR(m_axi_AXI_UART_ARADDR),
    .ARID(m_axi_AXI_UART_ARID),
    .ARLEN(m_axi_AXI_UART_ARLEN),
    .ARSIZE(m_axi_AXI_UART_ARSIZE),
    .ARBURST(m_axi_AXI_UART_ARBURST),
    .ARLOCK(m_axi_AXI_UART_ARLOCK),
    .ARCACHE(m_axi_AXI_UART_ARCACHE),
    .ARPROT(m_axi_AXI_UART_ARPROT),
    .ARQOS(m_axi_AXI_UART_ARQOS),
    .ARREGION(m_axi_AXI_UART_ARREGION),
    .ARUSER(m_axi_AXI_UART_ARUSER),
    .RVALID(m_axi_AXI_UART_RVALID),
    .RREADY(m_axi_AXI_UART_RREADY),
    .RDATA(m_axi_AXI_UART_RDATA),
    .RLAST(m_axi_AXI_UART_RLAST),
    .RID(m_axi_AXI_UART_RID),
    .RUSER(m_axi_AXI_UART_RUSER),
    .RRESP(m_axi_AXI_UART_RRESP),
    .BVALID(m_axi_AXI_UART_BVALID),
    .BREADY(m_axi_AXI_UART_BREADY),
    .BRESP(m_axi_AXI_UART_BRESP),
    .BID(m_axi_AXI_UART_BID),
    .BUSER(m_axi_AXI_UART_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(AXI_UART_ARVALID),
    .I_ARREADY(AXI_UART_ARREADY),
    .I_ARADDR(AXI_UART_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(AXI_UART_RVALID),
    .I_RREADY(AXI_UART_RREADY),
    .I_RDATA(AXI_UART_RDATA),
    .I_RID(AXI_UART_RID),
    .I_RUSER(AXI_UART_RUSER),
    .I_RRESP(AXI_UART_RRESP),
    .I_RLAST(AXI_UART_RLAST),
    .I_AWVALID(AXI_UART_AWVALID),
    .I_AWREADY(AXI_UART_AWREADY),
    .I_AWADDR(AXI_UART_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(AXI_UART_WVALID),
    .I_WREADY(AXI_UART_WREADY),
    .I_WDATA(AXI_UART_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(AXI_UART_BVALID),
    .I_BREADY(AXI_UART_BREADY),
    .I_BRESP(AXI_UART_BRESP),
    .I_BID(AXI_UART_BID),
    .I_BUSER(AXI_UART_BUSER)
);

rx_driver_SBUS_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_SBUS_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_SBUS_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_SBUS_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_SBUS_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_SBUS_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_SBUS_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_SBUS_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_SBUS_DATA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_SBUS_DATA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_SBUS_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SBUS_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SBUS_DATA_CACHE_VALUE ))
rx_driver_SBUS_data_m_axi_U(
    .AWVALID(m_axi_SBUS_data_AWVALID),
    .AWREADY(m_axi_SBUS_data_AWREADY),
    .AWADDR(m_axi_SBUS_data_AWADDR),
    .AWID(m_axi_SBUS_data_AWID),
    .AWLEN(m_axi_SBUS_data_AWLEN),
    .AWSIZE(m_axi_SBUS_data_AWSIZE),
    .AWBURST(m_axi_SBUS_data_AWBURST),
    .AWLOCK(m_axi_SBUS_data_AWLOCK),
    .AWCACHE(m_axi_SBUS_data_AWCACHE),
    .AWPROT(m_axi_SBUS_data_AWPROT),
    .AWQOS(m_axi_SBUS_data_AWQOS),
    .AWREGION(m_axi_SBUS_data_AWREGION),
    .AWUSER(m_axi_SBUS_data_AWUSER),
    .WVALID(m_axi_SBUS_data_WVALID),
    .WREADY(m_axi_SBUS_data_WREADY),
    .WDATA(m_axi_SBUS_data_WDATA),
    .WSTRB(m_axi_SBUS_data_WSTRB),
    .WLAST(m_axi_SBUS_data_WLAST),
    .WID(m_axi_SBUS_data_WID),
    .WUSER(m_axi_SBUS_data_WUSER),
    .ARVALID(m_axi_SBUS_data_ARVALID),
    .ARREADY(m_axi_SBUS_data_ARREADY),
    .ARADDR(m_axi_SBUS_data_ARADDR),
    .ARID(m_axi_SBUS_data_ARID),
    .ARLEN(m_axi_SBUS_data_ARLEN),
    .ARSIZE(m_axi_SBUS_data_ARSIZE),
    .ARBURST(m_axi_SBUS_data_ARBURST),
    .ARLOCK(m_axi_SBUS_data_ARLOCK),
    .ARCACHE(m_axi_SBUS_data_ARCACHE),
    .ARPROT(m_axi_SBUS_data_ARPROT),
    .ARQOS(m_axi_SBUS_data_ARQOS),
    .ARREGION(m_axi_SBUS_data_ARREGION),
    .ARUSER(m_axi_SBUS_data_ARUSER),
    .RVALID(m_axi_SBUS_data_RVALID),
    .RREADY(m_axi_SBUS_data_RREADY),
    .RDATA(m_axi_SBUS_data_RDATA),
    .RLAST(m_axi_SBUS_data_RLAST),
    .RID(m_axi_SBUS_data_RID),
    .RUSER(m_axi_SBUS_data_RUSER),
    .RRESP(m_axi_SBUS_data_RRESP),
    .BVALID(m_axi_SBUS_data_BVALID),
    .BREADY(m_axi_SBUS_data_BREADY),
    .BRESP(m_axi_SBUS_data_BRESP),
    .BID(m_axi_SBUS_data_BID),
    .BUSER(m_axi_SBUS_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(SBUS_data_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(SBUS_data_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(SBUS_data_RDATA),
    .I_RID(SBUS_data_RID),
    .I_RUSER(SBUS_data_RUSER),
    .I_RRESP(SBUS_data_RRESP),
    .I_RLAST(SBUS_data_RLAST),
    .I_AWVALID(SBUS_data_AWVALID),
    .I_AWREADY(SBUS_data_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd25),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(SBUS_data_WVALID),
    .I_WREADY(SBUS_data_WREADY),
    .I_WDATA(tmp_2_reg_440),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(SBUS_data_BVALID),
    .I_BREADY(SBUS_data_BREADY),
    .I_BRESP(SBUS_data_BRESP),
    .I_BID(SBUS_data_BID),
    .I_BUSER(SBUS_data_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_AXI_UART_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state25_io) & (exitcond_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_sig_ioackin_AXI_UART_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
            ap_reg_ioackin_AXI_UART_ARREADY <= 1'b0;
        end else if ((((exitcond_fu_335_p2 == 1'd0) & (1'b1 == AXI_UART_ARREADY) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == AXI_UART_ARREADY) & (1'b1 == ap_CS_fsm_state16)))) begin
            ap_reg_ioackin_AXI_UART_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_AXI_UART_AWREADY <= 1'b0;
    end else begin
        if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (firstSample == 1'd1)) | ((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | (~((1'b1 == ap_block_state9_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b1 == ap_block_state8_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_AXI_UART_AWREADY <= 1'b0;
        end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == AXI_UART_AWREADY) & (firstSample == 1'd1)) | ((1'b1 == AXI_UART_AWREADY) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == AXI_UART_AWREADY) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == AXI_UART_AWREADY) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == AXI_UART_AWREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == AXI_UART_AWREADY) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == AXI_UART_AWREADY) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == AXI_UART_AWREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_AXI_UART_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_AXI_UART_WREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7)) | (~((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b1 == ap_block_state9_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | (~((1'b1 == ap_block_state8_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_AXI_UART_WREADY <= 1'b0;
        end else if ((((1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == AXI_UART_WREADY) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_AXI_UART_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_SBUS_data_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (tmp_fu_330_p2 == 1'd1))) begin
            if ((1'b0 == ap_block_state24_io)) begin
                ap_reg_ioackin_SBUS_data_AWREADY <= 1'b0;
            end else if ((1'b1 == SBUS_data_AWREADY)) begin
                ap_reg_ioackin_SBUS_data_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_SBUS_data_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            if ((ap_sig_ioackin_SBUS_data_WREADY == 1'b1)) begin
                ap_reg_ioackin_SBUS_data_WREADY <= 1'b0;
            end else if ((1'b1 == SBUS_data_WREADY)) begin
                ap_reg_ioackin_SBUS_data_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        firstSample <= 1'd1;
    end else begin
        if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (firstSample == 1'd1))) begin
            firstSample <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (tmp_fu_330_p2 == 1'd1))) begin
        index_reg_250 <= 5'd0;
    end else if (((ap_sig_ioackin_SBUS_data_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        index_reg_250 <= index_1_reg_435;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38))) begin
        p_014_0_i4_reg_261 <= ctr_V_1_fu_357_p2;
    end else if ((~((ap_predicate_op156_writeresp_state37 == 1'b1) & (1'b0 == SBUS_data_BVALID)) & (1'b1 == ap_CS_fsm_state37))) begin
        p_014_0_i4_reg_261 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_014_0_i_reg_239 <= ctr_V_fu_295_p2;
    end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (firstSample_load_load_fu_272_p1 == 1'd0))) begin
        p_014_0_i_reg_239 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == AXI_UART_RVALID) & (1'b1 == ap_CS_fsm_state23))) begin
        AXI_UART_addr_1_read_reg_423 <= AXI_UART_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        firstSample_load_reg_383 <= firstSample;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
        index_1_reg_435 <= index_1_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == AXI_UART_RVALID) & (1'b1 == ap_CS_fsm_state32))) begin
        tmp_2_reg_440 <= tmp_2_fu_347_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24))) begin
        tmp_reg_428 <= tmp_fu_330_p2;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_AXI_UART_ARREADY == 1'b0) & (exitcond_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_AXI_UART_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)))) begin
        AXI_UART_ARVALID = 1'b1;
    end else begin
        AXI_UART_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        AXI_UART_AWADDR = AXI_UART_addr_3_reg_416;
    end else if (((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        AXI_UART_AWADDR = 64'd4104;
    end else if (((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        AXI_UART_AWADDR = AXI_UART_addr_2_reg_409;
    end else if (((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        AXI_UART_AWADDR = 64'd4100;
    end else if (((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        AXI_UART_AWADDR = 64'd4096;
    end else if (((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        AXI_UART_AWADDR = AXI_UART_addr_reg_387;
    end else if (((ap_start == 1'b1) & (ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (firstSample == 1'd1))) begin
        AXI_UART_AWADDR = 64'd4108;
    end else begin
        AXI_UART_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (firstSample == 1'd1)) | ((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        AXI_UART_AWVALID = 1'b1;
    end else begin
        AXI_UART_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state15)) | (~((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state10)) | (~((1'b1 == ap_block_state9_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state11)) | (~((1'b1 == ap_block_state8_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state8)))) begin
        AXI_UART_BREADY = 1'b1;
    end else begin
        AXI_UART_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == AXI_UART_RVALID) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == AXI_UART_RVALID) & (1'b1 == ap_CS_fsm_state23)))) begin
        AXI_UART_RREADY = 1'b1;
    end else begin
        AXI_UART_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        AXI_UART_WDATA = 32'd17;
    end else if (((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
        AXI_UART_WDATA = 32'd7;
    end else if (((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        AXI_UART_WDATA = 32'd31;
    end else if (((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        AXI_UART_WDATA = 32'd0;
    end else if ((((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
        AXI_UART_WDATA = 32'd1;
    end else if (((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        AXI_UART_WDATA = 32'd128;
    end else begin
        AXI_UART_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == AXI_UART_BVALID) & (ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_AXI_UART_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        AXI_UART_WVALID = 1'b1;
    end else begin
        AXI_UART_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((exitcond_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25)))) begin
        AXI_UART_blk_n_AR = m_axi_AXI_UART_ARREADY;
    end else begin
        AXI_UART_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (firstSample == 1'd1)))) begin
        AXI_UART_blk_n_AW = m_axi_AXI_UART_AWREADY;
    end else begin
        AXI_UART_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        AXI_UART_blk_n_B = m_axi_AXI_UART_BVALID;
    end else begin
        AXI_UART_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state23))) begin
        AXI_UART_blk_n_R = m_axi_AXI_UART_RVALID;
    end else begin
        AXI_UART_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        AXI_UART_blk_n_W = m_axi_AXI_UART_WREADY;
    end else begin
        AXI_UART_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_SBUS_data_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24) & (tmp_fu_330_p2 == 1'd1))) begin
        SBUS_data_AWVALID = 1'b1;
    end else begin
        SBUS_data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op156_writeresp_state37 == 1'b1) & (1'b0 == SBUS_data_BVALID)) & (ap_predicate_op156_writeresp_state37 == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        SBUS_data_BREADY = 1'b1;
    end else begin
        SBUS_data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_SBUS_data_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33))) begin
        SBUS_data_WVALID = 1'b1;
    end else begin
        SBUS_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_fu_330_p2 == 1'd1))) begin
        SBUS_data_blk_n_AW = m_axi_SBUS_data_AWREADY;
    end else begin
        SBUS_data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & (tmp_reg_428 == 1'd1) & (firstSample_load_reg_383 == 1'd1))) begin
        SBUS_data_blk_n_B = m_axi_SBUS_data_BVALID;
    end else begin
        SBUS_data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        SBUS_data_blk_n_W = m_axi_SBUS_data_WREADY;
    end else begin
        SBUS_data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (tmp_6_fu_351_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (tmp_6_fu_351_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_AXI_UART_ARREADY == 1'b0)) begin
        ap_sig_ioackin_AXI_UART_ARREADY = AXI_UART_ARREADY;
    end else begin
        ap_sig_ioackin_AXI_UART_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_AXI_UART_AWREADY == 1'b0)) begin
        ap_sig_ioackin_AXI_UART_AWREADY = AXI_UART_AWREADY;
    end else begin
        ap_sig_ioackin_AXI_UART_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_AXI_UART_WREADY == 1'b0)) begin
        ap_sig_ioackin_AXI_UART_WREADY = AXI_UART_WREADY;
    end else begin
        ap_sig_ioackin_AXI_UART_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_SBUS_data_AWREADY == 1'b0)) begin
        ap_sig_ioackin_SBUS_data_AWREADY = SBUS_data_AWREADY;
    end else begin
        ap_sig_ioackin_SBUS_data_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_SBUS_data_WREADY == 1'b0)) begin
        ap_sig_ioackin_SBUS_data_WREADY = SBUS_data_WREADY;
    end else begin
        ap_sig_ioackin_SBUS_data_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (firstSample_load_load_fu_272_p1 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (firstSample == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((1'b1 == ap_block_state8_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((1'b1 == ap_block_state9_io) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (1'b0 == AXI_UART_BVALID)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == AXI_UART_BVALID) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((ap_sig_ioackin_AXI_UART_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == AXI_UART_RVALID) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b0 == ap_block_state24_io) & (1'b1 == ap_CS_fsm_state24) & (tmp_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((1'b0 == ap_block_state24_io) & (tmp_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond_fu_335_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else if (((1'b0 == ap_block_state25_io) & (exitcond_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == AXI_UART_RVALID) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((ap_sig_ioackin_SBUS_data_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if ((~((ap_predicate_op156_writeresp_state37 == 1'b1) & (1'b0 == SBUS_data_BVALID)) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (tmp_6_fu_351_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_UART_ARADDR = 64'd4096;

assign AXI_UART_addr_2_reg_409 = 64'd4100;

assign AXI_UART_addr_3_reg_416 = 64'd4104;

assign AXI_UART_addr_reg_387 = 64'd4108;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1_io = ((ap_sig_ioackin_AXI_UART_AWREADY == 1'b0) & (firstSample == 1'd1));
end

always @ (*) begin
    ap_block_state24_io = ((ap_sig_ioackin_SBUS_data_AWREADY == 1'b0) & (tmp_fu_330_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state25_io = ((ap_sig_ioackin_AXI_UART_ARREADY == 1'b0) & (exitcond_fu_335_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state37 = ((ap_predicate_op156_writeresp_state37 == 1'b1) & (1'b0 == SBUS_data_BVALID));
end

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (ap_sig_ioackin_AXI_UART_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (ap_sig_ioackin_AXI_UART_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (ap_sig_ioackin_AXI_UART_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (ap_sig_ioackin_AXI_UART_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (ap_sig_ioackin_AXI_UART_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = ((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (ap_sig_ioackin_AXI_UART_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state9_io = ((ap_sig_ioackin_AXI_UART_WREADY == 1'b0) | (ap_sig_ioackin_AXI_UART_AWREADY == 1'b0));
end

always @ (*) begin
    ap_predicate_op156_writeresp_state37 = ((tmp_reg_428 == 1'd1) & (firstSample_load_reg_383 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ctr_V_1_fu_357_p2 = (p_014_0_i4_reg_261 + 20'd1);

assign ctr_V_fu_295_p2 = (p_014_0_i_reg_239 + 19'd1);

assign exitcond_fu_335_p2 = ((index_reg_250 == 5'd25) ? 1'b1 : 1'b0);

assign firstSample_load_load_fu_272_p1 = firstSample;

assign index_1_fu_341_p2 = (index_reg_250 + 5'd1);

assign tmp_1_fu_289_p2 = ((p_014_0_i_reg_239 == 19'd300000) ? 1'b1 : 1'b0);

assign tmp_2_fu_347_p1 = AXI_UART_RDATA[7:0];

assign tmp_6_fu_351_p2 = ((p_014_0_i4_reg_261 == 20'd600000) ? 1'b1 : 1'b0);

assign tmp_fu_330_p2 = ((AXI_UART_addr_1_read_reg_423 == 32'd15) ? 1'b1 : 1'b0);

endmodule //rx_driver
