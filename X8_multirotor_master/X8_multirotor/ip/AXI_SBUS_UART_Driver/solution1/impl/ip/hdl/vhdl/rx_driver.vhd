-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rx_driver is
generic (
    C_M_AXI_AXI_UART_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_UART_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_UART_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_UART_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_UART_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_UART_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_UART_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_UART_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SBUS_DATA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_SBUS_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_SBUS_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SBUS_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SBUS_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SBUS_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SBUS_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SBUS_DATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_UART_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_AXI_UART_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_UART_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_UART_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_SBUS_DATA_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_SBUS_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_SBUS_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SBUS_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_AXI_UART_AWVALID : OUT STD_LOGIC;
    m_axi_AXI_UART_AWREADY : IN STD_LOGIC;
    m_axi_AXI_UART_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_UART_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_AXI_UART_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_UART_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_UART_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_UART_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_UART_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_UART_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_UART_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_UART_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_UART_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_AWUSER_WIDTH-1 downto 0);
    m_axi_AXI_UART_WVALID : OUT STD_LOGIC;
    m_axi_AXI_UART_WREADY : IN STD_LOGIC;
    m_axi_AXI_UART_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_DATA_WIDTH-1 downto 0);
    m_axi_AXI_UART_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_DATA_WIDTH/8-1 downto 0);
    m_axi_AXI_UART_WLAST : OUT STD_LOGIC;
    m_axi_AXI_UART_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_AXI_UART_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_WUSER_WIDTH-1 downto 0);
    m_axi_AXI_UART_ARVALID : OUT STD_LOGIC;
    m_axi_AXI_UART_ARREADY : IN STD_LOGIC;
    m_axi_AXI_UART_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_UART_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_AXI_UART_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_UART_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_UART_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_UART_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_UART_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_UART_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_UART_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_UART_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_UART_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ARUSER_WIDTH-1 downto 0);
    m_axi_AXI_UART_RVALID : IN STD_LOGIC;
    m_axi_AXI_UART_RREADY : OUT STD_LOGIC;
    m_axi_AXI_UART_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_DATA_WIDTH-1 downto 0);
    m_axi_AXI_UART_RLAST : IN STD_LOGIC;
    m_axi_AXI_UART_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_AXI_UART_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_RUSER_WIDTH-1 downto 0);
    m_axi_AXI_UART_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_UART_BVALID : IN STD_LOGIC;
    m_axi_AXI_UART_BREADY : OUT STD_LOGIC;
    m_axi_AXI_UART_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_UART_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_AXI_UART_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_UART_BUSER_WIDTH-1 downto 0);
    m_axi_SBUS_data_AWVALID : OUT STD_LOGIC;
    m_axi_SBUS_data_AWREADY : IN STD_LOGIC;
    m_axi_SBUS_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_SBUS_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ID_WIDTH-1 downto 0);
    m_axi_SBUS_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_SBUS_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_SBUS_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_SBUS_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_SBUS_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_SBUS_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_SBUS_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_SBUS_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_SBUS_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_SBUS_data_WVALID : OUT STD_LOGIC;
    m_axi_SBUS_data_WREADY : IN STD_LOGIC;
    m_axi_SBUS_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_DATA_WIDTH-1 downto 0);
    m_axi_SBUS_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_SBUS_data_WLAST : OUT STD_LOGIC;
    m_axi_SBUS_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ID_WIDTH-1 downto 0);
    m_axi_SBUS_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_SBUS_data_ARVALID : OUT STD_LOGIC;
    m_axi_SBUS_data_ARREADY : IN STD_LOGIC;
    m_axi_SBUS_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_SBUS_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ID_WIDTH-1 downto 0);
    m_axi_SBUS_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_SBUS_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_SBUS_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_SBUS_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_SBUS_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_SBUS_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_SBUS_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_SBUS_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_SBUS_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_SBUS_data_RVALID : IN STD_LOGIC;
    m_axi_SBUS_data_RREADY : OUT STD_LOGIC;
    m_axi_SBUS_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_DATA_WIDTH-1 downto 0);
    m_axi_SBUS_data_RLAST : IN STD_LOGIC;
    m_axi_SBUS_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ID_WIDTH-1 downto 0);
    m_axi_SBUS_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_SBUS_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_SBUS_data_BVALID : IN STD_LOGIC;
    m_axi_SBUS_data_BREADY : OUT STD_LOGIC;
    m_axi_SBUS_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_SBUS_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_ID_WIDTH-1 downto 0);
    m_axi_SBUS_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SBUS_DATA_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of rx_driver is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rx_driver,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=750071,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1267,HLS_SYN_LUT=1981,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv64_100C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000001100";
    constant ap_const_lv64_1000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000";
    constant ap_const_lv64_1004 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000000100";
    constant ap_const_lv64_1008 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv19_493E0 : STD_LOGIC_VECTOR (18 downto 0) := "1001001001111100000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv20_927C0 : STD_LOGIC_VECTOR (19 downto 0) := "10010010011111000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal firstSample : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal AXI_UART_blk_n_AW : STD_LOGIC;
    signal firstSample_load_load_fu_272_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_UART_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal AXI_UART_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal AXI_UART_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal AXI_UART_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal SBUS_data_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal SBUS_data_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal firstSample_load_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_UART_AWVALID : STD_LOGIC;
    signal AXI_UART_AWREADY : STD_LOGIC;
    signal AXI_UART_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_UART_WVALID : STD_LOGIC;
    signal AXI_UART_WREADY : STD_LOGIC;
    signal AXI_UART_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_UART_ARVALID : STD_LOGIC;
    signal AXI_UART_ARREADY : STD_LOGIC;
    signal AXI_UART_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_UART_RVALID : STD_LOGIC;
    signal AXI_UART_RREADY : STD_LOGIC;
    signal AXI_UART_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_UART_RLAST : STD_LOGIC;
    signal AXI_UART_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_UART_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_UART_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_UART_BVALID : STD_LOGIC;
    signal AXI_UART_BREADY : STD_LOGIC;
    signal AXI_UART_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_UART_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_UART_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_AWVALID : STD_LOGIC;
    signal SBUS_data_AWREADY : STD_LOGIC;
    signal SBUS_data_WVALID : STD_LOGIC;
    signal SBUS_data_WREADY : STD_LOGIC;
    signal SBUS_data_ARREADY : STD_LOGIC;
    signal SBUS_data_RVALID : STD_LOGIC;
    signal SBUS_data_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal SBUS_data_RLAST : STD_LOGIC;
    signal SBUS_data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal SBUS_data_BVALID : STD_LOGIC;
    signal SBUS_data_BREADY : STD_LOGIC;
    signal SBUS_data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal SBUS_data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_AXI_UART_AWREADY : STD_LOGIC;
    signal ap_block_state1_io : BOOLEAN;
    signal AXI_UART_addr_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_V_fu_295_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sig_ioackin_AXI_UART_WREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal AXI_UART_addr_2_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal AXI_UART_addr_3_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal AXI_UART_addr_1_read_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_SBUS_data_AWREADY : STD_LOGIC;
    signal ap_block_state24_io : BOOLEAN;
    signal index_1_fu_341_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_1_reg_435 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_ioackin_AXI_UART_ARREADY : STD_LOGIC;
    signal ap_block_state25_io : BOOLEAN;
    signal tmp_2_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_440 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctr_V_1_fu_357_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal p_014_0_i_reg_239 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_reg_250 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_ioackin_SBUS_data_WREADY : STD_LOGIC;
    signal p_014_0_i4_reg_261 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_predicate_op156_writeresp_state37 : BOOLEAN;
    signal ap_block_state37 : BOOLEAN;
    signal tmp_6_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_AXI_UART_AWREADY : STD_LOGIC := '0';
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_reg_ioackin_AXI_UART_WREADY : STD_LOGIC := '0';
    signal ap_block_state9_io : BOOLEAN;
    signal ap_reg_ioackin_AXI_UART_ARREADY : STD_LOGIC := '0';
    signal ap_block_state7_io : BOOLEAN;
    signal ap_reg_ioackin_SBUS_data_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_SBUS_data_WREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);

    component rx_driver_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component rx_driver_AXI_UART_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rx_driver_SBUS_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    rx_driver_CTRL_s_axi_U : component rx_driver_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    rx_driver_AXI_UART_m_axi_U : component rx_driver_AXI_UART_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_UART_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_UART_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_UART_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_UART_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_UART_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_UART_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_UART_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_UART_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_AXI_UART_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_AXI_UART_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_UART_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_UART_CACHE_VALUE)
    port map (
        AWVALID => m_axi_AXI_UART_AWVALID,
        AWREADY => m_axi_AXI_UART_AWREADY,
        AWADDR => m_axi_AXI_UART_AWADDR,
        AWID => m_axi_AXI_UART_AWID,
        AWLEN => m_axi_AXI_UART_AWLEN,
        AWSIZE => m_axi_AXI_UART_AWSIZE,
        AWBURST => m_axi_AXI_UART_AWBURST,
        AWLOCK => m_axi_AXI_UART_AWLOCK,
        AWCACHE => m_axi_AXI_UART_AWCACHE,
        AWPROT => m_axi_AXI_UART_AWPROT,
        AWQOS => m_axi_AXI_UART_AWQOS,
        AWREGION => m_axi_AXI_UART_AWREGION,
        AWUSER => m_axi_AXI_UART_AWUSER,
        WVALID => m_axi_AXI_UART_WVALID,
        WREADY => m_axi_AXI_UART_WREADY,
        WDATA => m_axi_AXI_UART_WDATA,
        WSTRB => m_axi_AXI_UART_WSTRB,
        WLAST => m_axi_AXI_UART_WLAST,
        WID => m_axi_AXI_UART_WID,
        WUSER => m_axi_AXI_UART_WUSER,
        ARVALID => m_axi_AXI_UART_ARVALID,
        ARREADY => m_axi_AXI_UART_ARREADY,
        ARADDR => m_axi_AXI_UART_ARADDR,
        ARID => m_axi_AXI_UART_ARID,
        ARLEN => m_axi_AXI_UART_ARLEN,
        ARSIZE => m_axi_AXI_UART_ARSIZE,
        ARBURST => m_axi_AXI_UART_ARBURST,
        ARLOCK => m_axi_AXI_UART_ARLOCK,
        ARCACHE => m_axi_AXI_UART_ARCACHE,
        ARPROT => m_axi_AXI_UART_ARPROT,
        ARQOS => m_axi_AXI_UART_ARQOS,
        ARREGION => m_axi_AXI_UART_ARREGION,
        ARUSER => m_axi_AXI_UART_ARUSER,
        RVALID => m_axi_AXI_UART_RVALID,
        RREADY => m_axi_AXI_UART_RREADY,
        RDATA => m_axi_AXI_UART_RDATA,
        RLAST => m_axi_AXI_UART_RLAST,
        RID => m_axi_AXI_UART_RID,
        RUSER => m_axi_AXI_UART_RUSER,
        RRESP => m_axi_AXI_UART_RRESP,
        BVALID => m_axi_AXI_UART_BVALID,
        BREADY => m_axi_AXI_UART_BREADY,
        BRESP => m_axi_AXI_UART_BRESP,
        BID => m_axi_AXI_UART_BID,
        BUSER => m_axi_AXI_UART_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => AXI_UART_ARVALID,
        I_ARREADY => AXI_UART_ARREADY,
        I_ARADDR => AXI_UART_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => AXI_UART_RVALID,
        I_RREADY => AXI_UART_RREADY,
        I_RDATA => AXI_UART_RDATA,
        I_RID => AXI_UART_RID,
        I_RUSER => AXI_UART_RUSER,
        I_RRESP => AXI_UART_RRESP,
        I_RLAST => AXI_UART_RLAST,
        I_AWVALID => AXI_UART_AWVALID,
        I_AWREADY => AXI_UART_AWREADY,
        I_AWADDR => AXI_UART_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => AXI_UART_WVALID,
        I_WREADY => AXI_UART_WREADY,
        I_WDATA => AXI_UART_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => AXI_UART_BVALID,
        I_BREADY => AXI_UART_BREADY,
        I_BRESP => AXI_UART_BRESP,
        I_BID => AXI_UART_BID,
        I_BUSER => AXI_UART_BUSER);

    rx_driver_SBUS_data_m_axi_U : component rx_driver_SBUS_data_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_SBUS_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_SBUS_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_SBUS_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_SBUS_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_SBUS_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_SBUS_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_SBUS_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_SBUS_DATA_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_SBUS_DATA_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_SBUS_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_SBUS_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_SBUS_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_SBUS_data_AWVALID,
        AWREADY => m_axi_SBUS_data_AWREADY,
        AWADDR => m_axi_SBUS_data_AWADDR,
        AWID => m_axi_SBUS_data_AWID,
        AWLEN => m_axi_SBUS_data_AWLEN,
        AWSIZE => m_axi_SBUS_data_AWSIZE,
        AWBURST => m_axi_SBUS_data_AWBURST,
        AWLOCK => m_axi_SBUS_data_AWLOCK,
        AWCACHE => m_axi_SBUS_data_AWCACHE,
        AWPROT => m_axi_SBUS_data_AWPROT,
        AWQOS => m_axi_SBUS_data_AWQOS,
        AWREGION => m_axi_SBUS_data_AWREGION,
        AWUSER => m_axi_SBUS_data_AWUSER,
        WVALID => m_axi_SBUS_data_WVALID,
        WREADY => m_axi_SBUS_data_WREADY,
        WDATA => m_axi_SBUS_data_WDATA,
        WSTRB => m_axi_SBUS_data_WSTRB,
        WLAST => m_axi_SBUS_data_WLAST,
        WID => m_axi_SBUS_data_WID,
        WUSER => m_axi_SBUS_data_WUSER,
        ARVALID => m_axi_SBUS_data_ARVALID,
        ARREADY => m_axi_SBUS_data_ARREADY,
        ARADDR => m_axi_SBUS_data_ARADDR,
        ARID => m_axi_SBUS_data_ARID,
        ARLEN => m_axi_SBUS_data_ARLEN,
        ARSIZE => m_axi_SBUS_data_ARSIZE,
        ARBURST => m_axi_SBUS_data_ARBURST,
        ARLOCK => m_axi_SBUS_data_ARLOCK,
        ARCACHE => m_axi_SBUS_data_ARCACHE,
        ARPROT => m_axi_SBUS_data_ARPROT,
        ARQOS => m_axi_SBUS_data_ARQOS,
        ARREGION => m_axi_SBUS_data_ARREGION,
        ARUSER => m_axi_SBUS_data_ARUSER,
        RVALID => m_axi_SBUS_data_RVALID,
        RREADY => m_axi_SBUS_data_RREADY,
        RDATA => m_axi_SBUS_data_RDATA,
        RLAST => m_axi_SBUS_data_RLAST,
        RID => m_axi_SBUS_data_RID,
        RUSER => m_axi_SBUS_data_RUSER,
        RRESP => m_axi_SBUS_data_RRESP,
        BVALID => m_axi_SBUS_data_BVALID,
        BREADY => m_axi_SBUS_data_BREADY,
        BRESP => m_axi_SBUS_data_BRESP,
        BID => m_axi_SBUS_data_BID,
        BUSER => m_axi_SBUS_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => SBUS_data_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => SBUS_data_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => SBUS_data_RDATA,
        I_RID => SBUS_data_RID,
        I_RUSER => SBUS_data_RUSER,
        I_RRESP => SBUS_data_RRESP,
        I_RLAST => SBUS_data_RLAST,
        I_AWVALID => SBUS_data_AWVALID,
        I_AWREADY => SBUS_data_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_19,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => SBUS_data_WVALID,
        I_WREADY => SBUS_data_WREADY,
        I_WDATA => tmp_2_reg_440,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => SBUS_data_BVALID,
        I_BREADY => SBUS_data_BREADY,
        I_BRESP => SBUS_data_BRESP,
        I_BID => SBUS_data_BID,
        I_BUSER => SBUS_data_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_AXI_UART_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_AXI_UART_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state25_io) and (exitcond_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_sig_ioackin_AXI_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                    ap_reg_ioackin_AXI_UART_ARREADY <= ap_const_logic_0;
                elsif ((((exitcond_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = AXI_UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = AXI_UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                    ap_reg_ioackin_AXI_UART_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_AXI_UART_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_AXI_UART_AWREADY <= ap_const_logic_0;
            else
                if (((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_AXI_UART_AWREADY <= ap_const_logic_0;
                elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = AXI_UART_AWREADY) and (firstSample = ap_const_lv1_1)) or ((ap_const_logic_1 = AXI_UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = AXI_UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = AXI_UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = AXI_UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = AXI_UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = AXI_UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = AXI_UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_AXI_UART_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_AXI_UART_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_AXI_UART_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_AXI_UART_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = AXI_UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_AXI_UART_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_SBUS_data_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_SBUS_data_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_fu_330_p2 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_0 = ap_block_state24_io)) then 
                        ap_reg_ioackin_SBUS_data_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = SBUS_data_AWREADY)) then 
                        ap_reg_ioackin_SBUS_data_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_SBUS_data_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_SBUS_data_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                    if ((ap_sig_ioackin_SBUS_data_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_SBUS_data_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = SBUS_data_WREADY)) then 
                        ap_reg_ioackin_SBUS_data_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    firstSample_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                firstSample <= ap_const_lv1_1;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1))) then 
                    firstSample <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    index_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_fu_330_p2 = ap_const_lv1_1))) then 
                index_reg_250 <= ap_const_lv5_0;
            elsif (((ap_sig_ioackin_SBUS_data_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                index_reg_250 <= index_1_reg_435;
            end if; 
        end if;
    end process;

    p_014_0_i4_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                p_014_0_i4_reg_261 <= ctr_V_1_fu_357_p2;
            elsif ((not(((ap_predicate_op156_writeresp_state37 = ap_const_boolean_1) and (ap_const_logic_0 = SBUS_data_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                p_014_0_i4_reg_261 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    p_014_0_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_014_0_i_reg_239 <= ctr_V_fu_295_p2;
            elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample_load_load_fu_272_p1 = ap_const_lv1_0))) then 
                p_014_0_i_reg_239 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = AXI_UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                AXI_UART_addr_1_read_reg_423 <= AXI_UART_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                firstSample_load_reg_383 <= firstSample;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                index_1_reg_435 <= index_1_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = AXI_UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                tmp_2_reg_440 <= tmp_2_fu_347_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                tmp_reg_428 <= tmp_fu_330_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, firstSample, firstSample_load_load_fu_272_p1, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state25, exitcond_fu_335_p2, ap_CS_fsm_state32, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state24, tmp_fu_330_p2, ap_CS_fsm_state33, ap_CS_fsm_state37, AXI_UART_RVALID, AXI_UART_BVALID, SBUS_data_BVALID, ap_block_state1_io, ap_CS_fsm_state2, ap_sig_ioackin_AXI_UART_WREADY, ap_block_state3_io, ap_block_state4_io, ap_block_state6_io, ap_block_state24_io, ap_sig_ioackin_AXI_UART_ARREADY, ap_block_state25_io, ap_CS_fsm_state38, tmp_1_fu_289_p2, ap_sig_ioackin_SBUS_data_WREADY, ap_predicate_op156_writeresp_state37, tmp_6_fu_351_p2, ap_block_state8_io, ap_block_state5_io, ap_block_state9_io, ap_block_state7_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample_load_load_fu_272_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_sig_ioackin_AXI_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = AXI_UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_boolean_0 = ap_block_state24_io) and (ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_const_boolean_0 = ap_block_state24_io) and (tmp_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_boolean_0 = ap_block_state25_io) and (ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                elsif (((ap_const_boolean_0 = ap_block_state25_io) and (exitcond_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = AXI_UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_sig_ioackin_SBUS_data_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if ((not(((ap_predicate_op156_writeresp_state37 = ap_const_boolean_1) and (ap_const_logic_0 = SBUS_data_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_6_fu_351_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    AXI_UART_ARADDR <= ap_const_lv64_1000(32 - 1 downto 0);

    AXI_UART_ARVALID_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state25, exitcond_fu_335_p2, ap_reg_ioackin_AXI_UART_ARREADY)
    begin
        if ((((ap_reg_ioackin_AXI_UART_ARREADY = ap_const_logic_0) and (exitcond_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_AXI_UART_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            AXI_UART_ARVALID <= ap_const_logic_1;
        else 
            AXI_UART_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_UART_AWADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, firstSample, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7, AXI_UART_BVALID, AXI_UART_addr_reg_387, AXI_UART_addr_2_reg_409, AXI_UART_addr_3_reg_416, ap_reg_ioackin_AXI_UART_AWREADY)
    begin
        if ((((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            AXI_UART_AWADDR <= AXI_UART_addr_3_reg_416;
        elsif (((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            AXI_UART_AWADDR <= ap_const_lv64_1008(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            AXI_UART_AWADDR <= AXI_UART_addr_2_reg_409;
        elsif (((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            AXI_UART_AWADDR <= ap_const_lv64_1004(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            AXI_UART_AWADDR <= ap_const_lv64_1000(32 - 1 downto 0);
        elsif (((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            AXI_UART_AWADDR <= AXI_UART_addr_reg_387;
        elsif (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1))) then 
            AXI_UART_AWADDR <= ap_const_lv64_100C(32 - 1 downto 0);
        else 
            AXI_UART_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AXI_UART_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, firstSample, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7, AXI_UART_BVALID, ap_reg_ioackin_AXI_UART_AWREADY)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1)) or ((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            AXI_UART_AWVALID <= ap_const_logic_1;
        else 
            AXI_UART_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_UART_BREADY_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, AXI_UART_BVALID, ap_sig_ioackin_AXI_UART_WREADY, ap_block_state8_io, ap_block_state9_io)
    begin
        if ((((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_const_boolean_1 = ap_block_state8_io) or (ap_const_logic_0 = AXI_UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            AXI_UART_BREADY <= ap_const_logic_1;
        else 
            AXI_UART_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    AXI_UART_RREADY_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state32, AXI_UART_RVALID)
    begin
        if ((((ap_const_logic_1 = AXI_UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_logic_1 = AXI_UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            AXI_UART_RREADY <= ap_const_logic_1;
        else 
            AXI_UART_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    AXI_UART_WDATA_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, AXI_UART_BVALID, ap_reg_ioackin_AXI_UART_WREADY)
    begin
        if (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            AXI_UART_WDATA <= ap_const_lv32_11;
        elsif (((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            AXI_UART_WDATA <= ap_const_lv32_7;
        elsif (((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            AXI_UART_WDATA <= ap_const_lv32_1F;
        elsif (((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            AXI_UART_WDATA <= ap_const_lv32_0;
        elsif ((((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            AXI_UART_WDATA <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            AXI_UART_WDATA <= ap_const_lv32_80;
        else 
            AXI_UART_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AXI_UART_WVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7, AXI_UART_BVALID, ap_reg_ioackin_AXI_UART_WREADY)
    begin
        if ((((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = AXI_UART_BVALID) and (ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            AXI_UART_WVALID <= ap_const_logic_1;
        else 
            AXI_UART_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    AXI_UART_addr_2_reg_409 <= ap_const_lv64_1004(32 - 1 downto 0);
    AXI_UART_addr_3_reg_416 <= ap_const_lv64_1008(32 - 1 downto 0);
    AXI_UART_addr_reg_387 <= ap_const_lv64_100C(32 - 1 downto 0);

    AXI_UART_blk_n_AR_assign_proc : process(m_axi_AXI_UART_ARREADY, ap_CS_fsm_state16, ap_CS_fsm_state25, exitcond_fu_335_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((exitcond_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            AXI_UART_blk_n_AR <= m_axi_AXI_UART_ARREADY;
        else 
            AXI_UART_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    AXI_UART_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_AXI_UART_AWREADY, firstSample, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (firstSample = ap_const_lv1_1)))) then 
            AXI_UART_blk_n_AW <= m_axi_AXI_UART_AWREADY;
        else 
            AXI_UART_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    AXI_UART_blk_n_B_assign_proc : process(m_axi_AXI_UART_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            AXI_UART_blk_n_B <= m_axi_AXI_UART_BVALID;
        else 
            AXI_UART_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    AXI_UART_blk_n_R_assign_proc : process(m_axi_AXI_UART_RVALID, ap_CS_fsm_state23, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            AXI_UART_blk_n_R <= m_axi_AXI_UART_RVALID;
        else 
            AXI_UART_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    AXI_UART_blk_n_W_assign_proc : process(m_axi_AXI_UART_WREADY, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            AXI_UART_blk_n_W <= m_axi_AXI_UART_WREADY;
        else 
            AXI_UART_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    SBUS_data_AWVALID_assign_proc : process(ap_CS_fsm_state24, tmp_fu_330_p2, ap_reg_ioackin_SBUS_data_AWREADY)
    begin
        if (((ap_reg_ioackin_SBUS_data_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_fu_330_p2 = ap_const_lv1_1))) then 
            SBUS_data_AWVALID <= ap_const_logic_1;
        else 
            SBUS_data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    SBUS_data_BREADY_assign_proc : process(ap_CS_fsm_state37, SBUS_data_BVALID, ap_predicate_op156_writeresp_state37)
    begin
        if ((not(((ap_predicate_op156_writeresp_state37 = ap_const_boolean_1) and (ap_const_logic_0 = SBUS_data_BVALID))) and (ap_predicate_op156_writeresp_state37 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            SBUS_data_BREADY <= ap_const_logic_1;
        else 
            SBUS_data_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    SBUS_data_WVALID_assign_proc : process(ap_CS_fsm_state33, ap_reg_ioackin_SBUS_data_WREADY)
    begin
        if (((ap_reg_ioackin_SBUS_data_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            SBUS_data_WVALID <= ap_const_logic_1;
        else 
            SBUS_data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    SBUS_data_blk_n_AW_assign_proc : process(m_axi_SBUS_data_AWREADY, ap_CS_fsm_state24, tmp_fu_330_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_fu_330_p2 = ap_const_lv1_1))) then 
            SBUS_data_blk_n_AW <= m_axi_SBUS_data_AWREADY;
        else 
            SBUS_data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    SBUS_data_blk_n_B_assign_proc : process(m_axi_SBUS_data_BVALID, ap_CS_fsm_state37, firstSample_load_reg_383, tmp_reg_428)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_reg_428 = ap_const_lv1_1) and (firstSample_load_reg_383 = ap_const_lv1_1))) then 
            SBUS_data_blk_n_B <= m_axi_SBUS_data_BVALID;
        else 
            SBUS_data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    SBUS_data_blk_n_W_assign_proc : process(m_axi_SBUS_data_WREADY, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            SBUS_data_blk_n_W <= m_axi_SBUS_data_WREADY;
        else 
            SBUS_data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_io_assign_proc : process(firstSample, ap_sig_ioackin_AXI_UART_AWREADY)
    begin
                ap_block_state1_io <= ((ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0) and (firstSample = ap_const_lv1_1));
    end process;


    ap_block_state24_io_assign_proc : process(tmp_fu_330_p2, ap_sig_ioackin_SBUS_data_AWREADY)
    begin
                ap_block_state24_io <= ((ap_sig_ioackin_SBUS_data_AWREADY = ap_const_logic_0) and (tmp_fu_330_p2 = ap_const_lv1_1));
    end process;


    ap_block_state25_io_assign_proc : process(exitcond_fu_335_p2, ap_sig_ioackin_AXI_UART_ARREADY)
    begin
                ap_block_state25_io <= ((ap_sig_ioackin_AXI_UART_ARREADY = ap_const_logic_0) and (exitcond_fu_335_p2 = ap_const_lv1_0));
    end process;


    ap_block_state37_assign_proc : process(SBUS_data_BVALID, ap_predicate_op156_writeresp_state37)
    begin
                ap_block_state37 <= ((ap_predicate_op156_writeresp_state37 = ap_const_boolean_1) and (ap_const_logic_0 = SBUS_data_BVALID));
    end process;


    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_AXI_UART_AWREADY, ap_sig_ioackin_AXI_UART_WREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_AXI_UART_AWREADY, ap_sig_ioackin_AXI_UART_WREADY)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(ap_sig_ioackin_AXI_UART_AWREADY, ap_sig_ioackin_AXI_UART_WREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(ap_sig_ioackin_AXI_UART_AWREADY, ap_sig_ioackin_AXI_UART_WREADY)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(ap_sig_ioackin_AXI_UART_AWREADY, ap_sig_ioackin_AXI_UART_WREADY)
    begin
                ap_block_state7_io <= ((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(ap_sig_ioackin_AXI_UART_AWREADY, ap_sig_ioackin_AXI_UART_WREADY)
    begin
                ap_block_state8_io <= ((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state9_io_assign_proc : process(ap_sig_ioackin_AXI_UART_AWREADY, ap_sig_ioackin_AXI_UART_WREADY)
    begin
                ap_block_state9_io <= ((ap_sig_ioackin_AXI_UART_WREADY = ap_const_logic_0) or (ap_sig_ioackin_AXI_UART_AWREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state38, tmp_6_fu_351_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_6_fu_351_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op156_writeresp_state37_assign_proc : process(firstSample_load_reg_383, tmp_reg_428)
    begin
                ap_predicate_op156_writeresp_state37 <= ((tmp_reg_428 = ap_const_lv1_1) and (firstSample_load_reg_383 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38, tmp_6_fu_351_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_6_fu_351_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_AXI_UART_ARREADY_assign_proc : process(AXI_UART_ARREADY, ap_reg_ioackin_AXI_UART_ARREADY)
    begin
        if ((ap_reg_ioackin_AXI_UART_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_AXI_UART_ARREADY <= AXI_UART_ARREADY;
        else 
            ap_sig_ioackin_AXI_UART_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_AXI_UART_AWREADY_assign_proc : process(AXI_UART_AWREADY, ap_reg_ioackin_AXI_UART_AWREADY)
    begin
        if ((ap_reg_ioackin_AXI_UART_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_AXI_UART_AWREADY <= AXI_UART_AWREADY;
        else 
            ap_sig_ioackin_AXI_UART_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_AXI_UART_WREADY_assign_proc : process(AXI_UART_WREADY, ap_reg_ioackin_AXI_UART_WREADY)
    begin
        if ((ap_reg_ioackin_AXI_UART_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_AXI_UART_WREADY <= AXI_UART_WREADY;
        else 
            ap_sig_ioackin_AXI_UART_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_SBUS_data_AWREADY_assign_proc : process(SBUS_data_AWREADY, ap_reg_ioackin_SBUS_data_AWREADY)
    begin
        if ((ap_reg_ioackin_SBUS_data_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_SBUS_data_AWREADY <= SBUS_data_AWREADY;
        else 
            ap_sig_ioackin_SBUS_data_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_SBUS_data_WREADY_assign_proc : process(SBUS_data_WREADY, ap_reg_ioackin_SBUS_data_WREADY)
    begin
        if ((ap_reg_ioackin_SBUS_data_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_SBUS_data_WREADY <= SBUS_data_WREADY;
        else 
            ap_sig_ioackin_SBUS_data_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    ctr_V_1_fu_357_p2 <= std_logic_vector(unsigned(p_014_0_i4_reg_261) + unsigned(ap_const_lv20_1));
    ctr_V_fu_295_p2 <= std_logic_vector(unsigned(p_014_0_i_reg_239) + unsigned(ap_const_lv19_1));
    exitcond_fu_335_p2 <= "1" when (index_reg_250 = ap_const_lv5_19) else "0";
    firstSample_load_load_fu_272_p1 <= firstSample;
    index_1_fu_341_p2 <= std_logic_vector(unsigned(index_reg_250) + unsigned(ap_const_lv5_1));
    tmp_1_fu_289_p2 <= "1" when (p_014_0_i_reg_239 = ap_const_lv19_493E0) else "0";
    tmp_2_fu_347_p1 <= AXI_UART_RDATA(8 - 1 downto 0);
    tmp_6_fu_351_p2 <= "1" when (p_014_0_i4_reg_261 = ap_const_lv20_927C0) else "0";
    tmp_fu_330_p2 <= "1" when (AXI_UART_addr_1_read_reg_423 = ap_const_lv32_F) else "0";
end behav;
