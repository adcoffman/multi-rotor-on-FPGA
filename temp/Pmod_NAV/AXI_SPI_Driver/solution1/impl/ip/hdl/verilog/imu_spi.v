// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="imu_spi,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=628,HLS_SYN_LUT=889,HLS_VERSION=2018_2}" *)

module imu_spi (
        ap_clk,
        ap_rst_n,
        m_axi_spi_bus_AWVALID,
        m_axi_spi_bus_AWREADY,
        m_axi_spi_bus_AWADDR,
        m_axi_spi_bus_AWID,
        m_axi_spi_bus_AWLEN,
        m_axi_spi_bus_AWSIZE,
        m_axi_spi_bus_AWBURST,
        m_axi_spi_bus_AWLOCK,
        m_axi_spi_bus_AWCACHE,
        m_axi_spi_bus_AWPROT,
        m_axi_spi_bus_AWQOS,
        m_axi_spi_bus_AWREGION,
        m_axi_spi_bus_AWUSER,
        m_axi_spi_bus_WVALID,
        m_axi_spi_bus_WREADY,
        m_axi_spi_bus_WDATA,
        m_axi_spi_bus_WSTRB,
        m_axi_spi_bus_WLAST,
        m_axi_spi_bus_WID,
        m_axi_spi_bus_WUSER,
        m_axi_spi_bus_ARVALID,
        m_axi_spi_bus_ARREADY,
        m_axi_spi_bus_ARADDR,
        m_axi_spi_bus_ARID,
        m_axi_spi_bus_ARLEN,
        m_axi_spi_bus_ARSIZE,
        m_axi_spi_bus_ARBURST,
        m_axi_spi_bus_ARLOCK,
        m_axi_spi_bus_ARCACHE,
        m_axi_spi_bus_ARPROT,
        m_axi_spi_bus_ARQOS,
        m_axi_spi_bus_ARREGION,
        m_axi_spi_bus_ARUSER,
        m_axi_spi_bus_RVALID,
        m_axi_spi_bus_RREADY,
        m_axi_spi_bus_RDATA,
        m_axi_spi_bus_RLAST,
        m_axi_spi_bus_RID,
        m_axi_spi_bus_RUSER,
        m_axi_spi_bus_RRESP,
        m_axi_spi_bus_BVALID,
        m_axi_spi_bus_BREADY,
        m_axi_spi_bus_BRESP,
        m_axi_spi_bus_BID,
        m_axi_spi_bus_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_SPI_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_SPI_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_SPI_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_SPI_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_BUS_TARGET_ADDR = 0;
parameter    C_M_AXI_SPI_BUS_USER_VALUE = 0;
parameter    C_M_AXI_SPI_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_SPI_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_SPI_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_spi_bus_AWVALID;
input   m_axi_spi_bus_AWREADY;
output  [C_M_AXI_SPI_BUS_ADDR_WIDTH - 1:0] m_axi_spi_bus_AWADDR;
output  [C_M_AXI_SPI_BUS_ID_WIDTH - 1:0] m_axi_spi_bus_AWID;
output  [7:0] m_axi_spi_bus_AWLEN;
output  [2:0] m_axi_spi_bus_AWSIZE;
output  [1:0] m_axi_spi_bus_AWBURST;
output  [1:0] m_axi_spi_bus_AWLOCK;
output  [3:0] m_axi_spi_bus_AWCACHE;
output  [2:0] m_axi_spi_bus_AWPROT;
output  [3:0] m_axi_spi_bus_AWQOS;
output  [3:0] m_axi_spi_bus_AWREGION;
output  [C_M_AXI_SPI_BUS_AWUSER_WIDTH - 1:0] m_axi_spi_bus_AWUSER;
output   m_axi_spi_bus_WVALID;
input   m_axi_spi_bus_WREADY;
output  [C_M_AXI_SPI_BUS_DATA_WIDTH - 1:0] m_axi_spi_bus_WDATA;
output  [C_M_AXI_SPI_BUS_WSTRB_WIDTH - 1:0] m_axi_spi_bus_WSTRB;
output   m_axi_spi_bus_WLAST;
output  [C_M_AXI_SPI_BUS_ID_WIDTH - 1:0] m_axi_spi_bus_WID;
output  [C_M_AXI_SPI_BUS_WUSER_WIDTH - 1:0] m_axi_spi_bus_WUSER;
output   m_axi_spi_bus_ARVALID;
input   m_axi_spi_bus_ARREADY;
output  [C_M_AXI_SPI_BUS_ADDR_WIDTH - 1:0] m_axi_spi_bus_ARADDR;
output  [C_M_AXI_SPI_BUS_ID_WIDTH - 1:0] m_axi_spi_bus_ARID;
output  [7:0] m_axi_spi_bus_ARLEN;
output  [2:0] m_axi_spi_bus_ARSIZE;
output  [1:0] m_axi_spi_bus_ARBURST;
output  [1:0] m_axi_spi_bus_ARLOCK;
output  [3:0] m_axi_spi_bus_ARCACHE;
output  [2:0] m_axi_spi_bus_ARPROT;
output  [3:0] m_axi_spi_bus_ARQOS;
output  [3:0] m_axi_spi_bus_ARREGION;
output  [C_M_AXI_SPI_BUS_ARUSER_WIDTH - 1:0] m_axi_spi_bus_ARUSER;
input   m_axi_spi_bus_RVALID;
output   m_axi_spi_bus_RREADY;
input  [C_M_AXI_SPI_BUS_DATA_WIDTH - 1:0] m_axi_spi_bus_RDATA;
input   m_axi_spi_bus_RLAST;
input  [C_M_AXI_SPI_BUS_ID_WIDTH - 1:0] m_axi_spi_bus_RID;
input  [C_M_AXI_SPI_BUS_RUSER_WIDTH - 1:0] m_axi_spi_bus_RUSER;
input  [1:0] m_axi_spi_bus_RRESP;
input   m_axi_spi_bus_BVALID;
output   m_axi_spi_bus_BREADY;
input  [1:0] m_axi_spi_bus_BRESP;
input  [C_M_AXI_SPI_BUS_ID_WIDTH - 1:0] m_axi_spi_bus_BID;
input  [C_M_AXI_SPI_BUS_BUSER_WIDTH - 1:0] m_axi_spi_bus_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] TX_message;
wire   [15:0] RX_message;
reg    spi_bus_blk_n_AW;
reg    spi_bus_blk_n_W;
wire    ap_CS_fsm_state2;
reg    spi_bus_blk_n_B;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
reg    spi_bus_blk_n_AR;
wire    ap_CS_fsm_state10;
reg    spi_bus_blk_n_R;
wire    ap_CS_fsm_state17;
reg    spi_bus_AWVALID;
wire    spi_bus_AWREADY;
reg   [31:0] spi_bus_AWADDR;
reg    spi_bus_WVALID;
wire    spi_bus_WREADY;
reg   [31:0] spi_bus_WDATA;
reg    spi_bus_ARVALID;
wire    spi_bus_ARREADY;
wire   [31:0] spi_bus_ARADDR;
wire    spi_bus_RVALID;
reg    spi_bus_RREADY;
wire   [31:0] spi_bus_RDATA;
wire    spi_bus_RLAST;
wire   [0:0] spi_bus_RID;
wire   [0:0] spi_bus_RUSER;
wire   [1:0] spi_bus_RRESP;
wire    spi_bus_BVALID;
reg    spi_bus_BREADY;
wire   [1:0] spi_bus_BRESP;
wire   [0:0] spi_bus_BID;
wire   [0:0] spi_bus_BUSER;
reg    ap_sig_ioackin_spi_bus_AWREADY;
reg    ap_sig_ioackin_spi_bus_WREADY;
reg    ap_block_state2_io;
reg   [15:0] TX_message_read_reg_168;
reg    ap_block_state3_io;
reg    ap_sig_ioackin_spi_bus_ARREADY;
reg    ap_reg_ioackin_spi_bus_AWREADY;
reg    ap_reg_ioackin_spi_bus_WREADY;
wire   [31:0] tmp_fu_145_p1;
reg    ap_reg_ioackin_spi_bus_ARREADY;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_reg_ioackin_spi_bus_AWREADY = 1'b0;
#0 ap_reg_ioackin_spi_bus_WREADY = 1'b0;
#0 ap_reg_ioackin_spi_bus_ARREADY = 1'b0;
end

imu_spi_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
imu_spi_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .TX_message(TX_message),
    .RX_message(RX_message)
);

imu_spi_spi_bus_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_SPI_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_SPI_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_SPI_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_SPI_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_SPI_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_SPI_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_SPI_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_SPI_BUS_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_SPI_BUS_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_SPI_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SPI_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SPI_BUS_CACHE_VALUE ))
imu_spi_spi_bus_m_axi_U(
    .AWVALID(m_axi_spi_bus_AWVALID),
    .AWREADY(m_axi_spi_bus_AWREADY),
    .AWADDR(m_axi_spi_bus_AWADDR),
    .AWID(m_axi_spi_bus_AWID),
    .AWLEN(m_axi_spi_bus_AWLEN),
    .AWSIZE(m_axi_spi_bus_AWSIZE),
    .AWBURST(m_axi_spi_bus_AWBURST),
    .AWLOCK(m_axi_spi_bus_AWLOCK),
    .AWCACHE(m_axi_spi_bus_AWCACHE),
    .AWPROT(m_axi_spi_bus_AWPROT),
    .AWQOS(m_axi_spi_bus_AWQOS),
    .AWREGION(m_axi_spi_bus_AWREGION),
    .AWUSER(m_axi_spi_bus_AWUSER),
    .WVALID(m_axi_spi_bus_WVALID),
    .WREADY(m_axi_spi_bus_WREADY),
    .WDATA(m_axi_spi_bus_WDATA),
    .WSTRB(m_axi_spi_bus_WSTRB),
    .WLAST(m_axi_spi_bus_WLAST),
    .WID(m_axi_spi_bus_WID),
    .WUSER(m_axi_spi_bus_WUSER),
    .ARVALID(m_axi_spi_bus_ARVALID),
    .ARREADY(m_axi_spi_bus_ARREADY),
    .ARADDR(m_axi_spi_bus_ARADDR),
    .ARID(m_axi_spi_bus_ARID),
    .ARLEN(m_axi_spi_bus_ARLEN),
    .ARSIZE(m_axi_spi_bus_ARSIZE),
    .ARBURST(m_axi_spi_bus_ARBURST),
    .ARLOCK(m_axi_spi_bus_ARLOCK),
    .ARCACHE(m_axi_spi_bus_ARCACHE),
    .ARPROT(m_axi_spi_bus_ARPROT),
    .ARQOS(m_axi_spi_bus_ARQOS),
    .ARREGION(m_axi_spi_bus_ARREGION),
    .ARUSER(m_axi_spi_bus_ARUSER),
    .RVALID(m_axi_spi_bus_RVALID),
    .RREADY(m_axi_spi_bus_RREADY),
    .RDATA(m_axi_spi_bus_RDATA),
    .RLAST(m_axi_spi_bus_RLAST),
    .RID(m_axi_spi_bus_RID),
    .RUSER(m_axi_spi_bus_RUSER),
    .RRESP(m_axi_spi_bus_RRESP),
    .BVALID(m_axi_spi_bus_BVALID),
    .BREADY(m_axi_spi_bus_BREADY),
    .BRESP(m_axi_spi_bus_BRESP),
    .BID(m_axi_spi_bus_BID),
    .BUSER(m_axi_spi_bus_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(spi_bus_ARVALID),
    .I_ARREADY(spi_bus_ARREADY),
    .I_ARADDR(spi_bus_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(spi_bus_RVALID),
    .I_RREADY(spi_bus_RREADY),
    .I_RDATA(spi_bus_RDATA),
    .I_RID(spi_bus_RID),
    .I_RUSER(spi_bus_RUSER),
    .I_RRESP(spi_bus_RRESP),
    .I_RLAST(spi_bus_RLAST),
    .I_AWVALID(spi_bus_AWVALID),
    .I_AWREADY(spi_bus_AWREADY),
    .I_AWADDR(spi_bus_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(spi_bus_WVALID),
    .I_WREADY(spi_bus_WREADY),
    .I_WDATA(spi_bus_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(spi_bus_BVALID),
    .I_BREADY(spi_bus_BREADY),
    .I_BRESP(spi_bus_BRESP),
    .I_BID(spi_bus_BID),
    .I_BUSER(spi_bus_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_spi_bus_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            if ((ap_sig_ioackin_spi_bus_ARREADY == 1'b1)) begin
                ap_reg_ioackin_spi_bus_ARREADY <= 1'b0;
            end else if ((spi_bus_ARREADY == 1'b1)) begin
                ap_reg_ioackin_spi_bus_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_spi_bus_AWREADY <= 1'b0;
    end else begin
        if (((~((ap_sig_ioackin_spi_bus_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_spi_bus_AWREADY <= 1'b0;
        end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (spi_bus_AWREADY == 1'b1)) | ((spi_bus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state2) & (spi_bus_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_spi_bus_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_spi_bus_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_spi_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_spi_bus_WREADY <= 1'b0;
        end else if ((((spi_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((spi_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state2) & (spi_bus_WREADY == 1'b1)))) begin
            ap_reg_ioackin_spi_bus_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        TX_message_read_reg_168 <= TX_message;
    end
end

always @ (*) begin
    if (((spi_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((spi_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_spi_bus_ARREADY == 1'b0)) begin
        ap_sig_ioackin_spi_bus_ARREADY = spi_bus_ARREADY;
    end else begin
        ap_sig_ioackin_spi_bus_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_spi_bus_AWREADY == 1'b0)) begin
        ap_sig_ioackin_spi_bus_AWREADY = spi_bus_AWREADY;
    end else begin
        ap_sig_ioackin_spi_bus_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_spi_bus_WREADY == 1'b0)) begin
        ap_sig_ioackin_spi_bus_WREADY = spi_bus_WREADY;
    end else begin
        ap_sig_ioackin_spi_bus_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_spi_bus_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        spi_bus_ARVALID = 1'b1;
    end else begin
        spi_bus_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_spi_bus_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            spi_bus_AWADDR = 64'd104;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            spi_bus_AWADDR = 64'd112;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            spi_bus_AWADDR = 64'd96;
        end else begin
            spi_bus_AWADDR = 'bx;
        end
    end else begin
        spi_bus_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_spi_bus_AWREADY == 1'b0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_reg_ioackin_spi_bus_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_reg_ioackin_spi_bus_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        spi_bus_AWVALID = 1'b1;
    end else begin
        spi_bus_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((spi_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((spi_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((spi_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        spi_bus_BREADY = 1'b1;
    end else begin
        spi_bus_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((spi_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        spi_bus_RREADY = 1'b1;
    end else begin
        spi_bus_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_spi_bus_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            spi_bus_WDATA = tmp_fu_145_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            spi_bus_WDATA = 32'd65534;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            spi_bus_WDATA = 32'd6;
        end else begin
            spi_bus_WDATA = 'bx;
        end
    end else begin
        spi_bus_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_spi_bus_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_spi_bus_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_reg_ioackin_spi_bus_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        spi_bus_WVALID = 1'b1;
    end else begin
        spi_bus_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        spi_bus_blk_n_AR = m_axi_spi_bus_ARREADY;
    end else begin
        spi_bus_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        spi_bus_blk_n_AW = m_axi_spi_bus_AWREADY;
    end else begin
        spi_bus_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        spi_bus_blk_n_B = m_axi_spi_bus_BVALID;
    end else begin
        spi_bus_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        spi_bus_blk_n_R = m_axi_spi_bus_RVALID;
    end else begin
        spi_bus_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        spi_bus_blk_n_W = m_axi_spi_bus_WREADY;
    end else begin
        spi_bus_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_sig_ioackin_spi_bus_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_spi_bus_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((spi_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((spi_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((spi_bus_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_sig_ioackin_spi_bus_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((spi_bus_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_io = ((ap_sig_ioackin_spi_bus_WREADY == 1'b0) | (ap_sig_ioackin_spi_bus_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((ap_sig_ioackin_spi_bus_WREADY == 1'b0) | (ap_sig_ioackin_spi_bus_AWREADY == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign spi_bus_ARADDR = 64'd108;

assign tmp_fu_145_p1 = TX_message_read_reg_168;

endmodule //imu_spi
