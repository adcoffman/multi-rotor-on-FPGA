#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("m_axi_spi_core_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_spi_core_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_spi_core_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_spi_core_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_spi_core_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_spi_core_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_spi_core_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_spi_core_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_spi_core_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_spi_core_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_spi_core_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_spi_core_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_spi_core_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_spi_core_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_spi_core_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_spi_core_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_spi_core_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_spi_core_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_spi_core_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_spi_core_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_spi_core_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_spi_core_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_spi_core_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_spi_core_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_spi_core_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_spi_core_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_spi_core_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_spi_core_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_spi_core_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_spi_core_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_spi_core_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_spi_core_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_spi_core_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_spi_core_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_spi_core_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_spi_core_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_spi_core_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_spi_core_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_spi_core_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_spi_core_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_spi_core_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_spi_core_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_spi_core_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_spi_core_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_spi_core_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
};
const char* HLS_Design_Meta::dut_name = "AXI_SPI_DRIVER";
