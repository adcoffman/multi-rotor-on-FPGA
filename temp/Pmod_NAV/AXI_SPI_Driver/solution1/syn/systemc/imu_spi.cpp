// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "imu_spi.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic imu_spi::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic imu_spi::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> imu_spi::ap_ST_fsm_state1 = "1";
const sc_lv<17> imu_spi::ap_ST_fsm_state2 = "10";
const sc_lv<17> imu_spi::ap_ST_fsm_state3 = "100";
const sc_lv<17> imu_spi::ap_ST_fsm_state4 = "1000";
const sc_lv<17> imu_spi::ap_ST_fsm_state5 = "10000";
const sc_lv<17> imu_spi::ap_ST_fsm_state6 = "100000";
const sc_lv<17> imu_spi::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> imu_spi::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> imu_spi::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> imu_spi::ap_const_lv32_1 = "1";
const sc_lv<32> imu_spi::ap_const_lv32_6 = "110";
const sc_lv<32> imu_spi::ap_const_lv32_2 = "10";
const sc_lv<32> imu_spi::ap_const_lv32_7 = "111";
const sc_lv<32> imu_spi::ap_const_lv32_3 = "11";
const sc_lv<32> imu_spi::ap_const_lv32_8 = "1000";
const sc_lv<32> imu_spi::ap_const_lv32_9 = "1001";
const sc_lv<32> imu_spi::ap_const_lv32_10 = "10000";
const int imu_spi::C_S_AXI_DATA_WIDTH = "100000";
const int imu_spi::C_M_AXI_SPI_BUS_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int imu_spi::C_M_AXI_SPI_BUS_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int imu_spi::C_M_AXI_SPI_BUS_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int imu_spi::C_M_AXI_SPI_BUS_CACHE_VALUE = "11";
const int imu_spi::C_M_AXI_DATA_WIDTH = "100000";
const bool imu_spi::ap_const_boolean_0 = false;
const sc_lv<64> imu_spi::ap_const_lv64_60 = "1100000";
const sc_lv<64> imu_spi::ap_const_lv64_70 = "1110000";
const sc_lv<64> imu_spi::ap_const_lv64_68 = "1101000";
const sc_lv<64> imu_spi::ap_const_lv64_6C = "1101100";
const sc_lv<1> imu_spi::ap_const_lv1_0 = "0";
const sc_lv<3> imu_spi::ap_const_lv3_0 = "000";
const sc_lv<2> imu_spi::ap_const_lv2_0 = "00";
const sc_lv<4> imu_spi::ap_const_lv4_0 = "0000";
const sc_lv<4> imu_spi::ap_const_lv4_F = "1111";
const sc_lv<32> imu_spi::ap_const_lv32_FFFE = "1111111111111110";
const bool imu_spi::ap_const_boolean_1 = true;

imu_spi::imu_spi(sc_module_name name) : sc_module(name), mVcdFile(0) {
    imu_spi_AXILiteS_s_axi_U = new imu_spi_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("imu_spi_AXILiteS_s_axi_U");
    imu_spi_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    imu_spi_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    imu_spi_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    imu_spi_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    imu_spi_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    imu_spi_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    imu_spi_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    imu_spi_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    imu_spi_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    imu_spi_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    imu_spi_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    imu_spi_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    imu_spi_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    imu_spi_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    imu_spi_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    imu_spi_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    imu_spi_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    imu_spi_AXILiteS_s_axi_U->ACLK(ap_clk);
    imu_spi_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    imu_spi_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    imu_spi_AXILiteS_s_axi_U->ap_start(ap_start);
    imu_spi_AXILiteS_s_axi_U->interrupt(interrupt);
    imu_spi_AXILiteS_s_axi_U->ap_ready(ap_ready);
    imu_spi_AXILiteS_s_axi_U->ap_done(ap_done);
    imu_spi_AXILiteS_s_axi_U->ap_idle(ap_idle);
    imu_spi_AXILiteS_s_axi_U->TX_message(TX_message);
    imu_spi_AXILiteS_s_axi_U->RX_message(RX_message);
    imu_spi_spi_bus_m_axi_U = new imu_spi_spi_bus_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_SPI_BUS_ID_WIDTH,C_M_AXI_SPI_BUS_ADDR_WIDTH,C_M_AXI_SPI_BUS_DATA_WIDTH,C_M_AXI_SPI_BUS_AWUSER_WIDTH,C_M_AXI_SPI_BUS_ARUSER_WIDTH,C_M_AXI_SPI_BUS_WUSER_WIDTH,C_M_AXI_SPI_BUS_RUSER_WIDTH,C_M_AXI_SPI_BUS_BUSER_WIDTH,C_M_AXI_SPI_BUS_TARGET_ADDR,C_M_AXI_SPI_BUS_USER_VALUE,C_M_AXI_SPI_BUS_PROT_VALUE,C_M_AXI_SPI_BUS_CACHE_VALUE>("imu_spi_spi_bus_m_axi_U");
    imu_spi_spi_bus_m_axi_U->AWVALID(m_axi_spi_bus_AWVALID);
    imu_spi_spi_bus_m_axi_U->AWREADY(m_axi_spi_bus_AWREADY);
    imu_spi_spi_bus_m_axi_U->AWADDR(m_axi_spi_bus_AWADDR);
    imu_spi_spi_bus_m_axi_U->AWID(m_axi_spi_bus_AWID);
    imu_spi_spi_bus_m_axi_U->AWLEN(m_axi_spi_bus_AWLEN);
    imu_spi_spi_bus_m_axi_U->AWSIZE(m_axi_spi_bus_AWSIZE);
    imu_spi_spi_bus_m_axi_U->AWBURST(m_axi_spi_bus_AWBURST);
    imu_spi_spi_bus_m_axi_U->AWLOCK(m_axi_spi_bus_AWLOCK);
    imu_spi_spi_bus_m_axi_U->AWCACHE(m_axi_spi_bus_AWCACHE);
    imu_spi_spi_bus_m_axi_U->AWPROT(m_axi_spi_bus_AWPROT);
    imu_spi_spi_bus_m_axi_U->AWQOS(m_axi_spi_bus_AWQOS);
    imu_spi_spi_bus_m_axi_U->AWREGION(m_axi_spi_bus_AWREGION);
    imu_spi_spi_bus_m_axi_U->AWUSER(m_axi_spi_bus_AWUSER);
    imu_spi_spi_bus_m_axi_U->WVALID(m_axi_spi_bus_WVALID);
    imu_spi_spi_bus_m_axi_U->WREADY(m_axi_spi_bus_WREADY);
    imu_spi_spi_bus_m_axi_U->WDATA(m_axi_spi_bus_WDATA);
    imu_spi_spi_bus_m_axi_U->WSTRB(m_axi_spi_bus_WSTRB);
    imu_spi_spi_bus_m_axi_U->WLAST(m_axi_spi_bus_WLAST);
    imu_spi_spi_bus_m_axi_U->WID(m_axi_spi_bus_WID);
    imu_spi_spi_bus_m_axi_U->WUSER(m_axi_spi_bus_WUSER);
    imu_spi_spi_bus_m_axi_U->ARVALID(m_axi_spi_bus_ARVALID);
    imu_spi_spi_bus_m_axi_U->ARREADY(m_axi_spi_bus_ARREADY);
    imu_spi_spi_bus_m_axi_U->ARADDR(m_axi_spi_bus_ARADDR);
    imu_spi_spi_bus_m_axi_U->ARID(m_axi_spi_bus_ARID);
    imu_spi_spi_bus_m_axi_U->ARLEN(m_axi_spi_bus_ARLEN);
    imu_spi_spi_bus_m_axi_U->ARSIZE(m_axi_spi_bus_ARSIZE);
    imu_spi_spi_bus_m_axi_U->ARBURST(m_axi_spi_bus_ARBURST);
    imu_spi_spi_bus_m_axi_U->ARLOCK(m_axi_spi_bus_ARLOCK);
    imu_spi_spi_bus_m_axi_U->ARCACHE(m_axi_spi_bus_ARCACHE);
    imu_spi_spi_bus_m_axi_U->ARPROT(m_axi_spi_bus_ARPROT);
    imu_spi_spi_bus_m_axi_U->ARQOS(m_axi_spi_bus_ARQOS);
    imu_spi_spi_bus_m_axi_U->ARREGION(m_axi_spi_bus_ARREGION);
    imu_spi_spi_bus_m_axi_U->ARUSER(m_axi_spi_bus_ARUSER);
    imu_spi_spi_bus_m_axi_U->RVALID(m_axi_spi_bus_RVALID);
    imu_spi_spi_bus_m_axi_U->RREADY(m_axi_spi_bus_RREADY);
    imu_spi_spi_bus_m_axi_U->RDATA(m_axi_spi_bus_RDATA);
    imu_spi_spi_bus_m_axi_U->RLAST(m_axi_spi_bus_RLAST);
    imu_spi_spi_bus_m_axi_U->RID(m_axi_spi_bus_RID);
    imu_spi_spi_bus_m_axi_U->RUSER(m_axi_spi_bus_RUSER);
    imu_spi_spi_bus_m_axi_U->RRESP(m_axi_spi_bus_RRESP);
    imu_spi_spi_bus_m_axi_U->BVALID(m_axi_spi_bus_BVALID);
    imu_spi_spi_bus_m_axi_U->BREADY(m_axi_spi_bus_BREADY);
    imu_spi_spi_bus_m_axi_U->BRESP(m_axi_spi_bus_BRESP);
    imu_spi_spi_bus_m_axi_U->BID(m_axi_spi_bus_BID);
    imu_spi_spi_bus_m_axi_U->BUSER(m_axi_spi_bus_BUSER);
    imu_spi_spi_bus_m_axi_U->ACLK(ap_clk);
    imu_spi_spi_bus_m_axi_U->ARESET(ap_rst_n_inv);
    imu_spi_spi_bus_m_axi_U->ACLK_EN(ap_var_for_const0);
    imu_spi_spi_bus_m_axi_U->I_ARVALID(spi_bus_ARVALID);
    imu_spi_spi_bus_m_axi_U->I_ARREADY(spi_bus_ARREADY);
    imu_spi_spi_bus_m_axi_U->I_ARADDR(spi_bus_ARADDR);
    imu_spi_spi_bus_m_axi_U->I_ARID(ap_var_for_const1);
    imu_spi_spi_bus_m_axi_U->I_ARLEN(ap_var_for_const2);
    imu_spi_spi_bus_m_axi_U->I_ARSIZE(ap_var_for_const3);
    imu_spi_spi_bus_m_axi_U->I_ARLOCK(ap_var_for_const4);
    imu_spi_spi_bus_m_axi_U->I_ARCACHE(ap_var_for_const5);
    imu_spi_spi_bus_m_axi_U->I_ARQOS(ap_var_for_const5);
    imu_spi_spi_bus_m_axi_U->I_ARPROT(ap_var_for_const3);
    imu_spi_spi_bus_m_axi_U->I_ARUSER(ap_var_for_const1);
    imu_spi_spi_bus_m_axi_U->I_ARBURST(ap_var_for_const4);
    imu_spi_spi_bus_m_axi_U->I_ARREGION(ap_var_for_const5);
    imu_spi_spi_bus_m_axi_U->I_RVALID(spi_bus_RVALID);
    imu_spi_spi_bus_m_axi_U->I_RREADY(spi_bus_RREADY);
    imu_spi_spi_bus_m_axi_U->I_RDATA(spi_bus_RDATA);
    imu_spi_spi_bus_m_axi_U->I_RID(spi_bus_RID);
    imu_spi_spi_bus_m_axi_U->I_RUSER(spi_bus_RUSER);
    imu_spi_spi_bus_m_axi_U->I_RRESP(spi_bus_RRESP);
    imu_spi_spi_bus_m_axi_U->I_RLAST(spi_bus_RLAST);
    imu_spi_spi_bus_m_axi_U->I_AWVALID(spi_bus_AWVALID);
    imu_spi_spi_bus_m_axi_U->I_AWREADY(spi_bus_AWREADY);
    imu_spi_spi_bus_m_axi_U->I_AWADDR(spi_bus_AWADDR);
    imu_spi_spi_bus_m_axi_U->I_AWID(ap_var_for_const1);
    imu_spi_spi_bus_m_axi_U->I_AWLEN(ap_var_for_const2);
    imu_spi_spi_bus_m_axi_U->I_AWSIZE(ap_var_for_const3);
    imu_spi_spi_bus_m_axi_U->I_AWLOCK(ap_var_for_const4);
    imu_spi_spi_bus_m_axi_U->I_AWCACHE(ap_var_for_const5);
    imu_spi_spi_bus_m_axi_U->I_AWQOS(ap_var_for_const5);
    imu_spi_spi_bus_m_axi_U->I_AWPROT(ap_var_for_const3);
    imu_spi_spi_bus_m_axi_U->I_AWUSER(ap_var_for_const1);
    imu_spi_spi_bus_m_axi_U->I_AWBURST(ap_var_for_const4);
    imu_spi_spi_bus_m_axi_U->I_AWREGION(ap_var_for_const5);
    imu_spi_spi_bus_m_axi_U->I_WVALID(spi_bus_WVALID);
    imu_spi_spi_bus_m_axi_U->I_WREADY(spi_bus_WREADY);
    imu_spi_spi_bus_m_axi_U->I_WDATA(spi_bus_WDATA);
    imu_spi_spi_bus_m_axi_U->I_WID(ap_var_for_const1);
    imu_spi_spi_bus_m_axi_U->I_WUSER(ap_var_for_const1);
    imu_spi_spi_bus_m_axi_U->I_WLAST(ap_var_for_const6);
    imu_spi_spi_bus_m_axi_U->I_WSTRB(ap_var_for_const7);
    imu_spi_spi_bus_m_axi_U->I_BVALID(spi_bus_BVALID);
    imu_spi_spi_bus_m_axi_U->I_BREADY(spi_bus_BREADY);
    imu_spi_spi_bus_m_axi_U->I_BRESP(spi_bus_BRESP);
    imu_spi_spi_bus_m_axi_U->I_BID(spi_bus_BID);
    imu_spi_spi_bus_m_axi_U->I_BUSER(spi_bus_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_sig_ioackin_spi_bus_AWREADY );
    sensitive << ( ap_sig_ioackin_spi_bus_WREADY );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_sig_ioackin_spi_bus_AWREADY );
    sensitive << ( ap_sig_ioackin_spi_bus_WREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( spi_bus_RVALID );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( spi_bus_RVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_spi_bus_ARREADY);
    sensitive << ( spi_bus_ARREADY );
    sensitive << ( ap_reg_ioackin_spi_bus_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_spi_bus_AWREADY);
    sensitive << ( spi_bus_AWREADY );
    sensitive << ( ap_reg_ioackin_spi_bus_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_spi_bus_WREADY);
    sensitive << ( spi_bus_WREADY );
    sensitive << ( ap_reg_ioackin_spi_bus_WREADY );

    SC_METHOD(thread_spi_bus_ARADDR);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_reg_ioackin_spi_bus_ARREADY );

    SC_METHOD(thread_spi_bus_ARVALID);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_reg_ioackin_spi_bus_ARREADY );

    SC_METHOD(thread_spi_bus_AWADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_spi_bus_AWREADY );

    SC_METHOD(thread_spi_bus_AWVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_spi_bus_AWREADY );

    SC_METHOD(thread_spi_bus_BREADY);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( spi_bus_BVALID );

    SC_METHOD(thread_spi_bus_RREADY);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( spi_bus_RVALID );

    SC_METHOD(thread_spi_bus_WDATA);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_spi_bus_WREADY );
    sensitive << ( tmp_fu_145_p1 );

    SC_METHOD(thread_spi_bus_WVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_spi_bus_WREADY );

    SC_METHOD(thread_spi_bus_blk_n_AR);
    sensitive << ( m_axi_spi_bus_ARREADY );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_spi_bus_blk_n_AW);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_spi_bus_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_spi_bus_blk_n_B);
    sensitive << ( m_axi_spi_bus_BVALID );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_spi_bus_blk_n_R);
    sensitive << ( m_axi_spi_bus_RVALID );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_spi_bus_blk_n_W);
    sensitive << ( m_axi_spi_bus_WREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_fu_145_p1);
    sensitive << ( TX_message_read_reg_168 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( spi_bus_RVALID );
    sensitive << ( spi_bus_BVALID );
    sensitive << ( ap_sig_ioackin_spi_bus_AWREADY );
    sensitive << ( ap_sig_ioackin_spi_bus_WREADY );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_sig_ioackin_spi_bus_ARREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "00000000000000001";
    ap_reg_ioackin_spi_bus_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_spi_bus_WREADY = SC_LOGIC_0;
    ap_reg_ioackin_spi_bus_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "imu_spi_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_spi_bus_AWVALID, "(port)m_axi_spi_bus_AWVALID");
    sc_trace(mVcdFile, m_axi_spi_bus_AWREADY, "(port)m_axi_spi_bus_AWREADY");
    sc_trace(mVcdFile, m_axi_spi_bus_AWADDR, "(port)m_axi_spi_bus_AWADDR");
    sc_trace(mVcdFile, m_axi_spi_bus_AWID, "(port)m_axi_spi_bus_AWID");
    sc_trace(mVcdFile, m_axi_spi_bus_AWLEN, "(port)m_axi_spi_bus_AWLEN");
    sc_trace(mVcdFile, m_axi_spi_bus_AWSIZE, "(port)m_axi_spi_bus_AWSIZE");
    sc_trace(mVcdFile, m_axi_spi_bus_AWBURST, "(port)m_axi_spi_bus_AWBURST");
    sc_trace(mVcdFile, m_axi_spi_bus_AWLOCK, "(port)m_axi_spi_bus_AWLOCK");
    sc_trace(mVcdFile, m_axi_spi_bus_AWCACHE, "(port)m_axi_spi_bus_AWCACHE");
    sc_trace(mVcdFile, m_axi_spi_bus_AWPROT, "(port)m_axi_spi_bus_AWPROT");
    sc_trace(mVcdFile, m_axi_spi_bus_AWQOS, "(port)m_axi_spi_bus_AWQOS");
    sc_trace(mVcdFile, m_axi_spi_bus_AWREGION, "(port)m_axi_spi_bus_AWREGION");
    sc_trace(mVcdFile, m_axi_spi_bus_AWUSER, "(port)m_axi_spi_bus_AWUSER");
    sc_trace(mVcdFile, m_axi_spi_bus_WVALID, "(port)m_axi_spi_bus_WVALID");
    sc_trace(mVcdFile, m_axi_spi_bus_WREADY, "(port)m_axi_spi_bus_WREADY");
    sc_trace(mVcdFile, m_axi_spi_bus_WDATA, "(port)m_axi_spi_bus_WDATA");
    sc_trace(mVcdFile, m_axi_spi_bus_WSTRB, "(port)m_axi_spi_bus_WSTRB");
    sc_trace(mVcdFile, m_axi_spi_bus_WLAST, "(port)m_axi_spi_bus_WLAST");
    sc_trace(mVcdFile, m_axi_spi_bus_WID, "(port)m_axi_spi_bus_WID");
    sc_trace(mVcdFile, m_axi_spi_bus_WUSER, "(port)m_axi_spi_bus_WUSER");
    sc_trace(mVcdFile, m_axi_spi_bus_ARVALID, "(port)m_axi_spi_bus_ARVALID");
    sc_trace(mVcdFile, m_axi_spi_bus_ARREADY, "(port)m_axi_spi_bus_ARREADY");
    sc_trace(mVcdFile, m_axi_spi_bus_ARADDR, "(port)m_axi_spi_bus_ARADDR");
    sc_trace(mVcdFile, m_axi_spi_bus_ARID, "(port)m_axi_spi_bus_ARID");
    sc_trace(mVcdFile, m_axi_spi_bus_ARLEN, "(port)m_axi_spi_bus_ARLEN");
    sc_trace(mVcdFile, m_axi_spi_bus_ARSIZE, "(port)m_axi_spi_bus_ARSIZE");
    sc_trace(mVcdFile, m_axi_spi_bus_ARBURST, "(port)m_axi_spi_bus_ARBURST");
    sc_trace(mVcdFile, m_axi_spi_bus_ARLOCK, "(port)m_axi_spi_bus_ARLOCK");
    sc_trace(mVcdFile, m_axi_spi_bus_ARCACHE, "(port)m_axi_spi_bus_ARCACHE");
    sc_trace(mVcdFile, m_axi_spi_bus_ARPROT, "(port)m_axi_spi_bus_ARPROT");
    sc_trace(mVcdFile, m_axi_spi_bus_ARQOS, "(port)m_axi_spi_bus_ARQOS");
    sc_trace(mVcdFile, m_axi_spi_bus_ARREGION, "(port)m_axi_spi_bus_ARREGION");
    sc_trace(mVcdFile, m_axi_spi_bus_ARUSER, "(port)m_axi_spi_bus_ARUSER");
    sc_trace(mVcdFile, m_axi_spi_bus_RVALID, "(port)m_axi_spi_bus_RVALID");
    sc_trace(mVcdFile, m_axi_spi_bus_RREADY, "(port)m_axi_spi_bus_RREADY");
    sc_trace(mVcdFile, m_axi_spi_bus_RDATA, "(port)m_axi_spi_bus_RDATA");
    sc_trace(mVcdFile, m_axi_spi_bus_RLAST, "(port)m_axi_spi_bus_RLAST");
    sc_trace(mVcdFile, m_axi_spi_bus_RID, "(port)m_axi_spi_bus_RID");
    sc_trace(mVcdFile, m_axi_spi_bus_RUSER, "(port)m_axi_spi_bus_RUSER");
    sc_trace(mVcdFile, m_axi_spi_bus_RRESP, "(port)m_axi_spi_bus_RRESP");
    sc_trace(mVcdFile, m_axi_spi_bus_BVALID, "(port)m_axi_spi_bus_BVALID");
    sc_trace(mVcdFile, m_axi_spi_bus_BREADY, "(port)m_axi_spi_bus_BREADY");
    sc_trace(mVcdFile, m_axi_spi_bus_BRESP, "(port)m_axi_spi_bus_BRESP");
    sc_trace(mVcdFile, m_axi_spi_bus_BID, "(port)m_axi_spi_bus_BID");
    sc_trace(mVcdFile, m_axi_spi_bus_BUSER, "(port)m_axi_spi_bus_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, TX_message, "TX_message");
    sc_trace(mVcdFile, RX_message, "RX_message");
    sc_trace(mVcdFile, spi_bus_blk_n_AW, "spi_bus_blk_n_AW");
    sc_trace(mVcdFile, spi_bus_blk_n_W, "spi_bus_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, spi_bus_blk_n_B, "spi_bus_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, spi_bus_blk_n_AR, "spi_bus_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, spi_bus_blk_n_R, "spi_bus_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, spi_bus_AWVALID, "spi_bus_AWVALID");
    sc_trace(mVcdFile, spi_bus_AWREADY, "spi_bus_AWREADY");
    sc_trace(mVcdFile, spi_bus_AWADDR, "spi_bus_AWADDR");
    sc_trace(mVcdFile, spi_bus_WVALID, "spi_bus_WVALID");
    sc_trace(mVcdFile, spi_bus_WREADY, "spi_bus_WREADY");
    sc_trace(mVcdFile, spi_bus_WDATA, "spi_bus_WDATA");
    sc_trace(mVcdFile, spi_bus_ARVALID, "spi_bus_ARVALID");
    sc_trace(mVcdFile, spi_bus_ARREADY, "spi_bus_ARREADY");
    sc_trace(mVcdFile, spi_bus_ARADDR, "spi_bus_ARADDR");
    sc_trace(mVcdFile, spi_bus_RVALID, "spi_bus_RVALID");
    sc_trace(mVcdFile, spi_bus_RREADY, "spi_bus_RREADY");
    sc_trace(mVcdFile, spi_bus_RDATA, "spi_bus_RDATA");
    sc_trace(mVcdFile, spi_bus_RLAST, "spi_bus_RLAST");
    sc_trace(mVcdFile, spi_bus_RID, "spi_bus_RID");
    sc_trace(mVcdFile, spi_bus_RUSER, "spi_bus_RUSER");
    sc_trace(mVcdFile, spi_bus_RRESP, "spi_bus_RRESP");
    sc_trace(mVcdFile, spi_bus_BVALID, "spi_bus_BVALID");
    sc_trace(mVcdFile, spi_bus_BREADY, "spi_bus_BREADY");
    sc_trace(mVcdFile, spi_bus_BRESP, "spi_bus_BRESP");
    sc_trace(mVcdFile, spi_bus_BID, "spi_bus_BID");
    sc_trace(mVcdFile, spi_bus_BUSER, "spi_bus_BUSER");
    sc_trace(mVcdFile, ap_sig_ioackin_spi_bus_AWREADY, "ap_sig_ioackin_spi_bus_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_spi_bus_WREADY, "ap_sig_ioackin_spi_bus_WREADY");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, TX_message_read_reg_168, "TX_message_read_reg_168");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_sig_ioackin_spi_bus_ARREADY, "ap_sig_ioackin_spi_bus_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_spi_bus_AWREADY, "ap_reg_ioackin_spi_bus_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_spi_bus_WREADY, "ap_reg_ioackin_spi_bus_WREADY");
    sc_trace(mVcdFile, tmp_fu_145_p1, "tmp_fu_145_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_spi_bus_ARREADY, "ap_reg_ioackin_spi_bus_ARREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("imu_spi.hdltvin.dat");
    mHdltvoutHandle.open("imu_spi.hdltvout.dat");
}

imu_spi::~imu_spi() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete imu_spi_AXILiteS_s_axi_U;
    delete imu_spi_spi_bus_m_axi_U;
}

void imu_spi::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void imu_spi::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void imu_spi::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void imu_spi::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void imu_spi::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void imu_spi::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void imu_spi::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void imu_spi::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void imu_spi::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_spi_bus_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_spi_bus_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, spi_bus_ARREADY.read())) {
                ap_reg_ioackin_spi_bus_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_spi_bus_AWREADY = ap_const_logic_0;
    } else {
        if (((!(esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_AWREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())))) {
            ap_reg_ioackin_spi_bus_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_bus_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_bus_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_bus_AWREADY.read())))) {
            ap_reg_ioackin_spi_bus_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_spi_bus_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
             (esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_WREADY.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
            ap_reg_ioackin_spi_bus_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_bus_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_bus_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_bus_WREADY.read())))) {
            ap_reg_ioackin_spi_bus_WREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        TX_message_read_reg_168 = TX_message.read();
    }
}

void imu_spi::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void imu_spi::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void imu_spi::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void imu_spi::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void imu_spi::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void imu_spi::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void imu_spi::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void imu_spi::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void imu_spi::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void imu_spi::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_AWREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_bus_WREADY.read()));
}

void imu_spi::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_AWREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_bus_WREADY.read()));
}

void imu_spi::thread_ap_done() {
    if ((esl_seteq<1,1,1>(spi_bus_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void imu_spi::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void imu_spi::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(spi_bus_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void imu_spi::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void imu_spi::thread_ap_sig_ioackin_spi_bus_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_ARREADY.read())) {
        ap_sig_ioackin_spi_bus_ARREADY = spi_bus_ARREADY.read();
    } else {
        ap_sig_ioackin_spi_bus_ARREADY = ap_const_logic_1;
    }
}

void imu_spi::thread_ap_sig_ioackin_spi_bus_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_AWREADY.read())) {
        ap_sig_ioackin_spi_bus_AWREADY = spi_bus_AWREADY.read();
    } else {
        ap_sig_ioackin_spi_bus_AWREADY = ap_const_logic_1;
    }
}

void imu_spi::thread_ap_sig_ioackin_spi_bus_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_WREADY.read())) {
        ap_sig_ioackin_spi_bus_WREADY = spi_bus_WREADY.read();
    } else {
        ap_sig_ioackin_spi_bus_WREADY = ap_const_logic_1;
    }
}

void imu_spi::thread_spi_bus_ARADDR() {
    spi_bus_ARADDR =  (sc_lv<32>) (ap_const_lv64_6C);
}

void imu_spi::thread_spi_bus_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_ARREADY.read()))) {
        spi_bus_ARVALID = ap_const_logic_1;
    } else {
        spi_bus_ARVALID = ap_const_logic_0;
    }
}

void imu_spi::thread_spi_bus_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_AWREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            spi_bus_AWADDR =  (sc_lv<32>) (ap_const_lv64_68);
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            spi_bus_AWADDR =  (sc_lv<32>) (ap_const_lv64_70);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            spi_bus_AWADDR =  (sc_lv<32>) (ap_const_lv64_60);
        } else {
            spi_bus_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        spi_bus_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void imu_spi::thread_spi_bus_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_AWREADY.read())))) {
        spi_bus_AWVALID = ap_const_logic_1;
    } else {
        spi_bus_AWVALID = ap_const_logic_0;
    }
}

void imu_spi::thread_spi_bus_BREADY() {
    if (((esl_seteq<1,1,1>(spi_bus_BVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(spi_bus_BVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(spi_bus_BVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())))) {
        spi_bus_BREADY = ap_const_logic_1;
    } else {
        spi_bus_BREADY = ap_const_logic_0;
    }
}

void imu_spi::thread_spi_bus_RREADY() {
    if ((esl_seteq<1,1,1>(spi_bus_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        spi_bus_RREADY = ap_const_logic_1;
    } else {
        spi_bus_RREADY = ap_const_logic_0;
    }
}

void imu_spi::thread_spi_bus_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            spi_bus_WDATA = tmp_fu_145_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            spi_bus_WDATA = ap_const_lv32_FFFE;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            spi_bus_WDATA = ap_const_lv32_6;
        } else {
            spi_bus_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        spi_bus_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void imu_spi::thread_spi_bus_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_bus_WREADY.read())))) {
        spi_bus_WVALID = ap_const_logic_1;
    } else {
        spi_bus_WVALID = ap_const_logic_0;
    }
}

void imu_spi::thread_spi_bus_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        spi_bus_blk_n_AR = m_axi_spi_bus_ARREADY.read();
    } else {
        spi_bus_blk_n_AR = ap_const_logic_1;
    }
}

void imu_spi::thread_spi_bus_blk_n_AW() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        spi_bus_blk_n_AW = m_axi_spi_bus_AWREADY.read();
    } else {
        spi_bus_blk_n_AW = ap_const_logic_1;
    }
}

void imu_spi::thread_spi_bus_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        spi_bus_blk_n_B = m_axi_spi_bus_BVALID.read();
    } else {
        spi_bus_blk_n_B = ap_const_logic_1;
    }
}

void imu_spi::thread_spi_bus_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        spi_bus_blk_n_R = m_axi_spi_bus_RVALID.read();
    } else {
        spi_bus_blk_n_R = ap_const_logic_1;
    }
}

void imu_spi::thread_spi_bus_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        spi_bus_blk_n_W = m_axi_spi_bus_WREADY.read();
    } else {
        spi_bus_blk_n_W = ap_const_logic_1;
    }
}

void imu_spi::thread_tmp_fu_145_p1() {
    tmp_fu_145_p1 = esl_zext<32,16>(TX_message_read_reg_168.read());
}

void imu_spi::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_AWREADY.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(spi_bus_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(spi_bus_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(spi_bus_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_spi_bus_ARREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(spi_bus_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

void imu_spi::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_spi_bus_AWVALID\" :  \"" << m_axi_spi_bus_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_AWREADY\" :  \"" << m_axi_spi_bus_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWADDR\" :  \"" << m_axi_spi_bus_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWID\" :  \"" << m_axi_spi_bus_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWLEN\" :  \"" << m_axi_spi_bus_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWSIZE\" :  \"" << m_axi_spi_bus_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWBURST\" :  \"" << m_axi_spi_bus_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWLOCK\" :  \"" << m_axi_spi_bus_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWCACHE\" :  \"" << m_axi_spi_bus_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWPROT\" :  \"" << m_axi_spi_bus_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWQOS\" :  \"" << m_axi_spi_bus_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWREGION\" :  \"" << m_axi_spi_bus_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_AWUSER\" :  \"" << m_axi_spi_bus_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_WVALID\" :  \"" << m_axi_spi_bus_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_WREADY\" :  \"" << m_axi_spi_bus_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_WDATA\" :  \"" << m_axi_spi_bus_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_WSTRB\" :  \"" << m_axi_spi_bus_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_WLAST\" :  \"" << m_axi_spi_bus_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_WID\" :  \"" << m_axi_spi_bus_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_WUSER\" :  \"" << m_axi_spi_bus_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARVALID\" :  \"" << m_axi_spi_bus_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_ARREADY\" :  \"" << m_axi_spi_bus_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARADDR\" :  \"" << m_axi_spi_bus_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARID\" :  \"" << m_axi_spi_bus_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARLEN\" :  \"" << m_axi_spi_bus_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARSIZE\" :  \"" << m_axi_spi_bus_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARBURST\" :  \"" << m_axi_spi_bus_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARLOCK\" :  \"" << m_axi_spi_bus_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARCACHE\" :  \"" << m_axi_spi_bus_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARPROT\" :  \"" << m_axi_spi_bus_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARQOS\" :  \"" << m_axi_spi_bus_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARREGION\" :  \"" << m_axi_spi_bus_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_ARUSER\" :  \"" << m_axi_spi_bus_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_RVALID\" :  \"" << m_axi_spi_bus_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_RREADY\" :  \"" << m_axi_spi_bus_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_RDATA\" :  \"" << m_axi_spi_bus_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_RLAST\" :  \"" << m_axi_spi_bus_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_RID\" :  \"" << m_axi_spi_bus_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_RUSER\" :  \"" << m_axi_spi_bus_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_RRESP\" :  \"" << m_axi_spi_bus_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_BVALID\" :  \"" << m_axi_spi_bus_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_bus_BREADY\" :  \"" << m_axi_spi_bus_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_BRESP\" :  \"" << m_axi_spi_bus_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_BID\" :  \"" << m_axi_spi_bus_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_bus_BUSER\" :  \"" << m_axi_spi_bus_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

