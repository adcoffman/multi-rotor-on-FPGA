// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _imu_spi_HH_
#define _imu_spi_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "imu_spi_AXILiteS_s_axi.h"
#include "imu_spi_spi_bus_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_SPI_BUS_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_SPI_BUS_ID_WIDTH = 1,
         unsigned int C_M_AXI_SPI_BUS_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_SPI_BUS_DATA_WIDTH = 32,
         unsigned int C_M_AXI_SPI_BUS_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_SPI_BUS_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_SPI_BUS_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_SPI_BUS_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct imu_spi : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_spi_bus_AWVALID;
    sc_in< sc_logic > m_axi_spi_bus_AWREADY;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_ADDR_WIDTH> > m_axi_spi_bus_AWADDR;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_ID_WIDTH> > m_axi_spi_bus_AWID;
    sc_out< sc_lv<8> > m_axi_spi_bus_AWLEN;
    sc_out< sc_lv<3> > m_axi_spi_bus_AWSIZE;
    sc_out< sc_lv<2> > m_axi_spi_bus_AWBURST;
    sc_out< sc_lv<2> > m_axi_spi_bus_AWLOCK;
    sc_out< sc_lv<4> > m_axi_spi_bus_AWCACHE;
    sc_out< sc_lv<3> > m_axi_spi_bus_AWPROT;
    sc_out< sc_lv<4> > m_axi_spi_bus_AWQOS;
    sc_out< sc_lv<4> > m_axi_spi_bus_AWREGION;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_AWUSER_WIDTH> > m_axi_spi_bus_AWUSER;
    sc_out< sc_logic > m_axi_spi_bus_WVALID;
    sc_in< sc_logic > m_axi_spi_bus_WREADY;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_DATA_WIDTH> > m_axi_spi_bus_WDATA;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_DATA_WIDTH/8> > m_axi_spi_bus_WSTRB;
    sc_out< sc_logic > m_axi_spi_bus_WLAST;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_ID_WIDTH> > m_axi_spi_bus_WID;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_WUSER_WIDTH> > m_axi_spi_bus_WUSER;
    sc_out< sc_logic > m_axi_spi_bus_ARVALID;
    sc_in< sc_logic > m_axi_spi_bus_ARREADY;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_ADDR_WIDTH> > m_axi_spi_bus_ARADDR;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_ID_WIDTH> > m_axi_spi_bus_ARID;
    sc_out< sc_lv<8> > m_axi_spi_bus_ARLEN;
    sc_out< sc_lv<3> > m_axi_spi_bus_ARSIZE;
    sc_out< sc_lv<2> > m_axi_spi_bus_ARBURST;
    sc_out< sc_lv<2> > m_axi_spi_bus_ARLOCK;
    sc_out< sc_lv<4> > m_axi_spi_bus_ARCACHE;
    sc_out< sc_lv<3> > m_axi_spi_bus_ARPROT;
    sc_out< sc_lv<4> > m_axi_spi_bus_ARQOS;
    sc_out< sc_lv<4> > m_axi_spi_bus_ARREGION;
    sc_out< sc_uint<C_M_AXI_SPI_BUS_ARUSER_WIDTH> > m_axi_spi_bus_ARUSER;
    sc_in< sc_logic > m_axi_spi_bus_RVALID;
    sc_out< sc_logic > m_axi_spi_bus_RREADY;
    sc_in< sc_uint<C_M_AXI_SPI_BUS_DATA_WIDTH> > m_axi_spi_bus_RDATA;
    sc_in< sc_logic > m_axi_spi_bus_RLAST;
    sc_in< sc_uint<C_M_AXI_SPI_BUS_ID_WIDTH> > m_axi_spi_bus_RID;
    sc_in< sc_uint<C_M_AXI_SPI_BUS_RUSER_WIDTH> > m_axi_spi_bus_RUSER;
    sc_in< sc_lv<2> > m_axi_spi_bus_RRESP;
    sc_in< sc_logic > m_axi_spi_bus_BVALID;
    sc_out< sc_logic > m_axi_spi_bus_BREADY;
    sc_in< sc_lv<2> > m_axi_spi_bus_BRESP;
    sc_in< sc_uint<C_M_AXI_SPI_BUS_ID_WIDTH> > m_axi_spi_bus_BID;
    sc_in< sc_uint<C_M_AXI_SPI_BUS_BUSER_WIDTH> > m_axi_spi_bus_BUSER;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const7;


    // Module declarations
    imu_spi(sc_module_name name);
    SC_HAS_PROCESS(imu_spi);

    ~imu_spi();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    imu_spi_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* imu_spi_AXILiteS_s_axi_U;
    imu_spi_spi_bus_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_SPI_BUS_ID_WIDTH,C_M_AXI_SPI_BUS_ADDR_WIDTH,C_M_AXI_SPI_BUS_DATA_WIDTH,C_M_AXI_SPI_BUS_AWUSER_WIDTH,C_M_AXI_SPI_BUS_ARUSER_WIDTH,C_M_AXI_SPI_BUS_WUSER_WIDTH,C_M_AXI_SPI_BUS_RUSER_WIDTH,C_M_AXI_SPI_BUS_BUSER_WIDTH,C_M_AXI_SPI_BUS_TARGET_ADDR,C_M_AXI_SPI_BUS_USER_VALUE,C_M_AXI_SPI_BUS_PROT_VALUE,C_M_AXI_SPI_BUS_CACHE_VALUE>* imu_spi_spi_bus_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<17> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<16> > TX_message;
    sc_signal< sc_lv<16> > RX_message;
    sc_signal< sc_logic > spi_bus_blk_n_AW;
    sc_signal< sc_logic > spi_bus_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > spi_bus_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > spi_bus_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > spi_bus_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > spi_bus_AWVALID;
    sc_signal< sc_logic > spi_bus_AWREADY;
    sc_signal< sc_lv<32> > spi_bus_AWADDR;
    sc_signal< sc_logic > spi_bus_WVALID;
    sc_signal< sc_logic > spi_bus_WREADY;
    sc_signal< sc_lv<32> > spi_bus_WDATA;
    sc_signal< sc_logic > spi_bus_ARVALID;
    sc_signal< sc_logic > spi_bus_ARREADY;
    sc_signal< sc_lv<32> > spi_bus_ARADDR;
    sc_signal< sc_logic > spi_bus_RVALID;
    sc_signal< sc_logic > spi_bus_RREADY;
    sc_signal< sc_lv<32> > spi_bus_RDATA;
    sc_signal< sc_logic > spi_bus_RLAST;
    sc_signal< sc_lv<1> > spi_bus_RID;
    sc_signal< sc_lv<1> > spi_bus_RUSER;
    sc_signal< sc_lv<2> > spi_bus_RRESP;
    sc_signal< sc_logic > spi_bus_BVALID;
    sc_signal< sc_logic > spi_bus_BREADY;
    sc_signal< sc_lv<2> > spi_bus_BRESP;
    sc_signal< sc_lv<1> > spi_bus_BID;
    sc_signal< sc_lv<1> > spi_bus_BUSER;
    sc_signal< sc_logic > ap_sig_ioackin_spi_bus_AWREADY;
    sc_signal< sc_logic > ap_sig_ioackin_spi_bus_WREADY;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<16> > TX_message_read_reg_168;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_logic > ap_sig_ioackin_spi_bus_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_spi_bus_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_spi_bus_WREADY;
    sc_signal< sc_lv<32> > tmp_fu_145_p1;
    sc_signal< sc_logic > ap_reg_ioackin_spi_bus_ARREADY;
    sc_signal< sc_lv<17> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<17> ap_ST_fsm_state1;
    static const sc_lv<17> ap_ST_fsm_state2;
    static const sc_lv<17> ap_ST_fsm_state3;
    static const sc_lv<17> ap_ST_fsm_state4;
    static const sc_lv<17> ap_ST_fsm_state5;
    static const sc_lv<17> ap_ST_fsm_state6;
    static const sc_lv<17> ap_ST_fsm_state7;
    static const sc_lv<17> ap_ST_fsm_state8;
    static const sc_lv<17> ap_ST_fsm_state9;
    static const sc_lv<17> ap_ST_fsm_state10;
    static const sc_lv<17> ap_ST_fsm_state11;
    static const sc_lv<17> ap_ST_fsm_state12;
    static const sc_lv<17> ap_ST_fsm_state13;
    static const sc_lv<17> ap_ST_fsm_state14;
    static const sc_lv<17> ap_ST_fsm_state15;
    static const sc_lv<17> ap_ST_fsm_state16;
    static const sc_lv<17> ap_ST_fsm_state17;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_10;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_SPI_BUS_TARGET_ADDR;
    static const int C_M_AXI_SPI_BUS_USER_VALUE;
    static const int C_M_AXI_SPI_BUS_PROT_VALUE;
    static const int C_M_AXI_SPI_BUS_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const bool ap_const_boolean_0;
    static const sc_lv<64> ap_const_lv64_60;
    static const sc_lv<64> ap_const_lv64_70;
    static const sc_lv<64> ap_const_lv64_68;
    static const sc_lv<64> ap_const_lv64_6C;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_FFFE;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state2_io();
    void thread_ap_block_state3_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_spi_bus_ARREADY();
    void thread_ap_sig_ioackin_spi_bus_AWREADY();
    void thread_ap_sig_ioackin_spi_bus_WREADY();
    void thread_spi_bus_ARADDR();
    void thread_spi_bus_ARVALID();
    void thread_spi_bus_AWADDR();
    void thread_spi_bus_AWVALID();
    void thread_spi_bus_BREADY();
    void thread_spi_bus_RREADY();
    void thread_spi_bus_WDATA();
    void thread_spi_bus_WVALID();
    void thread_spi_bus_blk_n_AR();
    void thread_spi_bus_blk_n_AW();
    void thread_spi_bus_blk_n_B();
    void thread_spi_bus_blk_n_R();
    void thread_spi_bus_blk_n_W();
    void thread_tmp_fu_145_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
