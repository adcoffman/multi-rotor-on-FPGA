// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXI_SPI_DRIVER.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXI_SPI_DRIVER::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXI_SPI_DRIVER::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state1 = "1";
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state2 = "10";
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state3 = "100";
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state4 = "1000";
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state5 = "10000";
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state6 = "100000";
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> AXI_SPI_DRIVER::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> AXI_SPI_DRIVER::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AXI_SPI_DRIVER::ap_const_boolean_1 = true;
const sc_lv<4> AXI_SPI_DRIVER::ap_const_lv4_0 = "0000";
const sc_lv<32> AXI_SPI_DRIVER::ap_const_lv32_1 = "1";
const sc_lv<32> AXI_SPI_DRIVER::ap_const_lv32_2 = "10";
const sc_lv<32> AXI_SPI_DRIVER::ap_const_lv32_7 = "111";
const sc_lv<4> AXI_SPI_DRIVER::ap_const_lv4_1 = "1";
const int AXI_SPI_DRIVER::C_M_AXI_SPI_CORE_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int AXI_SPI_DRIVER::C_M_AXI_SPI_CORE_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int AXI_SPI_DRIVER::C_M_AXI_SPI_CORE_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int AXI_SPI_DRIVER::C_M_AXI_SPI_CORE_CACHE_VALUE = "11";
const int AXI_SPI_DRIVER::C_M_AXI_DATA_WIDTH = "100000";
const bool AXI_SPI_DRIVER::ap_const_boolean_0 = false;
const sc_lv<64> AXI_SPI_DRIVER::ap_const_lv64_1C = "11100";
const sc_lv<64> AXI_SPI_DRIVER::ap_const_lv64_18 = "11000";
const sc_lv<64> AXI_SPI_DRIVER::ap_const_lv64_7 = "111";
const sc_lv<1> AXI_SPI_DRIVER::ap_const_lv1_0 = "0";
const sc_lv<3> AXI_SPI_DRIVER::ap_const_lv3_0 = "000";
const sc_lv<2> AXI_SPI_DRIVER::ap_const_lv2_0 = "00";
const sc_lv<32> AXI_SPI_DRIVER::ap_const_lv32_FFFE = "1111111111111110";
const sc_lv<4> AXI_SPI_DRIVER::ap_const_lv4_F = "1111";
const sc_lv<32> AXI_SPI_DRIVER::ap_const_lv32_6 = "110";
const sc_lv<32> AXI_SPI_DRIVER::ap_const_lv32_5555 = "101010101010101";
const sc_lv<4> AXI_SPI_DRIVER::ap_const_lv4_2 = "10";

AXI_SPI_DRIVER::AXI_SPI_DRIVER(sc_module_name name) : sc_module(name), mVcdFile(0) {
    AXI_SPI_DRIVER_spi_core_m_axi_U = new AXI_SPI_DRIVER_spi_core_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_SPI_CORE_ID_WIDTH,C_M_AXI_SPI_CORE_ADDR_WIDTH,C_M_AXI_SPI_CORE_DATA_WIDTH,C_M_AXI_SPI_CORE_AWUSER_WIDTH,C_M_AXI_SPI_CORE_ARUSER_WIDTH,C_M_AXI_SPI_CORE_WUSER_WIDTH,C_M_AXI_SPI_CORE_RUSER_WIDTH,C_M_AXI_SPI_CORE_BUSER_WIDTH,C_M_AXI_SPI_CORE_TARGET_ADDR,C_M_AXI_SPI_CORE_USER_VALUE,C_M_AXI_SPI_CORE_PROT_VALUE,C_M_AXI_SPI_CORE_CACHE_VALUE>("AXI_SPI_DRIVER_spi_core_m_axi_U");
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWVALID(m_axi_spi_core_AWVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWREADY(m_axi_spi_core_AWREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWADDR(m_axi_spi_core_AWADDR);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWID(m_axi_spi_core_AWID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWLEN(m_axi_spi_core_AWLEN);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWSIZE(m_axi_spi_core_AWSIZE);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWBURST(m_axi_spi_core_AWBURST);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWLOCK(m_axi_spi_core_AWLOCK);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWCACHE(m_axi_spi_core_AWCACHE);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWPROT(m_axi_spi_core_AWPROT);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWQOS(m_axi_spi_core_AWQOS);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWREGION(m_axi_spi_core_AWREGION);
    AXI_SPI_DRIVER_spi_core_m_axi_U->AWUSER(m_axi_spi_core_AWUSER);
    AXI_SPI_DRIVER_spi_core_m_axi_U->WVALID(m_axi_spi_core_WVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->WREADY(m_axi_spi_core_WREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->WDATA(m_axi_spi_core_WDATA);
    AXI_SPI_DRIVER_spi_core_m_axi_U->WSTRB(m_axi_spi_core_WSTRB);
    AXI_SPI_DRIVER_spi_core_m_axi_U->WLAST(m_axi_spi_core_WLAST);
    AXI_SPI_DRIVER_spi_core_m_axi_U->WID(m_axi_spi_core_WID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->WUSER(m_axi_spi_core_WUSER);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARVALID(m_axi_spi_core_ARVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARREADY(m_axi_spi_core_ARREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARADDR(m_axi_spi_core_ARADDR);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARID(m_axi_spi_core_ARID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARLEN(m_axi_spi_core_ARLEN);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARSIZE(m_axi_spi_core_ARSIZE);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARBURST(m_axi_spi_core_ARBURST);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARLOCK(m_axi_spi_core_ARLOCK);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARCACHE(m_axi_spi_core_ARCACHE);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARPROT(m_axi_spi_core_ARPROT);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARQOS(m_axi_spi_core_ARQOS);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARREGION(m_axi_spi_core_ARREGION);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARUSER(m_axi_spi_core_ARUSER);
    AXI_SPI_DRIVER_spi_core_m_axi_U->RVALID(m_axi_spi_core_RVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->RREADY(m_axi_spi_core_RREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->RDATA(m_axi_spi_core_RDATA);
    AXI_SPI_DRIVER_spi_core_m_axi_U->RLAST(m_axi_spi_core_RLAST);
    AXI_SPI_DRIVER_spi_core_m_axi_U->RID(m_axi_spi_core_RID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->RUSER(m_axi_spi_core_RUSER);
    AXI_SPI_DRIVER_spi_core_m_axi_U->RRESP(m_axi_spi_core_RRESP);
    AXI_SPI_DRIVER_spi_core_m_axi_U->BVALID(m_axi_spi_core_BVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->BREADY(m_axi_spi_core_BREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->BRESP(m_axi_spi_core_BRESP);
    AXI_SPI_DRIVER_spi_core_m_axi_U->BID(m_axi_spi_core_BID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->BUSER(m_axi_spi_core_BUSER);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ACLK(ap_clk);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ARESET(ap_rst_n_inv);
    AXI_SPI_DRIVER_spi_core_m_axi_U->ACLK_EN(ap_var_for_const0);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARVALID(ap_var_for_const1);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARREADY(spi_core_ARREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARADDR(ap_var_for_const2);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARID(ap_var_for_const3);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARLEN(ap_var_for_const2);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARSIZE(ap_var_for_const4);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARLOCK(ap_var_for_const5);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARCACHE(ap_var_for_const6);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARQOS(ap_var_for_const6);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARPROT(ap_var_for_const4);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARUSER(ap_var_for_const3);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARBURST(ap_var_for_const5);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_ARREGION(ap_var_for_const6);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_RVALID(spi_core_RVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_RREADY(ap_var_for_const1);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_RDATA(spi_core_RDATA);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_RID(spi_core_RID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_RUSER(spi_core_RUSER);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_RRESP(spi_core_RRESP);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_RLAST(spi_core_RLAST);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWVALID(spi_core_AWVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWREADY(spi_core_AWREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWADDR(spi_core_AWADDR);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWID(ap_var_for_const3);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWLEN(ap_var_for_const7);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWSIZE(ap_var_for_const4);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWLOCK(ap_var_for_const5);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWCACHE(ap_var_for_const6);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWQOS(ap_var_for_const6);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWPROT(ap_var_for_const4);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWUSER(ap_var_for_const3);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWBURST(ap_var_for_const5);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_AWREGION(ap_var_for_const6);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_WVALID(spi_core_WVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_WREADY(spi_core_WREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_WDATA(spi_core_WDATA);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_WID(ap_var_for_const3);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_WUSER(ap_var_for_const3);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_WLAST(ap_var_for_const1);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_WSTRB(ap_var_for_const8);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_BVALID(spi_core_BVALID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_BREADY(spi_core_BREADY);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_BRESP(spi_core_BRESP);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_BID(spi_core_BID);
    AXI_SPI_DRIVER_spi_core_m_axi_U->I_BUSER(spi_core_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_sig_ioackin_spi_core_AWREADY );
    sensitive << ( ap_predicate_op24_writereq_state2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_sig_ioackin_spi_core_WREADY );
    sensitive << ( ap_predicate_op27_write_state3 );

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( state_load_reg_154 );
    sensitive << ( spi_core_BVALID );
    sensitive << ( ap_predicate_op44_writeresp_state8 );

    SC_METHOD(thread_ap_done);
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( spi_core_BVALID );
    sensitive << ( ap_predicate_op44_writeresp_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op24_writereq_state2);
    sensitive << ( state_load_reg_154 );

    SC_METHOD(thread_ap_predicate_op27_write_state3);
    sensitive << ( state_load_reg_154 );

    SC_METHOD(thread_ap_predicate_op44_writeresp_state8);
    sensitive << ( state_load_reg_154 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( spi_core_BVALID );
    sensitive << ( ap_predicate_op44_writeresp_state8 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_spi_core_AWREADY);
    sensitive << ( spi_core_AWREADY );
    sensitive << ( ap_reg_ioackin_spi_core_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_spi_core_WREADY);
    sensitive << ( spi_core_WREADY );
    sensitive << ( ap_reg_ioackin_spi_core_WREADY );

    SC_METHOD(thread_spi_core_AWADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_predicate_op24_writereq_state2 );
    sensitive << ( ap_reg_ioackin_spi_core_AWREADY );

    SC_METHOD(thread_spi_core_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_predicate_op24_writereq_state2 );
    sensitive << ( ap_reg_ioackin_spi_core_AWREADY );

    SC_METHOD(thread_spi_core_BREADY);
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( spi_core_BVALID );
    sensitive << ( ap_predicate_op44_writeresp_state8 );

    SC_METHOD(thread_spi_core_WDATA);
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_spi_core_WREADY );
    sensitive << ( ap_predicate_op27_write_state3 );

    SC_METHOD(thread_spi_core_WVALID);
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_spi_core_WREADY );
    sensitive << ( ap_predicate_op27_write_state3 );

    SC_METHOD(thread_spi_core_blk_n_AW);
    sensitive << ( m_axi_spi_core_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_load_reg_154 );

    SC_METHOD(thread_spi_core_blk_n_B);
    sensitive << ( m_axi_spi_core_BVALID );
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_spi_core_blk_n_W);
    sensitive << ( m_axi_spi_core_WREADY );
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_load_load_fu_117_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_load_reg_154 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( spi_core_BVALID );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_predicate_op44_writeresp_state8 );
    sensitive << ( ap_block_state3_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "00000001";
    state = "0000";
    ap_reg_ioackin_spi_core_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_spi_core_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXI_SPI_DRIVER_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_spi_core_AWVALID, "(port)m_axi_spi_core_AWVALID");
    sc_trace(mVcdFile, m_axi_spi_core_AWREADY, "(port)m_axi_spi_core_AWREADY");
    sc_trace(mVcdFile, m_axi_spi_core_AWADDR, "(port)m_axi_spi_core_AWADDR");
    sc_trace(mVcdFile, m_axi_spi_core_AWID, "(port)m_axi_spi_core_AWID");
    sc_trace(mVcdFile, m_axi_spi_core_AWLEN, "(port)m_axi_spi_core_AWLEN");
    sc_trace(mVcdFile, m_axi_spi_core_AWSIZE, "(port)m_axi_spi_core_AWSIZE");
    sc_trace(mVcdFile, m_axi_spi_core_AWBURST, "(port)m_axi_spi_core_AWBURST");
    sc_trace(mVcdFile, m_axi_spi_core_AWLOCK, "(port)m_axi_spi_core_AWLOCK");
    sc_trace(mVcdFile, m_axi_spi_core_AWCACHE, "(port)m_axi_spi_core_AWCACHE");
    sc_trace(mVcdFile, m_axi_spi_core_AWPROT, "(port)m_axi_spi_core_AWPROT");
    sc_trace(mVcdFile, m_axi_spi_core_AWQOS, "(port)m_axi_spi_core_AWQOS");
    sc_trace(mVcdFile, m_axi_spi_core_AWREGION, "(port)m_axi_spi_core_AWREGION");
    sc_trace(mVcdFile, m_axi_spi_core_AWUSER, "(port)m_axi_spi_core_AWUSER");
    sc_trace(mVcdFile, m_axi_spi_core_WVALID, "(port)m_axi_spi_core_WVALID");
    sc_trace(mVcdFile, m_axi_spi_core_WREADY, "(port)m_axi_spi_core_WREADY");
    sc_trace(mVcdFile, m_axi_spi_core_WDATA, "(port)m_axi_spi_core_WDATA");
    sc_trace(mVcdFile, m_axi_spi_core_WSTRB, "(port)m_axi_spi_core_WSTRB");
    sc_trace(mVcdFile, m_axi_spi_core_WLAST, "(port)m_axi_spi_core_WLAST");
    sc_trace(mVcdFile, m_axi_spi_core_WID, "(port)m_axi_spi_core_WID");
    sc_trace(mVcdFile, m_axi_spi_core_WUSER, "(port)m_axi_spi_core_WUSER");
    sc_trace(mVcdFile, m_axi_spi_core_ARVALID, "(port)m_axi_spi_core_ARVALID");
    sc_trace(mVcdFile, m_axi_spi_core_ARREADY, "(port)m_axi_spi_core_ARREADY");
    sc_trace(mVcdFile, m_axi_spi_core_ARADDR, "(port)m_axi_spi_core_ARADDR");
    sc_trace(mVcdFile, m_axi_spi_core_ARID, "(port)m_axi_spi_core_ARID");
    sc_trace(mVcdFile, m_axi_spi_core_ARLEN, "(port)m_axi_spi_core_ARLEN");
    sc_trace(mVcdFile, m_axi_spi_core_ARSIZE, "(port)m_axi_spi_core_ARSIZE");
    sc_trace(mVcdFile, m_axi_spi_core_ARBURST, "(port)m_axi_spi_core_ARBURST");
    sc_trace(mVcdFile, m_axi_spi_core_ARLOCK, "(port)m_axi_spi_core_ARLOCK");
    sc_trace(mVcdFile, m_axi_spi_core_ARCACHE, "(port)m_axi_spi_core_ARCACHE");
    sc_trace(mVcdFile, m_axi_spi_core_ARPROT, "(port)m_axi_spi_core_ARPROT");
    sc_trace(mVcdFile, m_axi_spi_core_ARQOS, "(port)m_axi_spi_core_ARQOS");
    sc_trace(mVcdFile, m_axi_spi_core_ARREGION, "(port)m_axi_spi_core_ARREGION");
    sc_trace(mVcdFile, m_axi_spi_core_ARUSER, "(port)m_axi_spi_core_ARUSER");
    sc_trace(mVcdFile, m_axi_spi_core_RVALID, "(port)m_axi_spi_core_RVALID");
    sc_trace(mVcdFile, m_axi_spi_core_RREADY, "(port)m_axi_spi_core_RREADY");
    sc_trace(mVcdFile, m_axi_spi_core_RDATA, "(port)m_axi_spi_core_RDATA");
    sc_trace(mVcdFile, m_axi_spi_core_RLAST, "(port)m_axi_spi_core_RLAST");
    sc_trace(mVcdFile, m_axi_spi_core_RID, "(port)m_axi_spi_core_RID");
    sc_trace(mVcdFile, m_axi_spi_core_RUSER, "(port)m_axi_spi_core_RUSER");
    sc_trace(mVcdFile, m_axi_spi_core_RRESP, "(port)m_axi_spi_core_RRESP");
    sc_trace(mVcdFile, m_axi_spi_core_BVALID, "(port)m_axi_spi_core_BVALID");
    sc_trace(mVcdFile, m_axi_spi_core_BREADY, "(port)m_axi_spi_core_BREADY");
    sc_trace(mVcdFile, m_axi_spi_core_BRESP, "(port)m_axi_spi_core_BRESP");
    sc_trace(mVcdFile, m_axi_spi_core_BID, "(port)m_axi_spi_core_BID");
    sc_trace(mVcdFile, m_axi_spi_core_BUSER, "(port)m_axi_spi_core_BUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, state, "state");
    sc_trace(mVcdFile, spi_core_blk_n_AW, "spi_core_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, state_load_reg_154, "state_load_reg_154");
    sc_trace(mVcdFile, spi_core_blk_n_W, "spi_core_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, spi_core_blk_n_B, "spi_core_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, spi_core_AWVALID, "spi_core_AWVALID");
    sc_trace(mVcdFile, spi_core_AWREADY, "spi_core_AWREADY");
    sc_trace(mVcdFile, spi_core_AWADDR, "spi_core_AWADDR");
    sc_trace(mVcdFile, spi_core_WVALID, "spi_core_WVALID");
    sc_trace(mVcdFile, spi_core_WREADY, "spi_core_WREADY");
    sc_trace(mVcdFile, spi_core_WDATA, "spi_core_WDATA");
    sc_trace(mVcdFile, spi_core_ARREADY, "spi_core_ARREADY");
    sc_trace(mVcdFile, spi_core_RVALID, "spi_core_RVALID");
    sc_trace(mVcdFile, spi_core_RDATA, "spi_core_RDATA");
    sc_trace(mVcdFile, spi_core_RLAST, "spi_core_RLAST");
    sc_trace(mVcdFile, spi_core_RID, "spi_core_RID");
    sc_trace(mVcdFile, spi_core_RUSER, "spi_core_RUSER");
    sc_trace(mVcdFile, spi_core_RRESP, "spi_core_RRESP");
    sc_trace(mVcdFile, spi_core_BVALID, "spi_core_BVALID");
    sc_trace(mVcdFile, spi_core_BREADY, "spi_core_BREADY");
    sc_trace(mVcdFile, spi_core_BRESP, "spi_core_BRESP");
    sc_trace(mVcdFile, spi_core_BID, "spi_core_BID");
    sc_trace(mVcdFile, spi_core_BUSER, "spi_core_BUSER");
    sc_trace(mVcdFile, state_load_load_fu_117_p1, "state_load_load_fu_117_p1");
    sc_trace(mVcdFile, ap_sig_ioackin_spi_core_AWREADY, "ap_sig_ioackin_spi_core_AWREADY");
    sc_trace(mVcdFile, ap_predicate_op24_writereq_state2, "ap_predicate_op24_writereq_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_reg_ioackin_spi_core_AWREADY, "ap_reg_ioackin_spi_core_AWREADY");
    sc_trace(mVcdFile, ap_predicate_op44_writeresp_state8, "ap_predicate_op44_writeresp_state8");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, ap_reg_ioackin_spi_core_WREADY, "ap_reg_ioackin_spi_core_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_spi_core_WREADY, "ap_sig_ioackin_spi_core_WREADY");
    sc_trace(mVcdFile, ap_predicate_op27_write_state3, "ap_predicate_op27_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("AXI_SPI_DRIVER.hdltvin.dat");
    mHdltvoutHandle.open("AXI_SPI_DRIVER.hdltvout.dat");
}

AXI_SPI_DRIVER::~AXI_SPI_DRIVER() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete AXI_SPI_DRIVER_spi_core_m_axi_U;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_1;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void AXI_SPI_DRIVER::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv4_F;
}

void AXI_SPI_DRIVER::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_spi_core_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op24_writereq_state2.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read())))) {
            ap_reg_ioackin_spi_core_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_core_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_core_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op24_writereq_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_core_AWREADY.read())))) {
            ap_reg_ioackin_spi_core_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_spi_core_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read())) || 
             (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read())))) {
            ap_reg_ioackin_spi_core_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_core_WREADY.read())) || 
                    (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_core_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, spi_core_WREADY.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state3.read())))) {
            ap_reg_ioackin_spi_core_WREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        state = ap_const_lv4_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            if (esl_seteq<1,4,4>(ap_const_lv4_0, state_load_load_fu_117_p1.read())) {
                state = ap_const_lv4_1;
            } else if (esl_seteq<1,4,4>(ap_const_lv4_1, state_load_load_fu_117_p1.read())) {
                state = ap_const_lv4_2;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        state_load_reg_154 = state.read();
    }
}

void AXI_SPI_DRIVER::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXI_SPI_DRIVER::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXI_SPI_DRIVER::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AXI_SPI_DRIVER::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AXI_SPI_DRIVER::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_core_AWREADY.read())) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_core_AWREADY.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_core_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op24_writereq_state2.read())));
}

void AXI_SPI_DRIVER::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_core_WREADY.read())) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_core_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_spi_core_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state3.read())));
}

void AXI_SPI_DRIVER::thread_ap_block_state8() {
    ap_block_state8 = ((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1)) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)));
}

void AXI_SPI_DRIVER::thread_ap_done() {
    if ((!((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1)) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AXI_SPI_DRIVER::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXI_SPI_DRIVER::thread_ap_predicate_op24_writereq_state2() {
    ap_predicate_op24_writereq_state2 = (!esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1));
}

void AXI_SPI_DRIVER::thread_ap_predicate_op27_write_state3() {
    ap_predicate_op27_write_state3 = (!esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1));
}

void AXI_SPI_DRIVER::thread_ap_predicate_op44_writeresp_state8() {
    ap_predicate_op44_writeresp_state8 = (!esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1));
}

void AXI_SPI_DRIVER::thread_ap_ready() {
    if ((!((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1)) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AXI_SPI_DRIVER::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void AXI_SPI_DRIVER::thread_ap_sig_ioackin_spi_core_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_AWREADY.read())) {
        ap_sig_ioackin_spi_core_AWREADY = spi_core_AWREADY.read();
    } else {
        ap_sig_ioackin_spi_core_AWREADY = ap_const_logic_1;
    }
}

void AXI_SPI_DRIVER::thread_ap_sig_ioackin_spi_core_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_WREADY.read())) {
        ap_sig_ioackin_spi_core_WREADY = spi_core_WREADY.read();
    } else {
        ap_sig_ioackin_spi_core_WREADY = ap_const_logic_1;
    }
}

void AXI_SPI_DRIVER::thread_spi_core_AWADDR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_AWREADY.read()))) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op24_writereq_state2.read())) {
            spi_core_AWADDR =  (sc_lv<32>) (ap_const_lv64_7);
        } else if (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0)) {
            spi_core_AWADDR =  (sc_lv<32>) (ap_const_lv64_18);
        } else if (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)) {
            spi_core_AWADDR =  (sc_lv<32>) (ap_const_lv64_1C);
        } else {
            spi_core_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        spi_core_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void AXI_SPI_DRIVER::thread_spi_core_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op24_writereq_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_AWREADY.read())))) {
        spi_core_AWVALID = ap_const_logic_1;
    } else {
        spi_core_AWVALID = ap_const_logic_0;
    }
}

void AXI_SPI_DRIVER::thread_spi_core_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
          !((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1)) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)))) || 
         (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1)) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1) && 
          !((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1)) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)))))) {
        spi_core_BREADY = ap_const_logic_1;
    } else {
        spi_core_BREADY = ap_const_logic_0;
    }
}

void AXI_SPI_DRIVER::thread_spi_core_WDATA() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_WREADY.read()))) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state3.read())) {
            spi_core_WDATA = ap_const_lv32_5555;
        } else if (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0)) {
            spi_core_WDATA = ap_const_lv32_6;
        } else if (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)) {
            spi_core_WDATA = ap_const_lv32_FFFE;
        } else {
            spi_core_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        spi_core_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void AXI_SPI_DRIVER::thread_spi_core_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_WREADY.read())) || 
         (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_spi_core_WREADY.read())))) {
        spi_core_WVALID = ap_const_logic_1;
    } else {
        spi_core_WVALID = ap_const_logic_0;
    }
}

void AXI_SPI_DRIVER::thread_spi_core_blk_n_AW() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)))) {
        spi_core_blk_n_AW = m_axi_spi_core_AWREADY.read();
    } else {
        spi_core_blk_n_AW = ap_const_logic_1;
    }
}

void AXI_SPI_DRIVER::thread_spi_core_blk_n_B() {
    if (((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)))) {
        spi_core_blk_n_B = m_axi_spi_core_BVALID.read();
    } else {
        spi_core_blk_n_B = ap_const_logic_1;
    }
}

void AXI_SPI_DRIVER::thread_spi_core_blk_n_W() {
    if (((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
          !esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1)))) {
        spi_core_blk_n_W = m_axi_spi_core_WREADY.read();
    } else {
        spi_core_blk_n_W = ap_const_logic_1;
    }
}

void AXI_SPI_DRIVER::thread_state_load_load_fu_117_p1() {
    state_load_load_fu_117_p1 = state.read();
}

void AXI_SPI_DRIVER::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state2_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((!((esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_0) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_predicate_op44_writeresp_state8.read(), ap_const_boolean_1)) || (esl_seteq<1,4,4>(state_load_reg_154.read(), ap_const_lv4_1) && 
  esl_seteq<1,1,1>(spi_core_BVALID.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void AXI_SPI_DRIVER::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWVALID\" :  \"" << m_axi_spi_core_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_AWREADY\" :  \"" << m_axi_spi_core_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWADDR\" :  \"" << m_axi_spi_core_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWID\" :  \"" << m_axi_spi_core_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWLEN\" :  \"" << m_axi_spi_core_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWSIZE\" :  \"" << m_axi_spi_core_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWBURST\" :  \"" << m_axi_spi_core_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWLOCK\" :  \"" << m_axi_spi_core_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWCACHE\" :  \"" << m_axi_spi_core_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWPROT\" :  \"" << m_axi_spi_core_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWQOS\" :  \"" << m_axi_spi_core_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWREGION\" :  \"" << m_axi_spi_core_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_AWUSER\" :  \"" << m_axi_spi_core_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_WVALID\" :  \"" << m_axi_spi_core_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_WREADY\" :  \"" << m_axi_spi_core_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_WDATA\" :  \"" << m_axi_spi_core_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_WSTRB\" :  \"" << m_axi_spi_core_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_WLAST\" :  \"" << m_axi_spi_core_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_WID\" :  \"" << m_axi_spi_core_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_WUSER\" :  \"" << m_axi_spi_core_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARVALID\" :  \"" << m_axi_spi_core_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_ARREADY\" :  \"" << m_axi_spi_core_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARADDR\" :  \"" << m_axi_spi_core_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARID\" :  \"" << m_axi_spi_core_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARLEN\" :  \"" << m_axi_spi_core_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARSIZE\" :  \"" << m_axi_spi_core_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARBURST\" :  \"" << m_axi_spi_core_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARLOCK\" :  \"" << m_axi_spi_core_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARCACHE\" :  \"" << m_axi_spi_core_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARPROT\" :  \"" << m_axi_spi_core_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARQOS\" :  \"" << m_axi_spi_core_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARREGION\" :  \"" << m_axi_spi_core_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_ARUSER\" :  \"" << m_axi_spi_core_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_RVALID\" :  \"" << m_axi_spi_core_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_RREADY\" :  \"" << m_axi_spi_core_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_RDATA\" :  \"" << m_axi_spi_core_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_RLAST\" :  \"" << m_axi_spi_core_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_RID\" :  \"" << m_axi_spi_core_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_RUSER\" :  \"" << m_axi_spi_core_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_RRESP\" :  \"" << m_axi_spi_core_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_BVALID\" :  \"" << m_axi_spi_core_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_spi_core_BREADY\" :  \"" << m_axi_spi_core_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_BRESP\" :  \"" << m_axi_spi_core_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_BID\" :  \"" << m_axi_spi_core_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_spi_core_BUSER\" :  \"" << m_axi_spi_core_BUSER.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

